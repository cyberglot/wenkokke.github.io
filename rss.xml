<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>All The Language</title>
        <link>http://wen.works</link>
        <description><![CDATA[Personal website of Wen Kokke]]></description>
        <atom:link href="http://wen.works/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 17 Dec 2020 00:00:00 UT</lastBuildDate>
        <item>
    <title>An Introduction to Session Types</title>
    <link>http://wen.works/posts/2020-12-17-an-introduction-to-session-types.html</link>
    <description><![CDATA[<p>Session types. Ostensibly, I’ve studied them for the past few years, so I should know something about them, right? I am gonna try and explain the <em>foundations</em> of session types, and along the way, there will be programs which crash, Victorian ladies having milk puddings, and tin can telephones.</p>
<!--more-->
<p>Let’s start out with a <em>dramatis personæ</em>.</p>
<h2 id="dramatis-personæ">Dramatis Personæ</h2>
<p>Session types are about <em>channels</em>, which are like <em>tin can telephones</em>, in that you can use your tin to whisper sweet little nothings to every friend who has a tin connected to yours. I know, my love for tin can telephones is betraying my age a little—I’m an old Victorian lady.</p>
<figure>
<a href="https://books.google.com/books?id=IB8_AAAAYAAJ&amp;dq=Ebenezer+Cobham+Brewer,+Fran%C3%A7ois+Napol%C3%A9on+Marie+Moigno,+Henri+de+Parville&amp;pg=PA227&amp;redir_esc=y#v=onepage&amp;q&amp;f=false"><img src="/public/images/tin-can-telephone.png" alt="Two victorian ladies hold a tin can telephone pulled taut between them." /></a>
<figcaption>
“You simply must try my milk puddings, Ada”, Briar whispers into the telephone.
</figcaption>
</figure>
<dl>
<dt><em>Ada</em></dt>
<dd>A Victorian Lady.
</dd>
<dt><em>Briar</em></dt>
<dd>Ada’s Lady Friend.
</dd>
<dt><em>The Tin Labelled A</em></dt>
<dd>A Tin Held by Ada.
</dd>
<dt><em>The Tin Labelled B</em></dt>
<dd>A Tin Held by Briar.
</dd>
<dt><em>The Piece of Twine</em></dt>
<dd>A Piece of Twine Connecting Tin A and B.
</dd>
</dl>
<p>In the vernacular of session types, the tin cans are referred to as <em>channel endpoints</em> or simply <em>endpoints</em>, and the collection of all tin cans held together by the twine is referred to as a <em>channel</em>. A series of messages whispered back and forth over a single channel is referred to as a <em>session</em>.</p>
<p>Most of the literature on session types considers only the classic scenario, in which we connect exactly two tin cans to form a channel—this is referred to as <em>binary session types</em>. Yet if we wanted to, we could make a telephone with any number of tin cans—this is referred to as <em>multiparty session types</em>.</p>
<p>In this blog post, we I’ll focus on <em>binary session types</em></p>
<h2 id="session-types-at-a-glance">Session Types <em>at a Glance</em></h2>
<p>Let’s imagine for a moment that Ada were to take Briar up on her offer, and ask her to sample her famous milk puddings. Briar, a proper lady, only offers her milk puddings to those who make a <em>sufficiently polite</em> request—Ada must be polite and say “please”, but she must not overuse it, lest she comes off as begging!</p>
<p>We <a name="Ada-and-Briar"></a>encode the interaction between Ada and Briar using <em>session types</em> in Haskell:</p>
<ul>
<li>Ada’s requests are represented using the <code>Request</code> datatype, which allows us to prefix a request for pudding with any number of uses of <code>Please</code>.</li>
<li>Briar’s response is represented using the <code>Response</code> datatype, in which she can either grant permission, in which case Briar sends an <code>Allow</code> with a sample of pudding attached, or refuse Ada’s request, in which case she sends a <code>Deny</code> with a reason.</li>
</ul>
<p>The functions <code>ada</code> and <code>briar</code> represent Ada and Briar—these functions each receive an endpoint for the shared channel, and communicate along the lines of our story—Ada sends a request, Briar evaluates her politeness and responds with either pudding or a refusal, and finally Ada evaluates Briars response, and expresses her emotions accordingly:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Request</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Please</span> <span class="dt">Request</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">MayIHaveSomePudding</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Response</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Allow</span> <span class="dt">Pudding</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Deny</span> <span class="dt">String</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">ada ::</span> <span class="dt">Send</span> <span class="dt">Request</span> (<span class="dt">Recv</span> <span class="dt">Response</span> <span class="dt">End</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>ada chan <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  chan&#39; <span class="ot">&lt;-</span> send (<span class="dt">Please</span> <span class="dt">MayIHaveSomePudding</span>) chan</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  (resp, chan&#39;&#39;) <span class="ot">&lt;-</span> recv chan&#39;</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> resp <span class="kw">of</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Allow</span> pudding <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;I’m so happy!&quot;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Deny</span> reason <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;Woe is me!&quot;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="ot">briar ::</span> <span class="dt">Recv</span> <span class="dt">Request</span> (<span class="dt">Send</span> <span class="dt">Response</span> <span class="dt">End</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>briar chan <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  (req, chan&#39;) <span class="ot">&lt;-</span> recv chan</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> resp <span class="ot">=</span> <span class="kw">case</span> req <span class="kw">of</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">MayIHaveSomePudding</span> <span class="ot">-&gt;</span> <span class="dt">Deny</span> <span class="st">&quot;Such rudeness!&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Please</span> <span class="dt">MayIHaveSomePudding</span> <span class="ot">-&gt;</span> <span class="dt">Allow</span> myPudding</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Please</span> (<span class="dt">Please</span> _) <span class="ot">-&gt;</span> <span class="dt">Deny</span> <span class="st">&quot;Such beggary!&quot;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  chan&#39;&#39; <span class="ot">&lt;-</span> send resp chan&#39;</span></code></pre></div>
<p>The example illustrates a crucial notions for session types:</p>
<p>Firstly, session types are <em>communication protocols.</em> If you glance at the types of the endpoints, you see that they represent the communication protocol from each participants perspective. For instance, Ada’s endpoint says she must send a request, receive a response, and then end the session.</p>
<p>Secondly, the types of the endpoints of a binary channel must be <em>dual</em>. When Ada’s endpoint says she must send, Briar’s endpoint says she must receive. For classical multiparty session types, the equivalent notion is called <em>coherence</em>, but the principle remains the same.</p>
<p>Finally, each endpoint must be used <em>exactly once</em> if we want to be sure to stick to the protocol. For instance, in the code above, each channel endpoint is only used once, and each send or receive returns a new channel on which to continue the communication. If we didn’t, we would be able to write a <a name="cheeky-Ada"></a>cheeky variant of Ada, who simply tries any number of pleases until she gets that sweet, sweet pudding:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ada ::</span> <span class="dt">Send</span> <span class="dt">Request</span> (<span class="dt">Recv</span> <span class="dt">Response</span> <span class="dt">End</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>ada chan <span class="ot">=</span> tryAll <span class="dt">MayIHaveSomePudding</span> chan</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    tryAll req chan <span class="ot">=</span> <span class="kw">do</span> </span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      chan&#39; <span class="ot">&lt;-</span> send req chan</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>      (resp, chan&#39;&#39;) <span class="ot">&lt;-</span> recv chan&#39;</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> resp <span class="kw">of</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Allow</span> pudding <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;I’m so happy!&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Deny</span> reason <span class="ot">-&gt;</span> tryAll (<span class="dt">Please</span> req) chan</span></code></pre></div>
<p>But that’s not what the protocol says! Briar doesn’t have time for more than one request, so after the first one has run its course, Ada whispers her second request into the tin can, then waits forever, pining for a response from Briar which will never come!</p>
<h2 id="a-bit-of-a-roadmap">A Bit of a Roadmap</h2>
<p>Only a few short years after Ada and Briar enjoyed sweet milk puddings, a man by the name of <em>Alonzo Church</em> was born in Washington, D.C., in the United States. Three decades later, in the 1930s, Alonzo developed <a href="https://www.jstor.org/stable/1968337">the λ-calculus</a>, a foundational calculus which studies computation using <em>functions</em>. To this day, the λ-calculus underpins most theories of functional programming languages. Talk about influential!</p>
<p>Only a few short years after Alonzo developed the λ-calculus, a man by the name of <em>Robin Milner</em> was born near Yealmpton, in England. Alonzo lived a long life, over nine decades! A few years before Alonzo’s death in the mid 1990s, Robin, together with Joachim Parrow and David Walker, developed the <a href="http://www.lfcs.inf.ed.ac.uk/reports/89/ECS-LFCS-89-85/">π-calculus</a>, a foundational calculus which studies concurrent computation by processes using <em>message-passing communication</em>. It wasn’t the first process calculus—it itself was heavily influenced by ideas dating back to the early 1980s—but it’s certainly one of the most influential!</p>
<p>We’ll start out by discussing the untyped λ-calculus. It’s a wonderful little language, and it’s <em>really</em> powerful. Unfortunately, it has all sorts of programs that do all sorts of bad things, like loop forever, so with all that power, it’s <em>really scary</em> too! We’ll then discuss the idea of taming all that scary power using types, to try and get only well-behaved programs, and the challenges of taming it without taking all the <em>oomph</em> out.</p>
<p>Then, we’ll switch to discussing the π-calculus. It’s a wonderful little language, even if it’s twice as big as the λ-calculus—with <em>six</em> constructs instead of <em>three</em>! It’s even more powerful than the λ-calculus—it can express all sorts of concurrent behaviours that the λ-calculus has no hope of expressing. Unfortunately, it’s scarier as well—there’s way more things that can go wrong! Again, we’ll turn our attention to taming all that scary power using types, and the problems of <em>oomph</em>’lessness that comes with it.</p>
<p>Finally, we’ll talk about having the best of both worlds, in a concurrent λ-calculus, which is sorta what you get when you smash the λ-calculus and the π-calculus together at high speeds! The concurrent λ-calculus has the best of both worlds: higher-order functions and concurrency with message-passing communication!</p>
<h2 id="the-λ-calculus-so-powerful-so-scary">The λ-calculus! <em>(So powerful, so scary…)</em></h2>
<p>The untyped λ-calculus celebrated its 89th birthday last November, so to say that it’s been around for a while undersells it a bit. It’s a pretty small system—it has only three things—there’s variables, λ-abstractions to make functions, and function applications to get rid of ’em:</p>
<p><span class="math display">
\begin{array}{l}
\text{Term} \; L, M, N
\\
\quad
  \begin{array}{rl}
  ::= &amp; x
  \;\mid\;    \lambda x.M
  \;\mid\;    M \; N
  \end{array}
\end{array}
</span></p>
<p>There’s only one computation rule—if a function <span class="math inline">\lambda x.M</span> meets its argument <span class="math inline">N</span> we replace all occurrences of <span class="math inline">x</span> in the function body <span class="math inline">M</span> with the argument <span class="math inline">N</span>.</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} (\lambda x.M)\;N \longrightarrow M\{N/x\} \end{array}</span></p>
</div>
<p>That’s not all, though, since we also need to let our calculus know that it’s okay to reduce under a function application. For this, we <em>could</em> just write out the following rules:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} M \longrightarrow M^\prime \\ \hline M \; N \longrightarrow M^\prime \; N \end{array}</span> <span class="math inline">\begin{array}{c} N \longrightarrow N^\prime \\ \hline M \; N \longrightarrow M \; N^\prime \end{array}</span></p>
</div>
<p>However, things tends to compose a little better if you use a little trick called <em>evaluation contexts</em>. We’ll see an example of <em>how</em> evaluation contexts compose better later. Anyway, you write down all the partial terms under which it’s okay to normalise, and then write a single rule… Read <span class="math inline">E[M]</span> as “replace the single <span class="math inline">\square</span> in <span class="math inline">E</span> with <span class="math inline">M</span>”:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l} \text{Evaluation Context} \; E \\ \quad  \begin{array}{rl}  ::= &amp; \square  \;\mid\; E \; N  \;\mid\; M \; E  \end{array} \end{array}</span> <span class="math inline">\begin{array}{c} M \longrightarrow M^\prime \\ \hline E[ M ] \longrightarrow E[ M^\prime ] \end{array}</span></p>
</div>
<p>When we choose what to put in our evaluation contexts, we determined where to allow and disallow reduction. For instance, here we’re saying “You’re allowed to reduce function calls and their arguments… but don’t you dare touch the function body before we’re actually calling it!” This is called an <em>evaluation strategy</em>, and the one we’re using here is called <em>call-by-name</em>. Usually, call-by-name is pretty terrible in terms of efficiency. Imagine you have a pretty expensive computation, and the result of that computation is used twenty times… call-by-name is likely to do the whole computation twenty times! In practice, you’ll want to use call-by-value or call-by-need, but those complicate things, so we’re not using them here!</p>
<p>Where were we? Oh, yes, λ-calculus, powerful, scary… Right! The λ-calculus is <em>very</em> powerful—<em>some stuff about it being a “universal model of computation”</em>—but that power comes at the cost of also being able to express quite a lot of scary programs that do bad stuff.</p>
<p>For instance, the λ-calculus comes with general recursion out of the box, via the <span class="math inline">Y</span> combinator! We’ll see an example of using the <span class="math inline">Y</span> combinator below, but essentially, <span class="math inline">Y\;f</span> represents an infinite series of applications of <span class="math inline">f</span>:</p>
<p><span class="math display">
\begin{array}{lrl}
Y
&amp; =               &amp; \lambda f. (\lambda x. x \; x) (\lambda x. f \; (x \; x)) \\
\\
Y \; f
&amp; \longrightarrow &amp; f \; (Y \; f)
\\
&amp; \longrightarrow &amp; f \; (f \; (Y \; f))
\\
&amp; \longrightarrow &amp; f \; (f \; (f \; (Y \; f)))
\\
&amp; \longrightarrow &amp; \dots
\end{array}
</span></p>
<p>That’s good—as programmers, we like recursion! Really simplifies your programs, not having to write out the case for every possible input!</p>
<p>However, if you pass <span class="math inline">Y</span> the identity function, you’ll get <span class="math inline">Ω</span>—the program which runs forever, but never gets anything done! Watch it reduce to right back to itself in a single step:</p>
<p><span class="math display">
\begin{array}{lrl}
\Omega
&amp; =               &amp; (\lambda x. x \; x) (\lambda x. x \; x)
\\
&amp; \longrightarrow &amp; (x \; x)\{\lambda x. x \; x/x\}
\\
&amp; =               &amp; (\lambda x. x \; x) (\lambda x. x \; x)
\end{array}
</span></p>
<p>That’s scary, I’d prefer not to have that! Programs which run forever, but never do a single thing—or worse, programs which are doing things the whole time, but never produce any outputs!</p>
<p>Most functional languages don’t just implement the core λ-calculus, but rather extend the λ-calculus with various constructs—numbers, addition, multiplication, pairs, sums, <em>etc.</em> <em>Technically speaking</em>, these can all be encoded using just functions—see, <em>e.g.</em>, Church encodings—but it tends to be <em>a lot</em> more practical and faster to use, <em>e.g.</em>, machine numbers.</p>
<p>For example, we can extend the untyped λ-calculus with <a name="peano"></a>Peano numbers. First, we extend the term language with the number <em>zero</em>, written <span class="math inline">\text{zero}</span>, the successor, written <span class="math inline">\text{suc}</span>, and a pattern matching construct for numbers, written <span class="math inline">\text{case}\;L\;\text{of}\;\{\text{zero}\mapsto{M};\text{suc}\;{x}\mapsto{N}\}</span>:</p>
<p><span class="math display">
\begin{array}{l}
\text{Term} \; L, M, N
\\
\quad
  \begin{array}{rl}
  ::= &amp; \dots
  \\\mid &amp;    \text{zero}
  \;\mid\;    \text{suc}\;M
  \\\mid &amp;    \text{case}\;L\;\text{of}\;\{\text{zero}\mapsto{M};\text{suc}\;{x}\mapsto{N}\}
  \end{array}
\end{array}
</span></p>
<p>Then, we extend the reduction rules with two reduction rules for pattern matches on numbers—depending on whether the number is zero or a successor:</p>
<div class="mathpar">
<p><span class="math inline">\text{case}\;\text{zero}\;\text{of}\;\{\text{zero}\mapsto{M};\text{suc}\;{x}\mapsto{N}\} \longrightarrow M</span></p>
<p><span class="math inline">\text{case}\;\text{suc}\;{L}\;\text{of}\;\{\text{zero}\mapsto{M};\text{suc}\;{x}\mapsto{N}\} \longrightarrow N\{L/x\}</span></p>
</div>
<p>And we shouldn’t forget to extend our evaluation contexts:</p>
<p><span class="math display">
\begin{array}{l}
\text{Evaluation Context} \; E
\\
\quad
  \begin{array}{rl}
  ::= &amp; \dots
  \\\mid &amp;    \text{suc}\;E
  \\\mid &amp;    \text{case}\;E\;\text{of}\;\{\text{zero}\mapsto{M};\text{suc}\;{x}\mapsto{N}\}
  \end{array}
\end{array}
</span></p>
<p>We can now define addition on Peano numbers in our calculus! Ideally, we’d write something like the following, familiar definition for addition:</p>
<p><span class="math display">
\begin{array}{lllcl}
\text{plus} &amp; \text{zero} &amp; {N} &amp; = &amp; \text{zero}
\\
\text{plus} &amp; (\text{suc}\;{M}) &amp; {N} &amp; = &amp; \text{suc}\;(\text{plus}\;{M}\;{N})
\end{array}
</span></p>
<p>Our core language doesn’t support recursive or pattern matching definitions, so we’ll have to elaborate the above definition into something less familiar, which uses the <span class="math inline">Y</span> combinator and the pattern matching construct. It’s a bit more verbose, but it’s addition nonetheless:</p>
<p><span class="math display">
\begin{array}{l}
\text{plus} \triangleq \lambda{x}.\lambda{y}.(Y\;(\text{plus}^\prime\;{y}))\;{x}
\\
\quad\textbf{where}
\\
\quad\quad
\text{plus}^\prime \triangleq \lambda{y}.\lambda{\text{rec}}.\lambda{x}.
\\
\quad\quad\quad\text{case}\;{x}\;\text{of}\;\left\{
\begin{array}{lcl}
\text{zero} &amp; \mapsto &amp; \text{zero};
\\
\text{suc}\;{x^\prime} &amp; \mapsto &amp; \text{suc}\;(\text{rec}\;{x^\prime}\;{y})
\end{array}
\right\}
\end{array}
</span></p>
<p>Woe is us! We have <em>another</em> kind of problem! We now have to worry about programs like <span class="math inline">\text{plus}\;(\lambda x.x)\;\text{zero}</span>. What does that even mean?! According to our semantics, it means exactly that, since it doesn’t reduce any further… It’s stuck on the pattern match on <span class="math inline">\lambda x.x</span>, since there’s no case for functions.</p>
<p>Problems like these are less obvious when using, <em>e.g.</em>, Church encodings, since everything is just functions. For instance, if we use Church-encoded Peano numbers to compute <span class="math inline">\text{plus}_{ch} \; (\lambda x.x) \; \text{zero}_{ch}</span>, and convert the result to our builtin Peano numbers, we find that adding the identity function to the number <em>zero</em> gives us <em>one</em>:</p>
<p><span class="math display">
\begin{array}{lcl}
\text{zero}_{ch} &amp; \triangleq &amp; \lambda s. \lambda z. z
\\
\text{suc}_{ch}  &amp; \triangleq &amp; \lambda n. \lambda s. \lambda z. s \; (n \; s \; z)
\\
\text{plus}_{ch} &amp; \triangleq &amp; \lambda m. \lambda n. \lambda s. \lambda z. m \; s \; (n \; s \; z)
\end{array}
</span></p>
<p><span class="math display">
\begin{array}{l}
\text{plus}_{ch} \; (\lambda x.x) \; \text{zero}_{ch} \; \text{suc} \; \text{zero}
\\
\quad
  \begin{array}{rl}
  \longrightarrow &amp; (\lambda x.x) \; \text{suc} \; (\text{zero}_{ch} \; \text{suc} \; \text{zero})
  \\
  \longrightarrow &amp; (\lambda x.x) \; \text{suc} \; \text{zero}
  \\
  \longrightarrow &amp; \text{suc} \; \text{zero}
  \end{array}
\end{array}
</span></p>
<p>All in all, we’ve identified <em>two</em> main problems with using the untyped λ-calculus as a foundation for programming languages:</p>
<ol type="1">
<li>it has programs which loop forever but produce nothing; and</li>
<li>it has no way of making sure that data is used as intended.</li>
</ol>
<p>Specifically, for the second problem, we have the choice between programs which get stuck and programs which compute nonsense. If we want programs that misuse data to get stuck, we tag our data—by using, <em>e.g.</em>, a syntactically distinct <span class="math inline">\text{zero}</span> constructor—and check the types of our data at runtime. If we’re fine with the misuse of data, we encode everything as functions, and accept whatever results fall out of our encoding.</p>
<h2 id="taming-the-λ-calculus-with-types">Taming the λ-calculus with types…</h2>
<p>So, we’ve got a lot of scary stuff going on, stuff we really rather wouldn’t have, like programs which uselessly loop forever, and programs which try to add numbers to functions. What can we do?</p>
<p>One of the <em>simplest</em> solutions—horrible pun <em>absolutely</em> intended—is to use simple types. You see, in 1940, in an attempt to get rid of these unhelpful loops, Alonzo developed <a href="https://www.jstor.org/stable/2266170">the simply-typed λ-calculus</a>.</p>
<p>We start by formalising what we mean by <em>type</em>. Since all we’ve got is functions, all we need is a function type <span class="math inline">A \to B</span> and <em>some</em> base type—it doesn’t really matter what, so we’re gonna call it <span class="math inline">\star</span>:</p>
<p><span class="math display">
\begin{array}{l}
\text{Type} \; A, B, C
\\
\quad
  \begin{array}{rl}
  ::= &amp; \star
  \;\mid\; A \to B
  \end{array}
\end{array}
</span></p>
<p>With types in hand, we write down some <em>typing rules</em>. The goal is that <em>if</em> we can construct a typing derivation for a term, that term will be well-behaved.</p>
<p>Terms are checked in the context of some typing environment, which we’ll refer to with the variable <span class="math inline">\Gamma</span> or <span class="math inline">\Delta</span>. Typing environments are just a bunch of typing assignments <span class="math inline">x : A</span>. Why do we need typing environments? A variable in a program might stand for some base value, like an int, or it might stand for a function, and it’s kinda important to know ahead of time which one it is—you can’t apply an int, and you can’t add one to a function! We write <span class="math inline">x : A \in \Gamma</span> to mean that “somewhere in <span class="math inline">\Gamma</span> there’s the typing assignment <span class="math inline">x : A</span>”.</p>
<p>We write <span class="math inline">\Gamma \vdash M : A</span> to mean that “using the variables from the typing environment <span class="math inline">\Gamma</span>, the term <span class="math inline">M</span> has type <span class="math inline">A</span>”—statements like these are called <em>typing judgements</em>. But we can’t just <em>claim</em> a some term has some time, we need to back it up with some actual proof! For that, we use <em>inference rules</em>, which is how most type systems are presented.</p>
<p>Inference rules are like a puzzle. They’re written as…</p>
<p><span class="math display">
\begin{array}{c}
\mathit{Premise}_1 \dots \mathit{Premise}_n
\\ \hline
\mathit{Conclusion}
\end{array}
</span></p>
<p>The puzzle you’re trying to solve is:</p>
<ul>
<li>Find a piece whose conclusion matches the thing you’re trying to prove;</li>
<li>Oh no! All those things had premises! You gotta find puzzle pieces whose conclusions match those as well now!</li>
<li>Keep going until there’s no more open premises! You got this!</li>
</ul>
<p>For the simply-typed λ-calculus, there are three inference rules, one for each term construct:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} {x : A \in \Gamma} \\ \hline \Gamma \vdash x : A \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma, x : A \vdash M : B \\ \hline \Gamma \vdash \lambda x.M : A \to B \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash M : A \to B \quad \Gamma \vdash N : A \\ \hline \Gamma \vdash M \; N : B \end{array}</span></p>
</div>
<p>Oh no! All of these rules have some premises! Does that mean we’re gonna have to puzzle forever? Nope, all it means is that we are <em>immediately</em> complicating the puzzle analogy.</p>
<p>If you look at the first rule, the premise isn’t actually a typing judgement… It’s one of those thingies which checks whether or not <span class="math inline">x</span> has type <span class="math inline">A</span> in <span class="math inline">\Gamma</span>! There’s a whole separate kind of puzzle for those! One that’s usually left implied, because it’s relatively simple:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \\ \hline x : A \in x : A, \Gamma \end{array}</span> <span class="math inline">\begin{array}{c} x : A \in \Gamma \\ \hline x : A \in y : B, \Gamma \end{array}</span></p>
</div>
<p>All those puzzle pieces say is “if you wanna know if <span class="math inline">x : A</span> is in <span class="math inline">\Gamma</span>… go through all the thing in <span class="math inline">\Gamma</span> and check if one of ’em is <span class="math inline">x : A</span>.” With those pieces made explicit, our puzzle will have a satisfying “no premise left unproven!” kind of feel to it… Though, mostly, folks just leave the proofs for <span class="math inline">x : A \in \Gamma</span> implicit, since once you write out <span class="math inline">\Gamma</span>, they’re pretty obvious.</p>
<p>Anyway, back to our typing rules for the λ-calculus! In order of appearance:</p>
<ul>
<li>A variable <span class="math inline">x</span> has type <span class="math inline">A</span> if there’s an assignment in <span class="math inline">\Gamma</span> that says so.</li>
<li>If we’ve got something of type <span class="math inline">B</span> which uses something of type <span class="math inline">A</span> from the typing environment, we can abstract over that something to create a function of type <span class="math inline">A \to B</span>.</li>
<li>If we’ve got something of type <span class="math inline">A \to B</span> and something of type <span class="math inline">A</span>, then we can apply the former to the latter to get something of type <span class="math inline">B</span>.</li>
</ul>
<p>Guess what?! It works! All the programs you can type with these rules are super well-behaved and nice! Buuuut… there’s kinda a lot of programs that are really nice and good, that you can’t type with these rules… Very, <em>very</em>, notably, you can’t type the <span class="math inline">Y</span> combinator. Oh no! We lost recursion!</p>
<p>Queue the history of type theory, trying to wrangle with this, trying to make this system more permissive while still keeping lots of the scary stuff out!</p>
<p>It’s, <em>uh</em>, pretty hard to get <em>extactly</em> the bad looping stuff out, so some folks are like “eh, we’ll keep the looping stuff, but still use types to get rid of all that ‘adding functions to numbers’ nonsense”, whereas other folks are all hardcore and decide that “no it has to be terminating all the way even if it becomes pretty hard to use!”</p>
<h2 id="a-detour-into-linearity">A detour into linearity!</h2>
<p>Let’s briefly talk about another type system for the λ-calculus—but only because it’ll turn out to be highly relevant to session types, I haven’t forgotten what I promised to write about! Let’s talk about <a href="https://homepages.inf.ed.ac.uk/wadler/papers/lineartaste/lineartaste-revised.pdf">the linear λ-calculus</a>.</p>
<p>In its most minimal form, the linear λ-calculus demands that every variable is used <em>exactly once</em>. This’ll end up being a <em>very important</em> restriction for our session-typed calculus. Remember that cheeky implementation for Ada, which kept sending new and new requests for milk pudding, even though the protocol <em>clearly</em> stated she could only send one request? That’s where the <em>used exactly once</em> restriction comes in.</p>
<p>Okay, so how are we going to enforce this in the type system? When you check a function application, you have to decide which parts of the typing environment are gonna be used in the function, and which parts in the argument. By the time you’ve made it all the way down to a variable, the typing environment is supposed to be empty save for the variable you’re checking. Everything else must’ve already been split off for usage elsewhere.</p>
<p>Also, we now use this cute little lollipop instead of the function arrow:</p>
<p><span class="math display">
\begin{array}{l}
\text{Type} \; A, B, C
\\
\quad
  \begin{array}{rl}
  ::= &amp; \star
  \;\mid\; A \multimap B
  \end{array}
\end{array}
</span></p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \\ \hline x : A \vdash x : A \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma, x : A \vdash M : B \\ \hline \Gamma \vdash \lambda x.M : A \multimap B \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma \vdash M : A \multimap B \quad \Delta \vdash N : A \\ \hline \Gamma, \Delta \vdash M \; N : B \end{array}</span></p>
</div>
<p>In order of appearance:</p>
<ul>
<li>A variable <span class="math inline">x</span> has type <span class="math inline">A</span> if the typing environment <em>only</em> contains <span class="math inline">x : A</span>.</li>
<li>If we’ve got something of type <span class="math inline">B</span> which uses something of type <span class="math inline">A</span> from the typing environment, we can abstract over that something to create a function of type <span class="math inline">A \multimap B</span>. <em>(It’s the same as before!)</em></li>
<li>If we’ve got something of type <span class="math inline">A \multimap B</span> which uses some chunk of the typing environment called <span class="math inline">\Gamma</span>, and something of type <span class="math inline">A</span> which uses the rest of the typing environment called <span class="math inline">\Delta</span>, then we can apply the former to the latter to get something of type <span class="math inline">B</span> which uses both <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span>.</li>
</ul>
<p>Notice that <span class="math inline">A \multimap B</span> being a linear function isn’t something that follows from the rules for abstraction and application… it’s something to do with the structure of <em>all rules</em>.</p>
<p>As a type system, this is <em>highly restrictive</em>. Essentially, what we’re left with is a calculus of permutations. Think of lists… if you’re writing a function from lists to lists, but you <em>have to</em> use every element in the list exactly once, what kinds of programs can you write? Permutations. That’s it.</p>
<h2 id="the-π-calculus-is-even-scarier">The π-calculus! <em>(Is even scarier…)</em></h2>
<p>Oof, that was a bit of a detour, wasn’t it? Wanna talk about <em>session types</em>, the thing that I promised I’d talk about? Okay, let’s do it! The π-calculus is pretty young—it didn’t show up until 1992, though it’s heavily influenced by ideas dating back to the 1980s. Unlike with the λ-calculus, there’s not really a <em>canonical</em> π-calculus that everyone agrees on, so the one I’m presenting here is just kinda the version that I felt like presenting.</p>
<p>It’s also pretty big! It’s got twice as many <em>things</em> in it as the λ-calculus. Instead of functions, we’re talking about processes, which are built using <em>six</em> different constructors:</p>
<p><span class="math display">
\begin{array}{l}
\text{Process}\;{P},{Q},{R}
\\
\quad
  \begin{array}{rll}
     ::=    &amp; (\nu {x}){P}           &amp;\text{— create new channel}
  \\\mid    &amp; ({P}\parallel{Q})      &amp;\text{— put }P\text{ and }Q\text{ in parallel}
  \\\mid    &amp; 0                      &amp;\text{— done}
  \\\mid    &amp; x\langle{y}\rangle.{P} &amp;\text{— send }y\text{ on }x
  \\\mid    &amp; x(y).{P}               &amp;\text{— receive }y\text{ on }x
  \\\mid    &amp; !{P}                   &amp;\text{— replicate }P
  \end{array}
\end{array}
</span></p>
<p>In order of appearance:</p>
<ul>
<li>We’ve got ν-binders, written <span class="math inline">(\nu x)P</span>, which creates a new channel <span class="math inline">x</span>, which can be used in <span class="math inline">P</span>. (That ν is the Greek letter nu, which sure sounds a lot like “new”. It’s, <em>like</em>, the only well-chosen Greek letter we use in programming language theory.)</li>
<li>We’ve got parallel composition, written <span class="math inline">\parallel</span>, to let you know that two processes are running in parallel.</li>
<li>We’ve got nil, written <span class="math inline">0</span>, the process which is done.</li>
<li>We’ve got <em>send</em>, written <span class="math inline">x \langle y \rangle.P</span>, which sends some <span class="math inline">y</span> on <span class="math inline">x</span>, and then continues as <span class="math inline">P</span>.</li>
<li>We’ve got <em>receive</em>, written <span class="math inline">x ( y ).P</span>, which receives some value on <span class="math inline">x</span>, names it <span class="math inline">y</span>, and then continues as <span class="math inline">P</span>.</li>
<li>We’ve got replication, written <span class="math inline">! P</span>, which represents a process <span class="math inline">P</span> which is replicated an arbitrary number of times.</li>
</ul>
<p>Replication isn’t truly <em>essential</em> to the π-calculus, it’s just that we can’t do any sort of <em>infinite</em> behaviour with just sending and receiving, so we have to add it explicitly. Other solutions, like adding recursive definitions, work as well.</p>
<p>There’s only one computation rule—if we’ve got a send and a receive in parallel, we perform the communication, and replace all instances of the name bound by the receive instruction by the actual value sent:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} x\langle{y}\rangle.{P}\parallel x(z).{Q} \longrightarrow {P}\parallel{Q}\{y/z\} \end{array}</span></p>
</div>
<p>Plus our usual trick to let us reduce under parallel compositions and ν-binders:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l} \text{Evaluation Context} \; G \\ \quad  \begin{array}{rl}  ::= &amp; \square  \;\mid\; (\nu{x}){G}  \;\mid\; ({G}\parallel{Q})  \;\mid\; ({P}\parallel{G})  \end{array} \end{array}</span> <span class="math inline">\begin{array}{c} {P} \longrightarrow {P}^\prime \\ \hline G[ P ] \longrightarrow G[ P^\prime ] \end{array}</span></p>
</div>
<p>However, these rules in and of themselves are not enough. You see, a parallel composition <span class="math inline">P \parallel Q</span> isn’t intended to be <em>ordered</em>—I mean, if you’ve got two processes in parallel, does it make sense to say that one of them is “to the left of” the other?—but we haven’t told the reduction semantics about that. That means that with the rules we’ve given so far, we cannot reduce the following:</p>
<p><span class="math display">
(\nu x)(x(z).{Q}\parallel x\langle{y}\rangle.{P})
</span></p>
<p>Why not? The send and the receive are in the wrong order—our computation rule requires that the send is <em>to the left of</em> the receive, so we can’t apply it:</p>
<p><span class="math display">
x\langle{y}\rangle.{P}\parallel x(z).{Q}
\longrightarrow
{P}\parallel{Q}\{y/z\}
</span></p>
<p>One solution is to tell the reduction semantics that the order of processes doesn’t matter—along with a few other things:</p>
<p><span class="math display">
\begin{array}{lrll}
  P \parallel Q
  &amp; \equiv
  &amp; Q \parallel P
  \\
  P \parallel (Q \parallel R)
  &amp; \equiv
  &amp; (P \parallel Q) \parallel R
  \\
  P \parallel 0
  &amp; \equiv
  &amp; P
  \\
  (\nu x)0
  &amp; \equiv
  &amp; \text{if}\;{x}\not\in{P}
  \\
  (\nu x)(\nu y)P
  &amp; \equiv
  &amp; (\nu y)(\nu x)P
  \\
  (\nu x)(P \parallel Q)
  &amp; \equiv
  &amp; (\nu x)P \parallel Q,
  &amp; \text{if}\;x\not\in{Q}
  \\
  !{P}
  &amp; \equiv
  &amp; !{P}\parallel{P}
\end{array}
</span></p>
<p>In order of appearance:</p>
<ul>
<li>Parallel composition is <em>commutative</em> and <em>associative</em>, <em>i.e.</em> the order of parallel processes doesn’t matter.</li>
<li>We can remove (and add) processes which are done.</li>
<li>We can remove (and add) ν-binders which aren’t used.</li>
<li>The order of ν-binders doesn’t matter.</li>
<li>We can swap ν-binders and parallel compositions as long as we don’t accidentally move an endpoint out of the scope of its binder.</li>
<li>Replicated processes can be, <em>well</em>, replicated. We kinda forgot to add this at first, so we didn’t have any infinite behaviour… but now we do!</li>
</ul>
<p>Now that we have this equivalence of processes—usually called <em>structural congruence</em>—we can embed it in the reduction relation:</p>
<p><span class="math display">
\begin{array}{c}
  P \equiv P^\prime \quad P^\prime \longrightarrow Q^\prime \quad Q^\prime \equiv Q
  \\ \hline
  P \longrightarrow Q
\end{array}
</span></p>
<p>The reason we’re embedding it this way, with a reduction step sandwiched between two equivalence, is because the equivalence relation isn’t super well-behaved—there’s plenty of infinite chains of rewrite rules, <em>e.g.</em>, imagine swapping <span class="math inline">P \parallel Q</span> back and forth forever, or duplicating <span class="math inline">! P</span> forever—and we’d prefer not to have any infinite chains of reductions. Embedding it this way forces there to be at least one <em>real</em> computation step in each reduction step, because the only way to construct a reduction is to start with a computation.</p>
<p>If you thought the λ-calculus had problems, have I got news for you. There’s all the old problems we had with the lambda calculus. We’ve got processes that reduce forever without doing anything:</p>
<p><span class="math display">
\begin{array}{l}
(\nu x)(!{x}\langle{y}\rangle.0 \parallel !{x}({z}).0)
\\
\quad
  \begin{array}{rl}
  \equiv
  &amp; (\nu x)( !{x}\langle{y}\rangle.0 
    \parallel {x}\langle{y}\rangle.0 
    \parallel !{x}({z}).0 
    \parallel {x}({z}).0)
  \\
  \longrightarrow
  &amp; (\nu x)( !{x}\langle{y}\rangle.0 \parallel !{x}({z}).0)
  \end{array}
\end{array}
</span></p>
<p>Ah! One process which just <em>keeps</em> sending the value <span class="math inline">y</span> to another process, which throws it away immediately, just sending and throwing away, <em>forever</em>. Isn’t that the kind of programs we all like to write?</p>
<p>Plus, if we add numbers, we could try to send over the number 5, foolishly assuming it’s a channel.</p>
<p>But <em>what fun</em>! There’s new problems as well! If we’ve got two <em>pairs</em> of processes, both of which are trying to communicate over <span class="math inline">x</span> at the same time, then reduction is not longer <em>deterministic</em>—it’s anyone’s guess which message will end up where! Yaaay, it’s <em>race conditions</em>:</p>
<p><span class="math display">
\begin{array}{l}
  (\nu x)%
  \left(
  \begin{array}{l}
  x\langle{y_1}\rangle.{P_1}\parallel x(z_1).{Q_1}\parallel
  \\
  x\langle{y_2}\rangle.{P_2}\parallel x(z_2).{Q_2}
  \end{array}
  \right)
  \\
  \\
  \quad
  \begin{array}{rl}
  \longrightarrow
  &amp; (\nu x)%
    \left(
    \begin{array}{l}
    {P_1}\parallel {Q_1}\{y_1/z_1\}\parallel
    \\
    {P_2}\parallel {Q_2}\{y_2/z_2\}
    \end{array}
    \right)
  \\
  \mathit{or}
  \\
  \longrightarrow
  &amp; (\nu x)%
    \left(
    \begin{array}{l}
    {P_1}\parallel {Q_1}\{y_2/z_1\}\parallel
    \\
    {P_2}\parallel {Q_2}\{y_1/z_2\}
    \end{array}
    \right)
  \end{array}
\end{array}
</span></p>
<p>Another <em>fun</em> thing we can do is write two processes which echo a message on <span class="math inline">x</span>—they receive something and send it back… but the twist is, they’re both wanting to <em>receive</em> first! Ack, it’s a <em>deadlock</em>:</p>
<p><span class="math display">
\begin{array}{c}
  (\nu x)%
  \left(
  x(y).x\langle{y}\rangle.0 \parallel x(z).x\langle{z}\rangle.0
  \right)
  \not\longrightarrow
\end{array}
</span></p>
<p>To be fair, it’s not surprising that race conditions and deadlocks show up in a foundational calculus for <em>concurrency</em>—it’d be weird if they didn’t. But that does mean that as programming languages people, we now have two new problems to worry about! To summarise, we’ve identifier <em>four</em> main problems with the untyped π-calculus as a foundation for programming languages:</p>
<ol type="1">
<li>it has programs which loop forever but produce nothing;</li>
<li>it has no way of making sure that data is used as intended;</li>
<li>it has <em>race conditions</em>; and</li>
<li>it has <em>deadlocks</em>.</li>
</ol>
<h2 id="taming-the-π-calculus-with-types">Taming the π-calculus with types…</h2>
<p>Oh dear, so many problems to solve. Where do we begin?</p>
<p>It may help to think a little deeper about the latter three problems. In a sense, we could see a deadlock as the consequence of us not using a channel as intended. After all, we probably intended for one party to be sending while the other was receiving. We could see a race condition in a similar light. We intended for the two pairs of processes to communicate in a <em>predictable</em> pattern, in pairs of two.</p>
<p>These are overly simplistic descriptions—sometimes we truly don’t care about the order of messages, and a bit of a race is fine. However, much like with the λ-calculus, we’re gonna try and cut all the bad stuff out first, no matter what cost, and then get to the business recovering what we lost.</p>
<p>Let’s have a look at <em>session types</em>, invented in the early 1990s by <a href="http://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/pdf/0851-05.pdf">Kohei Honda</a>, and let’s focus first and foremost on one important property—<em>session fidelity</em>. Essentially, it means that we communicate over a channel as intended by its protocol—or <em>session type</em>.</p>
<p>Let’s start with the simplest system, where there’s only two things we can do with a channel—send and receive. That’ll be our language of session types—either we send on a channel, we receive from a channel, or we’re done:</p>
<p><span class="math display">
\begin{array}{l}
\text{Session type}\;{S}\quad
\\
\quad
  \begin{array}{rll}
     ::= &amp; !S.S&#39;        &amp;\text{— send}
  \\\mid &amp; ?S.S&#39;        &amp;\text{— receive}
  \\\mid &amp; \mathbf{end} &amp;\text{— done}
  \end{array}
\\
\end{array}
</span></p>
<p>A crucial notion in session types—as mentioned in the introduction—is <em>duality</em>, the idea that while I’m sending a message, you should be expecting to receive one, and vice versa. Duality is a function on session types. We write duality using an <em>overline</em>, so the dual of <span class="math inline">S</span> is <span class="math inline">\overline{S}</span>:</p>
<p><span class="math display">
\begin{array}{lrl}
\overline{!S.S&#39;}        &amp; = &amp; ?S.\overline{S&#39;}
\\
\overline{?S.S&#39;}        &amp; = &amp; !S.\overline{S&#39;}
\\
\overline{\mathbf{end}} &amp; = &amp; \mathbf{end}
\end{array}
</span></p>
<p>Finally, before we get to the typing rules, we’re gonna make one tiny tweak to the syntax for processes. Before, our ν-binders introduced a <em>channel name</em>, which any process could then use to communicate on. Now, ν-binders introduce a channel by its two <em>channel endpoint names</em>. It’s gonna make the typing rules a <em>bunch</em> easier to write down:</p>
<p><span class="math display">
\begin{array}{l}
\text{Process}\;{P},{Q},{R}
\\
\quad
  \begin{array}{rll}
     ::=    &amp; (\nu xx&#39;){P} &amp;\text{— create new channel }{x}{\leftrightarrow}{x&#39;}
  \\\mid    &amp; \dots
  \end{array}
\end{array}
</span></p>
<p>We’ve also gotta propagate this changes through the structural congruence and the reduction rules. It’s pretty straightforward for most of the changes—just replace <span class="math inline">(\nu x)</span> with <span class="math inline">(\nu x x&#39;)</span>—but there’s one extra change we have to make to the computation rule, which is a bit of a shift in perspective. See, in our first iteration of the π-calculus, processes were connected by virtue of having access to the same <em>channel name</em>, and ν-binders were merely a convenience to let us hide channel names from the outside world. However, in our current version, processes use <em>unrelated</em> endpoint names, and it’s the ν-binder who connects them to form a channel. Or—if you will—each participant is just holding a tin can, and they can’t be used to communicate until they’re bound together with twine. That means that we’ll have to <em>require</em> that reduction takes place under a ν-binder:</p>
<p><span class="math display">
(\nu x x&#39;)(x\langle{y}\rangle.{P}\parallel x&#39;(z).{Q})
\longrightarrow
(\nu x x&#39;)({P}\parallel{Q}\{y/z\})
</span></p>
<p>Okay, typing rules! One thing that’s very different from the λ-calculus is that the typing rules only check whether processes use channels correctly—the processes themselves don’t have types. There are six rules, corresponding to the six process constructs:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \Gamma, x : S, x&#39; : \overline{S} \vdash P \\ \hline \Gamma \vdash (\nu xx&#39;) P \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash P \quad \Delta \vdash Q \\ \hline \Gamma, \Delta \vdash P \parallel Q \end{array}</span> <span class="math inline">\begin{array}{c} \\ \hline \varnothing \vdash 0 \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash P \\ \hline \Gamma, x : \mathbf{end} \vdash P \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma, x : B \vdash P \\ \hline \Gamma, x : {!}A.B, y : A \vdash x\langle{y}\rangle.P \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma, y : A, x : B \vdash P \\ \hline \Gamma, x : {?}A.B \vdash x(y).P \end{array}</span></p>
</div>
<p>In order of appearance:</p>
<ul>
<li>If we’ve got a process <span class="math inline">P</span> which uses two endpoints <span class="math inline">x</span> and <span class="math inline">x&#39;</span> at dual session types, then we can connect them to form a channel, written <span class="math inline">(\nu x x&#39;)P</span>.</li>
<li>If we’ve got two processes <span class="math inline">P</span> and <span class="math inline">Q</span>, which use channels according to the session types in <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span>, then we can put those processes in parallel, written <span class="math inline">P \parallel Q</span>, and the resulting process will use channels according to the session types in <span class="math inline">\Gamma, \Delta</span>, where <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span> <em>must be disjoint</em>.</li>
<li>The terminated process is done—it doesn’t use any channels.</li>
<li>If we’ve got a channel <span class="math inline">x</span> of type <span class="math inline">!A.B</span> and some <span class="math inline">y</span> of type <span class="math inline">A</span>, then we can send <span class="math inline">y</span> over <span class="math inline">x</span>. We lose access to <span class="math inline">y</span>—we’ve sent it away, after all—and the channel <span class="math inline">x</span> continues as a channel of type <span class="math inline">B</span>.</li>
<li>If we’ve got a channel <span class="math inline">x</span> of type <span class="math inline">?A.B</span>, then we can receive something of type <span class="math inline">A</span> over <span class="math inline">x</span>—call it <span class="math inline">y</span>—after which the channel <span class="math inline">x</span> continues as a channel of type <span class="math inline">B</span>.</li>
<li>Finally, if we’ve got a channel which is done, we can forget about it.</li>
</ul>
<p>This type system is <em>linear</em>, much like the linear λ-calculus we saw earlier. Told you it’d be relevant! Anyway, it’s not linear in quite the same way, since channels can be used <em>multiple times</em>. However, each step in the protocol has to be executed <em>exactly once</em>!</p>
<p>So, did it work? Are we safe from the bad programs? Yes and no. Which, <em>uh</em>, kinda just means no? But there’s <em>some</em> bad programs we got rid of! There are no longer programs which misuse data, since everything strictly follows protocols. Since every channel has <em>exactly two</em> processes communicating over it, we no longer have any race conditions. Furthermore, because those two processes must act <em>dually</em> on the channel, we no longer have any deadlocks <em>within a single session</em>—that is to say, as long as each two processes only share <em>one</em> means of communication, we don’t have any deadlocks. Unfortunately, it’s quite easy to write a program which interleaves <em>two</em> sessions and deadlocks:</p>
<p><span class="math display">
\begin{array}{c}
  (\nu x x&#39;)(\nu y y&#39;)%
  \left(
  x(z).y\langle{z}\rangle.0 \parallel y&#39;(w).x&#39;\langle{w}\rangle.0
  \right)
  \not\longrightarrow
\end{array}
</span></p>
<p>We also don’t have looping programs anymore, but, <em>uh</em>, that’s mostly because we removed replication, so… win?</p>
<p>How do we get rid of those last few deadlocks? The ones caused by having multiple open lines of communication with another process? There’s several different ways to do this, and they all have their advantages and disadvantages:</p>
<p>The first option, used in, <em>e.g.</em>, the logic-inspired session type systems by <a href="https://widgets.figshare.com/articles/6606974/embed">Luís Caires and Frank Pfenning</a> and <a href="https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-sessions/propositions-as-sessions-jfp.pdf">Philip Wadler</a>, is to just say “The problem happens when you’ve got multiple open lines of communication with another process? Well, have you considered just not doing that?” Essentially, these type systems require that the <em>communication graph is acyclic</em>—what that means is that, if you drew all the participants, and then drew lines between each two participants who share a channel, you wouldn’t draw any cycles. This works! Can’t share multiple channels if you don’t share multiple channels, am I right? But it’s a <em>wee bit</em> restrictive… Got some homework about <a href="https://en.wikipedia.org/wiki/Dining_philosophers_problem">forks and hungry, hungry philosophers</a> you need to do? Nope. Wanna write a neat cyclic scheduler? Not for you. However, it has some <em>nice</em> aspects too—it composes! Got two deadlock-free programs? Well, you can put ’em together, and it’s gonna be a deadlock-free program! If we updated our typing rules, they’d look a little like this:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \Gamma, x : S \vdash P \quad \Delta, x&#39; : \overline{S} \vdash Q \\ \hline \Gamma \vdash (\nu x x&#39;)(P \parallel Q) \end{array}</span> <span class="math inline">\begin{array}{c} \\ \hline \varnothing \vdash 0 \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash P \\ \hline \Gamma, x : \mathbf{end} \vdash P \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma, x : B \vdash P \\ \hline \Gamma, x : {!}A.B, y : A \vdash x\langle{y}\rangle.P \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma, y : A, x : B \vdash P \\ \hline \Gamma, x : {?}A.B \vdash x(y).P \end{array}</span></p>
</div>
<p>We’ve glued the ν-binder and the parallel composition together in a single operation which makes sure that one endpoint goes one way and the other the other.</p>
<p>The second option, developed by <a href="https://doi.org/10.1016/S0890-5401(02)93171-8">Naoki Kobayashi</a>, is to just do a whole-program check for deadlocks. Take out a piece of paper, and draw a blob for every dual pair of send and receive actions in your program. For every action, if it <em>has to</em> happen before another action, draw an arrow between their blobs. Finally, check to see if there’s any <em>directed</em> cycles—for each blob, see if you can follow the arrows and end up back at the same blob. We can do this <em>formally</em> by adding some little blobs to our session types—since each session type connective corresponds to an action—and requiring a particular order on the little blobs. For reference, little blobs are more commonly known as <em>priorities</em>. If we updated our typing rules, they’d look a little like this… first, we add little blobs to our session types. Duality <em>preserves</em> priorities:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l} \text{Session type}\;{S}\quad \\ \quad  \begin{array}{rll}  ::= &amp; !^oS.S&#39; &amp;\text{— send}  \\\mid &amp; ?^oS.S&#39; &amp;\text{— receive}  \\\mid &amp; \mathbf{end}^o &amp;\text{— done}  \end{array} \\ \end{array}</span> <span class="math inline">\begin{array}{lrl} \overline{!^oS.S&#39;} &amp; = &amp; ?^oS.\overline{S&#39;} \\ \overline{?^oS.S&#39;} &amp; = &amp; !^oS.\overline{S&#39;} \\ \overline{\mathbf{end}^o} &amp; = &amp; \mathbf{end}^o \end{array}</span></p>
</div>
<p>We also define a function, <span class="math inline">\text{Pr}</span>, to nab the topmost priority from a session type. If we apply <span class="math inline">\text{Pr}</span> to a <span class="math inline">\Gamma</span> we mean to get the <em>smallest</em> priority of all types in <span class="math inline">\Gamma</span>—actions with smaller priorities happen earlier, so we essentially wanna know when the <em>first</em> action in <span class="math inline">\Gamma</span> is gonna happen.</p>
<p><span class="math display">
\begin{array}{lrl}
\text{Pr}{(!^oS.S&#39;)}        &amp; = &amp; o
\\
\text{Pr}{(?^oS.S&#39;)}        &amp; = &amp; o
\\
\text{Pr}{(\mathbf{end}^o)} &amp; = &amp; o
\end{array}
</span></p>
<p>Then we change the typing rules:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \Gamma, x : S, x&#39; : \overline{S} \vdash P \\ \hline \Gamma \vdash (\nu xx&#39;) P \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash P \quad \Delta \vdash Q \\ \hline \Gamma, \Delta \vdash P \parallel Q \end{array}</span> <span class="math inline">\begin{array}{c} \\ \hline \varnothing \vdash 0 \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash P \\ \hline \Gamma, x : \mathbf{end} \vdash P \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma, x : B \vdash P \quad o &lt; \text{Pr}{(\Gamma, x : B)} \\ \hline \Gamma, x : {!^o}A.B, y : A \vdash x\langle{y}\rangle.P \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma, y : A, x : B \vdash P \quad o &lt; \text{Pr}{(\Gamma, y : A, x : B)} \\ \hline \Gamma, x : {?^o}A.B \vdash x(y).P \end{array}</span></p>
</div>
<p>We’re enforcing two things here:</p>
<ol type="1">
<li>If we write <span class="math inline">x(y).P</span>, then the action <span class="math inline">x(y)</span> must happen before <em>everything else in</em> <span class="math inline">P</span>. Similarly for <span class="math inline">x\langle{y}\rangle.P</span>.</li>
<li>If we connect two endpoints, <span class="math inline">(\nu x x&#39;)</span>, then the dual actions on those endpoints must each happen <em>at the same time</em>.</li>
</ol>
<p>There’s a really nice recent example of a session type system which uses this technique by <a href="http://www.dcs.gla.ac.uk/~ornela/publications/DG18-Extended.pdf">Ornela Dardha and Simon Gay</a>. The upside of this technique is that you can have all sorts of neat cyclic communication graphs, and still rest assured knowing that they don’t do anything scary. The downside is that it’s a <em>whole-program</em> check, meaning that if you’ve got two deadlock-free programs, and you put ’em together, you have to check again, to see that you didn’t introduce any deadlocks.</p>
<p>Anyway, we’ve now got a <em>mostly</em> safe foundation for session types! You don’t see type systems <em>this</em> simple touted in papers much—or <em>at all</em>, as far as I’m aware. The reason is probably that they’re kinda <em>too simple</em>. Just like with the <em>purely</em> linear λ-calculus, there’s not much you can actually compute with these programs, and you have to put in a little bit of work before you can actually get to a point where you get back enough expressivity to be taken seriously as a programming language. However, I thought it would be illustrative to discuss the <em>simplest possible</em> type systems.</p>
<p>Once we’ve got this foundation, we can get to work extending it! With a little bit of effort we could add branching, replication, recursion, several forms of shared state, polymorphism, higher-order processes, <em>etc.</em> However, figuring out how all this stuff works in the context of the π-calculus seems like a bit of a waste, especially when we already know how they work within the context of the λ-calculus. Plus, doesn’t that “adding higher-order processes” thing sound suspiciously like adding higher-order functions?</p>
<h2 id="concurrent-λ-calculus-λ-and-π-together-forever">Concurrent λ-calculus <em>(λ and π, together forever)</em></h2>
<p>Okay, this will be the <em>final</em> computational model I’m introducing in this by now rather long blog post, I promise! The point of concurrent λ-calculus, in short, is this: the π-calculus is great for modelling concurrency, but it’s a rather, <em>uh</em>, unpleasant language to actually write programs in, and instead of figuring out how to make it a nice language, why not just smash it together with a thing that we already know and love!</p>
<p>So, here’s the plan: we’re gonna start with the λ-calculus as a model of <em>sequential</em> computation, and then we’re gonna add a smattering of π-calculus processes on top as a model of sequential computations running <em>concurrently</em>.</p>
<p>First off, we’re going to take our λ-calculus terms, and extend then with some constants <span class="math inline">K</span>, which will be our concurrency primitives. We’re also going to add <em>units</em> and <em>pairs</em>—we’ll need them in a bit! We write <span class="math inline">()</span> for the unit value and <span class="math inline">\mathbf{let} \; () = M \; \mathbf{in} \; N</span> for pattern matching on units. We write <span class="math inline">(M, N)</span> for the pair of <span class="math inline">M</span> and <span class="math inline">N</span> and <span class="math inline">\mathbf{let} \; (x, y) = M \; \mathbf{in} \; N</span> for pattern matching on pairs.</p>
<p>Second, we’re going to wrap those terms up in π-calculus processes—we’ll have ν-binders and parallel compositions, and threads which run terms. There’s two kinds of threads—<em>main</em> threads, written <span class="math inline">\bullet M</span>, and <em>child</em> threads, written <span class="math inline">\circ M</span>. Why? Well, we expect functional programs to produce a value, but processes just send and receive things, and then stop. Programs in our concurrent λ-calculus are going to have <em>exactly one</em> main thread, which is going to compute a value. Child threads will send and receive, but eventually compute the unit value:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l}  \begin{array}{l}  \text{Term} \; L, M, N  \\  \quad  \begin{array}{rl}  ::= &amp; x \mid \lambda x.M \mid M \; N  \\\mid &amp; ()  \\\mid &amp; \mathbf{let} \; x = M \; \mathbf{in} \; N  \\\mid &amp; K  \end{array}  \end{array} \end{array}</span> <span class="math inline">\begin{array}{l} \text{Process}\;{P},{Q},{R} \\ \quad  \begin{array}{rl}  ::= &amp; (\nu xx&#39;){P}  \\\mid &amp; ({P}\parallel{Q})  \\\mid &amp; \phi M  \end{array} \end{array}</span></p>
<p><span class="math inline">\begin{array}{l} \text{Const} \; K \\ \quad  \begin{array}{rlcl}  ::= &amp; \mathbf{send} &amp; \mid &amp; \mathbf{recv}  \\\mid &amp; \mathbf{new} &amp; \mid &amp; \mathbf{spawn}  \end{array} \end{array}</span> <span class="math inline">\text{Flag} \; \phi ::= \bullet \mid \circ</span></p>
</div>
<p>So what are the semantics of our calculus going to be?</p>
<p>First off, we just keep the reduction rules for our λ-calculus—and we’re just gonna sneak those rules for units and pairs on in there while you’re distracted. We’re gonna call this reduction arrow <span class="math inline">\longrightarrow_M</span>, to distinguish it from the reduction on processes:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} (\lambda x.M)\;N \longrightarrow_M M\{N/x\} \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \mathbf{let} \; () = () \; \mathbf{in} \; N \longrightarrow_M N \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \mathbf{let} \; (x, y) = (L, M) \; \mathbf{in} \; N \longrightarrow_M N\{L/x\}\{M/y\} \end{array}</span></p>
</div>
<p>Let’s not forget our usual “evaluation context” shenanigans:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l} \text{Evaluation Context} \; E \\ \quad  \begin{array}{rl}  ::= &amp; \square  \\\mid &amp; E \; N  \;\mid\; M \; E  \\\mid &amp; \mathbf{let} \; () = E \; \mathbf{in} \; N  \\\mid &amp; (E, N)  \;\mid\; (M, E)  \\\mid &amp; \mathbf{let} \; (x, y) = E \; \mathbf{in} \; N  \end{array} \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} M \longrightarrow_M M^\prime \\ \hline E[ M ] \longrightarrow_M E[ M^\prime ] \end{array}</span></p>
</div>
<p>We’re also going to just copy over the structural congruence from the π-calculus, best as we can—the, <em>uh</em>, terminated process has disappeared, and in it’s place we’ve now got child threads which are done, <em>i.e.</em>, <span class="math inline">\circ()</span>, so it’s a <em>little</em> different, but otherwise, pretty much the same:</p>
<p><span class="math display">
\begin{array}{lrll}
  P \parallel Q
  &amp; \equiv
  &amp; Q \parallel P
  \\
  P \parallel (Q \parallel R)
  &amp; \equiv
  &amp; (P \parallel Q) \parallel R
  \\
  P \parallel \circ()
  &amp; \equiv
  &amp; P
  \\
  (\nu x x&#39;)P
  &amp; \equiv
  &amp; P
  &amp; \text{if}\;{x},{x&#39;}\not\in{P}
  \\
  (\nu x x&#39;)(\nu y y&#39;)P
  &amp; \equiv
  &amp; (\nu y y&#39;)(\nu x x&#39;)P
  \\
  (\nu x x&#39;)(P \parallel Q)
  &amp; \equiv
  &amp; (\nu x x&#39;)P \parallel Q,
  &amp; \text{if}\;{x},{x&#39;}\not\in{Q}
\end{array}
</span></p>
<p>Then we copy over our rules from the π-calculus… but what’s this! We don’t have send and receive in the process language anymore? They’re all awkwardly wedged into the term language now… So terms reduce, and at some point, they get stuck on a <span class="math inline">\mathbf{send}</span> or <span class="math inline">\mathbf{recv}</span> that they don’t know how to deal with, and then the π-calculus rules have to take over. Our first instinct might be to write something like…</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} (\nu x x^\prime)(\phi\;\mathbf{send}\;{M}\;{x} \parallel \phi^\prime\;\mathbf{recv}\;{x^\prime}) \\ \\ \downarrow \\ \\ (\nu x x^\prime)(\phi\;() \parallel \phi^\prime\;{M}) \end{array}</span></p>
</div>
<p>…which sure looks a lot like our π-calculus rule. Unfortunately, it only captures top-level <span class="math inline">\mathbf{send}</span> or <span class="math inline">\mathbf{recv}</span> operations… and usually, we’ll want to bind and actually use the value we receive! Plus, we actually lose access to the channel this way… our intention is that each endpoint can only be used once, and that <span class="math inline">\mathbf{send}</span> and <span class="math inline">\mathbf{recv}</span> return the endpoint for the next step in the session along with any potential result… Now, we <em>could</em> discard the old channel, create a new one, and return it… and in an implementation, this may well be what you do… but here? Why would we? We’ve got a perfectly good channel, with two endpoints we know aren’t going to be used anyway… so why not just return the same channel?</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} (\nu x x^\prime)(\phi\;E[ \mathbf{send}\;{M}\;{x} ] \parallel \phi^\prime\;E^\prime[ \mathbf{recv}\;{x^\prime} ]) \\ \\ \downarrow \\ \\ (\nu x x^\prime)(\phi\;E[ x ] \parallel \phi^\prime\;E^\prime[ (M, x^\prime) ]) \end{array}</span></p>
</div>
<p>This is a great example of why evaluation contexts compose better! Try and write this rule without them! Oh, yeah, almost forgot! We’ve still gotta add evaluation contexts for the process language, plus that thing where we tell reduction that it’s okay to rewrite using our structural congruence, and a new rule where we tell π-calculus reduction that it’s okay for them to use the λ-calculus rules as well:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l} \text{Evaluation Context} \; G \\ \quad  \begin{array}{rl}  ::= &amp; \square  \;\mid\; (\nu{x x&#39;}){G}  \;\mid\; ({G}\parallel{Q})  \;\mid\; ({P}\parallel{G})  \end{array} \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} {P} \longrightarrow {P}^\prime \\ \hline G[ P ] \longrightarrow G[ P^\prime ] \end{array}</span> <span class="math inline">\begin{array}{c}  P \equiv P^\prime \quad P^\prime \longrightarrow Q^\prime \quad Q^\prime \equiv Q  \\ \hline  P \longrightarrow Q \end{array}</span> <span class="math inline">\begin{array}{c}  M \longrightarrow_{M} M^\prime  \\ \hline  \phi\;M \longrightarrow \phi\;M^\prime \end{array}</span></p>
</div>
<p>We’re <em>almost done!</em> You might’ve noticed that we’ve got <span class="math inline">\mathbf{new}</span> and <span class="math inline">\mathbf{spawn}</span> in our term language <em>as well as</em> ν-binders and parallel compositions in our process language. That’s seems kinda redundant, doesn’t it? We’d like to think of the <em>terms</em> as the programs that we actually write, and of the <em>processes</em> as modelling the configuration of threads and shared channels created while <em>running those programs</em>. So the <span class="math inline">\mathbf{new}</span> and <span class="math inline">\mathbf{spawn}</span> functions really just mean “create a ν-binder” and “create a parallel composition” on the process level! So we’ve got to add two more rules:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l}  \phi\;E[ \mathbf{new} ]  \longrightarrow  (\nu x x&#39;)(\phi\;E[ (x, x&#39;) ]) \end{array}</span> <span class="math inline">\begin{array}{l}  \phi\;E[ \mathbf{spawn}\;{M} ]  \longrightarrow  \phi\;E[ () ] \parallel \circ\;{M}\;() \end{array}</span></p>
</div>
<p>Oof, we’ve done it! We’ve got the whole reduction system!</p>
<h2 id="two-victorian-ladies-more-formal-somehow">Two Victorian Ladies <em>(More Formal, Somehow?)</em></h2>
<p>Our formal concurrent λ-calculus is getting pretty close to being able to encode the interaction between <a href="#Ada-and-Briar">Ada and Briar</a>! Remember that, like a billion words ago? There’s two problems left, if we want to encode our example:</p>
<ol type="1">
<li>Ada prints a string, but we don’t really have strings or, <em>uh</em>, the ability to print strings.</li>
<li>Ada and Briar send values of data types back and forth, but we don’t have <em>data types</em>.</li>
</ol>
<p>For the first one, we’re just gonna take <span class="math inline">\mathbf{putStrLn}</span> and strings as primitives in our calculus, with no associated behaviour, and if our programs reduce to, <em>e.g.</em>, <span class="math inline">\mathbf{putStrLn}\;\text{``Hello, Ada!&#39;&#39;}</span> we’ll say that’s fine.</p>
<p>For the second one, <em>well</em>, we can make this work without having to add full-fledged data types to our language. See, the request data type… it essentially encodes the number of <em>pleases</em>, right? It’s kinda like <a href="#peano">Peano numbers</a>, where <code>MayIHaveSomePudding</code> is <span class="math inline">\mathbf{zero}</span> and <code>Please</code> is the successor <span class="math inline">\mathbf{suc}</span>. Remember that from the first section? And the <code>Response</code>? Well, Ada doesn’t actually use the pudding <em>or</em> the reason, so that’s pretty much just a Boolean… and those should be relatively easy to add! First, we extend our terms:</p>
<p><span class="math display">
\begin{array}{l}
\text{Term} \; L, M, N
\\
\quad
  \begin{array}{rl}
  ::= &amp; \dots
  \\\mid &amp;    \mathbf{true}
  \;\mid\;    \mathbf{false}
  \;\mid\;    \mathbf{if}\;L\;\mathbf{then}\;M\;\mathbf{else}\;N
  \end{array}
\end{array}
</span></p>
<p>Then, we extend the reduction rules with two reduction rules for if-statements—one for when it’s true, and one for when it’s false:</p>
<div class="mathpar">
<p><span class="math inline">\mathbf{if}\;\mathbf{true}\;\mathbf{then}\;M\;\mathbf{else}\;N \longrightarrow M</span></p>
<p><span class="math inline">\mathbf{if}\;\mathbf{false}\;\mathbf{then}\;M\;\mathbf{else}\;N \longrightarrow N</span></p>
</div>
<p>And we extend our evaluation contexts:</p>
<p><span class="math display">
\begin{array}{l}
\text{Evaluation Context} \; E
\\
\quad
  \begin{array}{rl}
  ::= &amp; \dots
  \\\mid &amp;    \text{if}\;E\;\text{then}\;M\;\text{else}\;N
  \end{array}
\end{array}
</span></p>
<p>Great! <a name="formal-Ada-and-Briar"></a> Now we can encode our example!</p>
<p><span class="math display">
\begin{array}{l}
\text{ada} \triangleq \lambda a.
\\
\quad
  \begin{array}{l}
  \mathbf{let}\;a^\prime = \mathbf{send}\;(\mathbf{suc}\;\mathbf{zero})\;a\;\mathbf{in}
  \\
  \mathbf{let}\;(x,a^{\prime\prime}) = \mathbf{recv}\;a^\prime\;\mathbf{in}
  \\
  \!\!\!
  \begin{array}{lll}
    \mathbf{if}\;x
       &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
    \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
  \end{array}
  \end{array}
\end{array}
</span></p>
<p><span class="math display">
\begin{array}{l}
\text{briar} \triangleq \lambda b.
\\
\quad
  \begin{array}{l}
  \mathbf{let}\;(x,b^\prime) = \mathbf{recv}\;b\;\mathbf{in}
  \\
  \mathbf{let}\;y = \mathbf{case}\;x\;\mathbf{of}
  \\
  \quad
    \begin{array}{l}
    \{ \; \text{zero} \mapsto \mathbf{false}
    \\
    ;  \; \text{suc}\;{x^\prime} \mapsto \mathbf{case}\;{x^\prime}\;\mathbf{of}
    \\
    \quad
      \begin{array}{l}
      \{ \; \text{zero} \mapsto \mathbf{true}
      \\
      ;  \; \text{suc}\;{x^{\prime\prime}} \mapsto \mathbf{false}
      \\
      \}
      \end{array}
    \\
    \}
    \end{array}
  \\
  \mathbf{let} \; b^{\prime\prime} = \mathbf{send}\;{y}\;{b^\prime} \; \mathbf{in}
  \\
  ()
  \end{array}
\end{array}
</span></p>
<p>And let’s put it all together in a single <span class="math inline">\text{main}</span> process. We’ve not done this so far, since it was <em>hopefully</em> pretty clear how Ada and Briar were meant to share a channel, but if we want to actually evaluate our processes, we’ll have to create a channel to connect Ada and Briar:</p>
<p><span class="math display">
\begin{array}{l}
\text{main} \triangleq
\\
\quad
  \begin{array}{l}
  \mathbf{let} \; (a,b) = \mathbf{new} \; \mathbf{in}
  \\
  \mathbf{let} \; () = \mathbf{spawn} \; (\text{briar} \; b) \; \mathbf{in}
  \\
  \text{ada} \; a
  \end{array}
\end{array}
</span></p>
<p>Right, let’s see if our encoding does what we think it should do! I’m gonna spare no detail, so, <em>uh</em>, very long series of evaluation steps coming up.</p>
<p><span class="math display">
\begin{array}{c}
  \begin{array}{l}
  \mathbf{let} \; (a,b) = \mathbf{new} \; \mathbf{in}
  \\
  \mathbf{let} \; () = \mathbf{spawn} \; (\text{briar} \; b) \; \mathbf{in}
  \\
  \text{ada} \; a
  \end{array}
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \bullet\;
  \begin{array}{l}
  \mathbf{let} \; (a,b) = (a,b) \; \mathbf{in}
  \\
  \mathbf{let} \; () = \mathbf{spawn} \; (\text{briar} \; b) \; \mathbf{in}
  \\
  \text{ada} \; a
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \bullet\;
  \begin{array}{l}
  \mathbf{let} \; () = \mathbf{spawn} \; (\text{briar} \; b) \; \mathbf{in}
  \\
  \text{ada} \; a
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let} \; () = \mathbf{spawn} \; () \; \mathbf{in}
    \\
    \text{ada} \; a
    \end{array}
    \parallel
  \\
  \circ\;
    \begin{array}{l}
    \text{briar} \; b
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \bullet\;
    \text{ada} \; a
    \parallel
  \circ\;
    \text{briar} \; b
  \right)
\end{array}
</span></p>
<p>Whew, so far so good! The <span class="math inline">\mathbf{new}</span> and <span class="math inline">\mathbf{spawn}</span> have done their jobs, and created a channel and a parallel composition! We’re right down to Ada and Briar now! Things are about to get messy! (We’ll sometimes write <span class="math inline">\downarrow_n</span> when we’re doing multiple steps at a time, either because Ada and Briar are computing things in parallel, or because I didn’t feel like writing the whole thing out.)</p>
<p><span class="math display">
\begin{array}{c}
  (\nu c c^\prime)
  \left(
  \bullet\;
    \text{ada} \; c
    \parallel
  \circ\;
    \text{briar} \; c^\prime
  \right)
\\ \\
\downarrow_2
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let}\;a^\prime = \mathbf{send}\;(\mathbf{suc}\;\mathbf{zero})\;a\;\mathbf{in}
    \\
    \mathbf{let}\;(x,a^{\prime\prime}) = \mathbf{recv}\;a^\prime\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
      \mathbf{if}\;x
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    \begin{array}{l}
    \mathbf{let}\;(x,b^\prime) = \mathbf{recv}\;b\;\mathbf{in}
    \\
    \mathbf{let}\;y = \mathbf{case}\;x\;\mathbf{of}
    \\
    \quad
      \begin{array}{l}
      \{ \; \text{zero} \mapsto \mathbf{false}
      \\
      ;  \; \text{suc}\;{x^\prime} \mapsto \mathbf{case}\;{x^\prime}\;\mathbf{of}
      \\
      \quad
        \begin{array}{l}
        \{ \; \text{zero} \mapsto \mathbf{true}
        \\
        ;  \; \text{suc}\;{x^{\prime\prime}} \mapsto \mathbf{false}
        \\
        \}
        \end{array}
      \\
      \}
      \end{array}
    \\
    \mathbf{let} \; b^{\prime\prime} = \mathbf{send}\;{y}\;{b^\prime} \; \mathbf{in}
    \\
    ()
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let}\;a^\prime = a \;\mathbf{in}
    \\
    \mathbf{let}\;(x,a^{\prime\prime}) = \mathbf{recv}\;a^\prime\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
      \mathbf{if}\;x
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    \begin{array}{l}
    \mathbf{let}\;(x,b^\prime) = (\mathbf{suc}\;\mathbf{zero},b)\;\mathbf{in}
    \\
    \mathbf{let}\;y = \mathbf{case}\;x\;\mathbf{of}
    \\
    \quad
      \begin{array}{l}
      \{ \; \text{zero} \mapsto \mathbf{false}
      \\
      ;  \; \text{suc}\;{x^\prime} \mapsto \mathbf{case}\;{x^\prime}\;\mathbf{of}
      \\
      \quad
        \begin{array}{l}
        \{ \; \text{zero} \mapsto \mathbf{true}
        \\
        ;  \; \text{suc}\;{x^{\prime\prime}} \mapsto \mathbf{false}
        \\
        \}
        \end{array}
      \\
      \}
      \end{array}
    \\
    \mathbf{let} \; b^{\prime\prime} = \mathbf{send}\;{y}\;{b^\prime}\;\mathbf{in}
    \\
    ()
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow_2
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let}\;(x,a^{\prime\prime}) = \mathbf{recv}\;a\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
      \mathbf{if}\;x
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    \begin{array}{l}
    \mathbf{let}\;y = \mathbf{case}\;\mathbf{suc}\;\mathbf{zero}\;\mathbf{of}
    \\
    \quad
      \begin{array}{l}
      \{ \; \text{zero} \mapsto \mathbf{false}
      \\
      ;  \; \text{suc}\;{x^\prime} \mapsto \mathbf{case}\;{x^\prime}\;\mathbf{of}
      \\
      \quad
        \begin{array}{l}
        \{ \; \text{zero} \mapsto \mathbf{true}
        \\
        ;  \; \text{suc}\;{x^{\prime\prime}} \mapsto \mathbf{false}
        \\
        \}
        \end{array}
      \\
      \}
      \end{array}
    \\
    \mathbf{let} \; b^{\prime\prime} = \mathbf{send}\;{y}\;b\;\mathbf{in}
    \\
    ()
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow_2
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let}\;(x,a^{\prime\prime}) = \mathbf{recv}\;a\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
      \mathbf{if}\;x
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    \begin{array}{l}
    \mathbf{let}\;y = \mathbf{true}
    \\
    \mathbf{let} \; b^{\prime\prime} = \mathbf{send}\;{y}\;b\;\mathbf{in}
    \\
    ()
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let}\;(x,a^{\prime\prime}) = \mathbf{recv}\;a\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
      \mathbf{if}\;x
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    \begin{array}{l}
    \mathbf{let} \; b^{\prime\prime} = \mathbf{send}\;\mathbf{true}\;b\;\mathbf{in}
    \\
    ()
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{l}
    \mathbf{let}\;(x,a^{\prime\prime}) = (\mathbf{true},a)\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
      \mathbf{if}\;x
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    \begin{array}{l}
    \mathbf{let} \; b^{\prime\prime} = b\;\mathbf{in}
    \\
    ()
    \end{array}
  \end{array}
  \right)
\\ \\
\downarrow_2
\\ \\
  (\nu a b)
  \left(
  \begin{array}{l}
  \bullet\;
    \begin{array}{lll}
      \mathbf{if}\;\mathbf{true}
         &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
      \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``Woe is me!&#39;&#39;}
    \end{array}
    \parallel
  \\ \\
  \circ\;
    ()
  \end{array}
  \right)
\\ \\
\downarrow
\\ \\
  (\nu a b)(\bullet\;\mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;})
\end{array}
</span></p>
<p><em>Yes</em>, we’ve shown that our program is correct! It makes Ada happy! What more could you want?</p>
<h2 id="taming-the-concurrent-λ-calculus-with-types">Taming the concurrent λ-calculus with types…</h2>
<p>Types? Is it types? It <em>should be!</em> Just because our happy example works out, doesn’t mean the calculus as a whole is well-behaved. See, we can still encode <a name="formal-cheeky-Ada"></a> <a href="#cheeky-Ada">cheeky Ada</a>, who’ll do anything for that sweet, sweet pudding:</p>
<p><span class="math display">
\begin{array}{l}
\text{ada} \triangleq \lambda{a}.(Y \; (\text{tryAll}\;a))\;\mathbf{zero}
\\
\quad\mathbf{where}
\\
\qquad
  \begin{array}{l}
  \text{tryAll} \triangleq \lambda{a}.\lambda\text{rec}.\lambda{x}.
  \\
  \quad
    \begin{array}{l}
    \mathbf{let}\;a^\prime = \mathbf{send}\;x\;a\;\mathbf{in}
    \\
    \mathbf{let}\;(y,a^{\prime\prime}) = \mathbf{recv}\;a^\prime\;\mathbf{in}
    \\
    \!\!\!
    \begin{array}{lll}
    \mathbf{if}\;\mathbf{true}
       &amp; \!\!\!\!\mathbf{then}\!\!\!\! &amp; \mathbf{putStrLn}\;\text{``I&#39;m so happy!&#39;&#39;}
    \\ &amp; \!\!\!\!\mathbf{else}\!\!\!\! &amp; \text{rec}\;(\mathbf{suc}\;x)
    \end{array}
    \end{array}
  \end{array} 
\end{array}
</span></p>
<p>I’m not gonna write out the whole evaluation, like I did with the previous example, but you can verify for yourself that evaluation gets stuck after a single back-and-forth, with Briar being done with Ada’s cheek and reducing to <span class="math inline">\circ\;()</span>, while Ada still wants to talk.</p>
<p>We’d like to rule out this sort of failing interaction <em>a priori</em>. Briar was <em>very clear</em> about her boundaries of only taking a <em>single</em> request for cake, so we should’ve never set her up with <em>cheeky</em> Ada. How are we gonna do this? <em>With types!</em></p>
<p>Developing the type system for the concurrent λ-calculus will be a very similar experience to developing its reduction semantics… we’re mostly just smashing stuff from the λ-calculus and the π-calculus together, and seeing what falls out.</p>
<p>To start off with, we’re gonna copy over the whole type system for the linear λ-calculus, adding the rules for units and pairs as needed. Similar to how we write <span class="math inline">A \multimap B</span> in place of <span class="math inline">A \to B</span> for <em>linear</em> functions, we write <span class="math inline">A \otimes B</span> in place of <span class="math inline">A \times B</span> for <em>linear</em> pairs:</p>
<p><span class="math display">
\begin{array}{l}
\text{Type} \; A, B, C
\\
\quad
  \begin{array}{rl}
  ::= &amp; \star
  \;\mid\; A \multimap B
  \;\mid\; \mathbf{1}
  \;\mid\; A \otimes B
  \end{array}
\end{array}
</span></p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \\ \hline x : A \vdash x : A \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma, x : A \vdash M : B \\ \hline \Gamma \vdash \lambda x.M : A \multimap B \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash M : A \multimap B \quad \Delta \vdash N : A \\ \hline \Gamma, \Delta \vdash M \; N : B \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \\ \hline \varnothing \vdash () : \mathbf{1} \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash M : \mathbf{1} \quad \Delta \vdash N : A \\ \hline \Gamma, \Delta \vdash \mathbf{let}\;() = M\;\mathbf{in}\;N : A \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \Gamma \vdash M : A \quad \Delta \vdash N : B \\ \hline \Gamma, \Delta \vdash (M, N) : A \otimes B \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash M : A \otimes B \quad \Delta, x : A, y : B \vdash N : C \\ \hline \Gamma, \Delta \vdash \mathbf{let}\;(x,y) = M\;\mathbf{in}\;N : C \end{array}</span></p>
</div>
<p>First come the rules for variables and functions, which we’ve seen before:</p>
<ul>
<li>A variable <span class="math inline">x</span> has type <span class="math inline">A</span> if the typing environment <em>only</em> contains <span class="math inline">x : A</span>. <em>(If we’d allow other variables to appear, those would be discarded, since the variable <span class="math inline">x</span> doesn’t use them, and hence wouldn’t be linear!)</em></li>
<li>If we’ve got something of type <span class="math inline">B</span> which uses something of type <span class="math inline">A</span> from the typing environment, we can abstract over that something to create a function of type <span class="math inline">A \multimap B</span>.</li>
<li>If we’ve got something of type <span class="math inline">A \multimap B</span> which uses some chunk of the typing environment called <span class="math inline">\Gamma</span>, and something of type <span class="math inline">A</span> which uses the rest of the typing environment called <span class="math inline">\Delta</span>, then we can apply the former to the latter to get something of type <span class="math inline">B</span> which uses both <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span>.</li>
</ul>
<p>Then, the rules for units:</p>
<ul>
<li>We can always construct the unit value, and doing so uses no resources.</li>
<li>If we’ve got something of the unit type <span class="math inline">\mathbf{1}</span> which uses some chunk of the typing environment called <span class="math inline">\Gamma</span>, and something of type <span class="math inline">A</span> which uses the rest of the typing environment called <span class="math inline">\Delta</span>, then we can put them together to get something of type <span class="math inline">A</span> which uses both <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span>.</li>
</ul>
<p>And finally, the rules for pairs:</p>
<ul>
<li>If we’ve got something of type <span class="math inline">A</span> which uses some chunk of the typing environment called <span class="math inline">\Gamma</span>, and something of type <span class="math inline">B</span> which uses the rest of the typing environment <span class="math inline">\Delta</span>, then we can put them together as a pair of type <span class="math inline">A \otimes B</span> which uses both <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span>.</li>
<li>If we’ve got something of type <span class="math inline">A \otimes B</span> which uses some chunk of the typing environment called <span class="math inline">\Gamma</span>, and something of type <span class="math inline">C</span> which uses the rest of the typing environment <span class="math inline">\Delta</span> <em>plus</em> something of type <span class="math inline">A</span> and something of type <span class="math inline">B</span>, we can put them together to get something of type <span class="math inline">C</span> which uses both <span class="math inline">\Gamma</span> and <span class="math inline">\Delta</span>.</li>
</ul>
<p>Great, that settles it for our term language, doesn’t it? Oh, right! We’re gonna have to give types to <span class="math inline">\mathbf{new}</span>, <span class="math inline">\mathbf{spawn}</span>, <span class="math inline">\mathbf{send}</span> and <span class="math inline">\mathbf{recv}</span> as well! And for that, we’ll need session types! We’re gonna import those from the π-calculus, but we’re making one change—instead of only sending and receiving values of <em>session types</em> we’re gonna allow ourselves to send and receive values of <em>any type</em>:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{l} \text{Type} \; A, B, C \\ \quad  \begin{array}{rl}  ::= &amp; \dots  \;\mid\; S  \end{array} \end{array}</span> <span class="math inline">\begin{array}{l} \text{Session type}\;{S}\quad \\ \quad  \begin{array}{rl}  ::= &amp; !A.S  \;\mid\; ?A.S  \;\mid\; \mathbf{end}  \end{array} \\ \end{array}</span></p>
</div>
<p>Remember <em>duality</em> on session types? Yeah, we’re also gonna need that:</p>
<p><span class="math display">
\begin{array}{lrl}
\overline{!A.S}        &amp; = &amp; ?A.\overline{S}
\\
\overline{?A.S}        &amp; = &amp; !A.\overline{S}
\\
\overline{\mathbf{end}} &amp; = &amp; \mathbf{end}
\end{array}
</span></p>
<p>Okay, and we’re finally ready to give types to our concurrency primitives:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \\ \hline \varnothing\vdash\mathbf{new} : {S\otimes\overline{S}} \end{array}</span> <span class="math inline">\begin{array}{c} \\ \hline \varnothing\vdash\mathbf{spawn} : (\mathbf{1}\multimap\mathbf{1})\multimap\mathbf{1} \end{array}</span></p>
<p><span class="math inline">\begin{array}{c} \\ \hline \varnothing\vdash\mathbf{send} : {A\multimap{!A.S}\multimap{S}} \end{array}</span> <span class="math inline">\begin{array}{c} \\ \hline \varnothing\vdash\mathbf{recv} : {{?A.S}\multimap{A\otimes{S}}} \end{array}</span></p>
</div>
<p>In order of appearance:</p>
<ul>
<li><span class="math inline">\mathbf{new}</span> creates a new session-typed channel, and returns a pair of two endpoints with dual types.</li>
<li><span class="math inline">\mathbf{spawn}</span> takes a <em>thunk</em>, a function of type <span class="math inline">\mathbf{1}\multimap\mathbf{1}</span>, and spawns it off as a thread. This has to be a function, since otherwise we’d be able to start evaluating the thunk before it’s spawned off.</li>
<li><span class="math inline">\mathbf{send}</span> takes a value, and an endpoint to a session-typed channel over which such a value can be send, and returns the continuation of the session.</li>
<li><span class="math inline">\mathbf{recv}</span> takes an endpoint to a session-typed channel over which a value can be received, and returns a pair of the received value and the continuation of the session.</li>
</ul>
<p>Right, so that’s terms properly taken care of. What about processes? To the surprise of, I hope, absolutely nobody, we’re pretty much gonna copy over the typing rules from the π-calculus, best we can. There’s one small difference. Remember how we were marking threads as either <em>main</em> or <em>child</em> threads, and only the main thread could return a value? That’s gonna show in our typing rules. First off, we’ll have two ways of embedding terms as processes—either as a main thread or as a child thread—which will show up in the typing judgement:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \Gamma \vdash M : A \\ \hline \Gamma \vdash^\bullet \bullet\;M \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash M : \mathbf{1} \\ \hline \Delta \vdash^\circ \circ\;M \end{array}</span></p>
</div>
<p>The <em>premises</em> here refer back to our term typing rules, but the conclusions uses our process typing rules. In our process typing judgements, we’re marking which kind of thread we’re dealing with on top of the <span class="math inline">\vdash</span>, <em>e.g.</em>, as <span class="math inline">\vdash^\bullet</span> or <span class="math inline">\vdash^\circ</span>. When we compose multiple processes in parallel, we’re going to want to keep track of whether the composition as a whole contains the main thread or not—we’ll do this by combining the markings of the two processes, written <span class="math inline">\phi+\phi^\prime</span>:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{lclcl} \bullet &amp; + &amp; \circ &amp; = &amp; \circ \\ \circ &amp; + &amp; \bullet &amp; = &amp; \circ \\ \circ &amp; + &amp; \circ &amp; = &amp; \circ \end{array}</span></p>
</div>
<p>We’re not listing what <span class="math inline">\bullet+\bullet</span> equals—it’s not allowed! If you try to add two main threads, that’s a big no-no, as it violates our <em>only one main thread</em> restriction! Okay, so we’re now in a place where we can copy over the remaining rules—the ones for ν-binders and parallel composition:</p>
<div class="mathpar">
<p><span class="math inline">\begin{array}{c} \Gamma, x : S, x&#39; : \overline{S} \vdash^\phi P \\ \hline \Gamma \vdash^\phi (\nu xx&#39;) P \end{array}</span> <span class="math inline">\begin{array}{c} \Gamma \vdash^\phi P \quad \Delta \vdash^{\phi^\prime} Q \\ \hline \Gamma, \Delta \vdash^{\phi+\phi^\prime} P \parallel Q \end{array}</span></p>
</div>
<p>Phew, I think that’s it! We’ve got typing rules! Specifically, we’ve now got typing rules which ensure that the session protocol is followed… so we should be able to show that <a href="#formal-Ada-and-Briar">the interaction between Ada and Briar</a> is well-typed. I’ll leave it up to you to verify this, as the proof is quite big and I’m pretty tired of typesetting things by now. And, great news, <a href="#formal-cheeky-Ada">cheeky Ada</a> is <em>not</em> well-typed! There’s two reasons—one is a bit cheeky, but the other one is a bit more satisfactory:</p>
<ol type="1">
<li>We cannot type cheeky Ada because we have no recursion <em>(cheeky)</em>.</li>
<li>We cannot type cheeky Ada because she uses the communication channel repeatedly, which violates linearity <em>(satisfactory)</em>.</li>
</ol>
<p>Unfortunately, this type system for the concurrent λ-calculus has similar problems to the type system we showed for the π-calculus… it’s really very restrictive, and yet it still has deadlocks if you start mixing multiple sessions. Fortunately, the same solutions we gave for the π-calculus can be used here. <a href="https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-sessions/propositions-as-sessions-jfp.pdf">Philip Wadler</a> has an example of the first solution, where you glue together ν-binders and parallel composition, in a calculus he calls <em>Good Variation</em>. <a href="http://dx.doi.org/10.1007/978-3-319-19195-9_1">Luca Padovani and Luca Novara</a> have an example of the second solution, where you do a global check to see if you have any cyclic dependencies.</p>
<h2 id="session-end">Session End</h2>
<p>Whew, that sure was quite a number of words! Let’s look back on what we learned:</p>
<h4 id="the-λ-calculus">The λ-calculus</h4>
<ul>
<li>The untyped λ-calculus is a really neat model of computation, but it’s got some problems, namely programs which do nothing forever, and programs which do silly things like adding numbers to functions.</li>
<li>There’s several approaches to mitigate these problems via type systems, but it’s always a struggle between how many bad programs you rule out versus how many good programs you rule out with them—and how unwieldy your type system gets.</li>
</ul>
<h4 id="the-π-calculus">The π-calculus</h4>
<ul>
<li>The untyped π-calculus is, like the λ-calculus, a really neat model of computation, and it’s even more expressive, in that it can model concurrency. However, this comes with all the problems of concurrency. Suddenly, we find ourselves facing deadlocks and race conditions!</li>
<li>There’s several approaches to mitigate these problems via type systems, but again, it’s always a struggle between how many bad programs you rule out versus how many good programs you rule out with them—and how unwieldy your type system gets.</li>
</ul>
<h4 id="the-concurrent-λ-calculus">The concurrent λ-calculus</h4>
<ul>
<li>We can smash together the λ-calculus and the π-calculus to get the concurrent λ-calculus, with the best of both worlds—it has higher-order functions <em>and</em> can model concurrency—and the worst of both worlds—now you’ve got to reason about higher-order functions <em>and</em> concurrency!</li>
<li>Unsurprisingly, the semantics and type systems for the concurrent λ-calculus look a lot like what you’d get if you smashed the semantics and type systems for the λ-calculus and the π-calculus together, but there’s some tiny tweaks we need to make to get them to behave like we want to.</li>
</ul>
<p>If you made it this far, thanks for reading altogether too many words! If you didn’t—<em>how are you reading this?!</em>—thanks for reading whatever number of words you thought was appropriate.</p>
<hr />
<p><strong>Disclaimer</strong>: I haven’t proven any safety properties for any of the calculi presented here. The simply-typed λ-calculus is pretty well established, so you can trust that’s good, but the other systems are potentially destructive simplifications of existent systems, so all bets are off! I guess you could do the proofs yourself—or if you wanna be really safe, refer to the papers I’ve linked. However, I’ve opted to make these simplifications because the smallest typed π-calculi which are <em>actually</em> expressive tend to be pretty big already</p>]]></description>
    <pubDate>Thu, 17 Dec 2020 00:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2020-12-17-an-introduction-to-session-types.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Neural Networks with Cube Cats</title>
    <link>http://wen.works/posts/2020-09-12-neural-networks-with-cube-cats.html</link>
    <description><![CDATA[<p>Neural Networks. They’re, uh, pretty pervasive by now, so you’ve probably heard of them, telling you which of your friends is in that picture, and that they know what you wanna text better than you do. But what do they know? Do they know things? <em>Let’s find out!</em></p>
<!--more-->
<p>So uh, it’s kinda important that we talk about <em>discrete</em> versus <em>continuous</em> things first, but I checked Wikipedia, and it just told me that <em>discrete</em> things are things that aren’t continuous. So far duh. But that’s not super helpful, so I guess I’ll have a crack at it.</p>
<h2 id="cubes-and-blobs">Cubes and Blobs</h2>
<p><em>Discrete</em> things are neatly separated. You’ve got your cat cube over here, and your dog cube over there, and the two can meet, that’s fine, they’re friends after all, but they’re separate things.</p>
<div class="cube-pets">
<p><img src="/public/images/cube-cat.png" 
     alt="An adorable little cube cat."/> <img src="/public/images/cube-dog.png" 
     alt="A brave little cube dog."/></p>
</div>
<p>Programmers are really good at telling computers how to solve problems that deal with discrete things. “Got three cat cubes, and you wanna have them in a line from big to small? Sure! Computer, just swap the bigger ones to one side ’til it looks right.”</p>
<div class="cube-pets">
<p><img class="smol" 
     src="/public/images/cube-cat.png"
     alt="It's our old friend, adorable little cube cat!"/> <img class="flip"
     src="/public/images/cube-cat.png" 
     alt="Oh no, it's a really big cube cat!"/> <img class="flip huge" 
     src="/public/images/cube-cat.png" 
     alt="The teensy-weensiest cube kitty!"/></p>
</div>
<p><em>Continuous</em> things are all blobby… Imagine your cat cube and your dog cube melting together in an adorable blob of hug. It’s hard to tell where the cat part of the blob ends and the dog part of the blob starts. It’s just <em>one massive blob of catdog</em>.</p>
<div class="cube-pets">
<p><img class="huge" 
     src="/public/images/blob-of-catdog.png" 
     alt="Oh no, our friends melted! It's one big blog of catdog!"/></p>
</div>
<p>When our cube pets melted, we lost something. We lost the <em>distinction</em>, the fact that cat cube and dog cube were two separate things, and we knew what was part of cube cat and what was part of cube dog. There’s bits of it where you’re like “Well, surely <em>this</em> bit is dog!”, but do you know <em>exactly</em> where to draw the line? That’s a very different kind of problem from what we had before!</p>
<h2 id="pictures-of-cats-dogs-and-non-dogs">Pictures of Cats, Dogs, and Non-Dogs</h2>
<p>Let’s look at an example! You’ve got a bunch of pictures, and you wanna know if they’re pictures of cats, dogs, or of literally anything else. It’s one of these vague, blobby problems. If you wanna explain how to answer questions like “Is this a cat?”, you’re gonna have to explain <em>what a cat is</em>, and that’s surprisingly hard! That’s where neural networks come in! If you just show them enough pictures of cats, dogs, and non-dogs, they can <em>learn what a cat is and isn’t!</em></p>
<p>How does that work?</p>
<p>First, what does a neural network even “see” when we show it a picture? Neural networks only “see” numbers. Specifically, they see a list of numbers with a <em>fixed</em> length, depending on how the network was designed. If we want to build a neural network which can look at cat pictures, we’re gonna have to find a way to turn a cat picture into a such list of numbers. There’s <em>many different ways</em> we can do that:</p>
<ul>
<li><p>We could do a little bit of old-fashioned programming, take the pictures, manually tell the computer how to get certain <em>features</em> from them, and then show the neural network that list of features.</p></li>
<li><p>We can make all the pictures the same size, and take the redness, greenness, and blueness of all their pixels. For a picture with 100-by-100 pixels, that gives us 30.000 numbers! Whew, that’s a long list.</p></li>
<li><p>We can put a bunch of neural networks together! They see lists of numbers, but they also give their answers as lists of numbers, so we can take a <em>whole lot</em> of neural networks that can see <em>tiny squares</em>, and stack them together in a whole big pyramid, each layer looking at the outputs of the layer below it, until the base of the pyramid is big enough to look at the whole picture in one go!<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p></li>
</ul>
<p>Let’s go with that first one, with the features, not ’cuz it’s the best, but ’cuz it is the easiest to understand. For instance, we <em>know</em> that all cube cats are purple, and all cube dogs are pink…</p>
<div class="cube-pets">
<p><img src="/public/images/cube-cat.png" 
     alt="It's cube cat again, but now we realise she's purple."/> <img src="/public/images/cube-dog.png" 
     alt="Oh damn, cube dog is pink!"/></p>
</div>
<p>So, uh, if something is a picture of a cube cat, it’s probably gonna be mostly purple, right? And if something’s a picture of a cube dog, it’s probably gonna be mostly pink. We know how to do that! You just take the <em>average</em> redness, greenness, and blueness of all pixels in the picture! That’s just <em>three numbers!</em></p>
<p>Three numbers. Hmm. That means you can think of every picture treated this way as a point in space. The space of <em>all pictures</em>, pictures of cats, dogs, and non-dogs! The neural network’s job is to draw a shape in that space, such that it captures all the pictures of cats, and none of the pictures of dogs, or non-dogs. That shape then captures what it truly means to be a cube cat! <em>The quintessential shape of catness!</em></p>
<h2 id="drawing-shapes-of-cats">Drawing Shapes of Cats</h2>
<p>Reality is a mess! In theory, we can just let the neural network settle on a nice shape for “cat”, and voilà, we’ve solved the problem… Unfortunately, in reality, there’s a ton of problems…</p>
<h4 id="making-lists-of-numbers">Making Lists of Numbers</h4>
<p>We can’t just reduce our inputs down to <em>three</em> numbers without losing a lot of information. Actually, purple and pink have pretty similar greenness and blueness, so really, we’ve reduced our inputs down to just <em>one</em> relevant value… the amount of red! That means that our network thinks anything with low redness is a cube cat, and anything with high redness is a cube dog! What’s that? This picture of a cube bear’s cube cub? It’s a cat!</p>
<div class="cube-pets">
<p><img src="/public/images/cube-cub.png" 
     alt="It's a teal cube cub, but like, the shade of teal was picked specifically to have the same redness as cube cat's shade of purple."/></p>
</div>
<p>So, uh, clearly our neural network didn’t learn the <em>essence of a what it means to be a cat</em>. It just learned some simple way of telling cube cats and cube dogs apart, that happened to work for both cube pets we showed it. If we want it to learn something more general, we’re gonna have to use some way of turning pictures into lists of numbers which doesn’t lose as much of the information… which probably means we’re gonna need much more than just three numbers. That’s fine, though, that just means we’re drawing shapes in higher-dimensional spaces, with more than three dimensions, but the math for shapes and spaces still works… Let’s pretend we’re still talking about three dimensional space, though, ’cuz it’s so much easier to imagine.</p>
<h4 id="pebbles-and-balloons">Pebbles and Balloons</h4>
<p>We’re gonna have to make sure to show our neural network <em>many</em> pictures of cats, dogs, <em>and non-dogs</em>! When the neural network is looking for the right shape in the space of cats, dogs, and non-dogs, it doesn’t get to see the entire space. All it gets to see is the points that we show it, by showing it sample pictures, and telling it whether that sample is a cat, a dog, or a non-dog. The whole “look for a shape” thing only works if the points we’ve got are a good representation of the quintessential shape of catness… If there even is such a thing…</p>
<p>Imagine our <em>shape</em> like a balloon… just, your average, round balloon. Inside of it are a bunch of unmovable pebbles, just floating there. Those are our cat pictures. If we deflate the balloon, it’s gonna get smaller – <em>so far, so duh</em> – but the cat pebbles won’t budge, so it’s gonna get stretched out over the cat pebbles. Outside of the balloon are a different bunch of unmovable pebbles: our dog pictures. If we inflate the balloon, it’s gonna get bigger, and get stuck on our dog pebbles. So, our collection of pebbles is gonna determine what <em>shapes</em> our balloon can take, and the more pebbles we have, the closer those shapes are gonna be to the quintessential shape of catness!</p>
<p>If we’ve got a <em>whole bunch</em> of pebbles, then there’s only gonna be a tiny bit of wiggle room for us to inflate or deflate the balloon, and whatever we do, it’s gonna be pretty much cat shaped… but if we have very few pebbles, then we’re just gonna get a round balloon, with so much space to move it around in, and so many bad options!<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<h4 id="what-even-is-a-cat">What even is a cat?</h4>
<p>The question “Is this a cat?” is inherently kinda vague. It’s impossible to give a definition that includes all things that are cats and excludes all things that are not cats. It’s more of an “I know one when I see one” kinda deal. However, if you showed humans a bunch of pictures of cats, dogs, and non-dogs, their answers probably agree in the vast majority of cases, but there’s always gonna be edge cases that humans disagree on… Is a cube cat a non-dog? <em>(No.)</em> Is a cube tiger a cube cat? <em>(Prolly.)</em> Is a cube wolf a cube dog? <em>(Prolly not.)</em> What if it’s a real good boy? <em>(Okay, fine.)</em> That means we’re only ever aiming for “most humans agree with this neural network, most of the time, and there aren’t and big surprises.” The thing you’d really rather not have, is where humans are like “this is a picture of a cat, one hundred percent sure, we all agree” and then the neural network is like “dog, for sure.”</p>
<p>Anyway, we’ve gone a long time without a picture of a cube pet, so to see you off, all our little cubey friends! Join us next time, when we talk about Hans, the cleverest little cube horse!</p>
<div class="cube-pets">
<p><img src="/public/images/cube-cat.png" 
     alt="Bye, cube cat!"/> <img class="flip"
     src="/public/images/cube-dog.png" 
     alt="Bye, cube dog!"/> <img src="/public/images/cube-cub.png" 
     alt="Bye, cube cub!"/></p>
</div>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>That’s called a <em>convolutional neural network</em>, and it’s used a lot in computer vision.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>I really cannot draw well enough for this… if someone wants to do this is Blender, please…<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Sat, 12 Sep 2020 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2020-09-12-neural-networks-with-cube-cats.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Paper Girls, Substitution Ciphers, and Frequency Analysis</title>
    <link>http://wen.works/posts/2018-12-09-paper-girls-substitution-ciphers-and-frequency-analysis.html</link>
    <description><![CDATA[<p><span class="font-papergirls"> WARNING! IF YOU’RE READING THIS, YOU’RE DOING IT WRONG. CLICK THE LINK, READ IT ON MY BLOG. IT’LL BE WAY LESs CONFUSING. ANYWAY. THIS WEeKEND, I PICKED UP A COPY OF PAPER GIRLS, A MYSTERY/SCIENCE FICTION COMIC ABOUT FOUR GIRLS ON A PAPER ROUTE. WAIT, YOU CAN’T UNDERSTAND ME? OH, FUCK, DOESN’T LOoK LIKE IT. SORrY, LET ME ADJUST. </span></p>
<!--more-->
<p>Ah, I’m so sorry, is this any better? Once again, so sorry, I think I’ve been reading this stuff for too long, think I got carried away… Anyway, I’ll take it from the start. So this weekend, I picked up a copy of <em><a href="https://imagecomics.com/comics/releases/paper-girls-1">Paper Girls</a></em>, a mystery/science fiction comic about four girls on a paper route…</p>
<p><img src="/public/images/paper-girls-1.jpg" alt="Image from Paper Girls. MacKenzie, smoking, sits on her bicycle, while Erin, KJ, and Tiffany stand behind her." /><br />
</p>
<p>It starts simple. Our four heroes band together to deliver papers on Halloween morning. But it quickly escalates. Testament to this fact, thirty-five pages in we meet three time traveling teenagers, wrapped in black bandages, speaking in <em>these things</em>…</p>
<p><img src="/public/images/paper-girls-2.png" alt="Image from Paper Girls. Two figures wrapped in dark bandages bend over their fallen friend. Their speech is written using strange glyphs." /><br />
</p>
<p>These glyphs are used for the rest of the book, and—best I can tell—the rest of the series without any real explanation… which leaves me with the following question:</p>
<blockquote>
<p>What in fuck’s name are they saying?</p>
</blockquote>
<p>Wanna guess what today’s topic is? Yep. Welcome to my class, “Help! These letters are all funky! (Part 1, Substitution Ciphers)”.</p>
<p>Now, I’ve done this before. Several years ago, I was given a copy of <em><a href="https://www.goodreads.com/book/show/11161195-johnny-23">Johnny 23</a></em> by Charles Burns which is, euh, a book put together using panels from <em><a href="https://www.goodreads.com/book/show/7814774-x-ed-out">X’ed Out</a></em>, with an entirely new “story” written in strange glyphs… Sound, well, semi-familiar at least?</p>
<p><img src="/public/images/xed-out.jpg" alt="Image from X’ed Out. A person is shown a crying worm by a hooded figure with a wound for a nose. The hooded figure then eats the worm. Their speech is written using strange glyphs." /><br />
</p>
<p>It turns out that what Charles had done was basically a substitution cipher—you make up one crazy glyph for each letter of the alphabet, and then instead of writing letters from the alphabet, you use the alien glyphs you came up with…</p>
<p>Honestly, there’s some pretty good reasons to assume that <em>Paper Girls</em> does the same. Substitution ciphers are really easy to come up with—you basically have to come up with one weird glyph for ever letter in your alphabet. Plus, they get the job done! At least, it’s pretty clear to me that our time traveling teenagers are speaking some arcane language!</p>
<p>Substitution ciphers are pretty easy to solve, but compare that more complex ciphers. We could have the cipher evolve over time, say, shift those sinister glyphs by one every time we turn a page. But… do the characters know what page they’re on? And could you speak a language where the sounds you make to say, say <em>chair</em>, change every few minutes?</p>
<p>What about actual cryptographic ciphers? We might as well be putting random noise on the page! There’s no way any reader would crack anything like that, and no way any human could actually speak, say, <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">RSA-encrypted</a> English.</p>
<p>Ideally, you would construct an entirely new language. Constructed languages have a long and rich history, stretching from the 17th century search for the <a href="https://en.wikipedia.org/wiki/Solresol">Perfect Language</a> to the modern desire to make our <a href="https://en.wikipedia.org/wiki/Klingon_language">Bad Space Russians</a> and <a href="https://en.wikipedia.org/wiki/Valyrian_languages">Magic Romans</a> more compelling. However, constructing a languages takes a <em>serious</em> amount of time and effort, and heaps of linguistics knowledge, so you’ll probably only find this kind of stuff in <em>huge</em> and well-funded projects—or in the works of a guy who really just writes fantasy to justify <a href="https://en.wikipedia.org/wiki/Quenya">his conlanging hobby</a>.</p>
<p>All in all, ciphers aren’t the best way to emulate a new and unfamiliar language, but they are the cheapest… <em>“But how do I crack this stuff?!”</em>, you cry out in frustration. Right, good point. Let’s get back to today’s lecture!</p>
<h1 id="how-do-you-crack-this-stuff">How do you crack this stuff?</h1>
<p>First off, I’ll be writing some Python code in this section. Really, I’m just doing that ’cuz I’m bad at counting. You can do everything I’ll be doing by hand, with just some pen and paper.</p>
<p>The first thing you need to do is get some data. Grab your favourite comic with a cipher in there, and start writing down words. I’ll be using the first five issues of <em>Paper Girls</em> for this, because that’s how far I’ve read.</p>
<pre><code class="highlight"><span class="n">data</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>
    <span class="s font-papergirls">"GODdAMNIT.",</span>
    <span class="s font-papergirls">"SPLIT UP. WE'Ll MEeT AT THE SECOND FOLDING.",</span>
    <span class="s font-papergirls">"STAY AWAY FROM ME!",</span>
    <span class="s font-papergirls">"STOP!",</span>
    <span class="s font-papergirls">"PLEASE!",</span>
    <span class="s font-papergirls">"YOURE GOING TO GET YOURSELVES KILlED!",</span>
    <span class="s font-papergirls">"YOU PEOPLE ARE OUT OF YOUR",</span>
    <span class="s font-papergirls">"NO",</span>
    <span class="s">…</span>
<span class="p">])</span></code></pre>
<p>And then?</p>
<h3 id="frequency-analysis">Frequency analysis</h3>
<p>Let’s do a wee bit of counting, shall we? First off, we’re gonna blindly assume that spaces mean spaces, apostrophe means apostrophe—I’ve only found one in the entire series so far—and comma means comma. That means we’re not really interested in any of those, so let’s replace them with the empty string. Then, we tally up the number of times each letter occurs, and list them, sorted by frequenceny in descending order.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>letters <span class="op">=</span> re.sub(<span class="vs">r&quot;[\s&#39;,]&quot;</span>,<span class="st">&quot;&quot;</span>,data)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>letters_counts <span class="op">=</span> collections.Counter(letters)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>letters_counts <span class="op">=</span> <span class="bu">sorted</span>(letters_counts.items(), key<span class="op">=</span><span class="kw">lambda</span> x: x[<span class="dv">1</span>], reverse<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<pre><code class="highlight"><span class="p">[(</span><span class="s font-papergirls">'E'</span><span class="p">,</span> <span class="mi">64</span><span class="p">),(</span><span class="s font-papergirls">'T'</span><span class="p">,</span> <span class="mi">50</span><span class="p">),(</span><span class="s font-papergirls">'O'</span><span class="p">,</span> <span class="mi">39</span><span class="p">),(</span><span class="s font-papergirls">'A'</span><span class="p">,</span> <span class="mi">35</span><span class="p">),(</span><span class="s font-papergirls">'I'</span><span class="p">,</span> <span class="mi">33</span><span class="p">),(</span><span class="s font-papergirls">'.'</span><span class="p">,</span> <span class="mi">30</span><span class="p">),(</span><span class="s font-papergirls">'S'</span><span class="p">,</span> <span class="mi">29</span><span class="p">),(</span><span class="s font-papergirls">'L'</span><span class="p">,</span> <span class="mi">29</span><span class="p">),(</span><span class="s font-papergirls">'H'</span><span class="p">,</span> <span class="mi">27</span><span class="p">),(</span><span class="s font-papergirls">'N'</span><span class="p">,</span> <span class="mi">23</span><span class="p">),(</span><span class="s font-papergirls">'R'</span><span class="p">,</span> <span class="mi">22</span><span class="p">),(</span><span class="s font-papergirls">'Y'</span><span class="p">,</span> <span class="mi">20</span><span class="p">),(</span><span class="s font-papergirls">'D'</span><span class="p">,</span> <span class="mi">19</span><span class="p">),(</span><span class="s font-papergirls">'U'</span><span class="p">,</span> <span class="mi">18</span><span class="p">),(</span><span class="s font-papergirls">'G'</span><span class="p">,</span> <span class="mi">14</span><span class="p">),(</span><span class="s font-papergirls">'W'</span><span class="p">,</span> <span class="mi">13</span><span class="p">),(</span><span class="s font-papergirls">'C'</span><span class="p">,</span> <span class="mi">11</span><span class="p">),(</span><span class="s font-papergirls">'M'</span><span class="p">,</span> <span class="mi">10</span><span class="p">),(</span><span class="s font-papergirls">'B'</span><span class="p">,</span> <span class="mi">10</span><span class="p">),(</span><span class="s font-papergirls">'P'</span><span class="p">,</span> <span class="mi">9</span><span class="p">),(</span><span class="s font-papergirls">'V'</span><span class="p">,</span> <span class="mi">8</span><span class="p">),(</span><span class="s font-papergirls">'F'</span><span class="p">,</span> <span class="mi">6</span><span class="p">),(</span><span class="s font-papergirls">'!'</span><span class="p">,</span> <span class="mi">6</span><span class="p">),(</span><span class="s font-papergirls">'K'</span><span class="p">,</span> <span class="mi">6</span><span class="p">),(</span><span class="s font-papergirls">'o'</span><span class="p">,</span> <span class="mi">4</span><span class="p">),(</span><span class="s font-papergirls">'e'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),(</span><span class="s font-papergirls">'J'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),(</span><span class="s font-papergirls">'?'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),(</span><span class="s font-papergirls">'X'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),(</span><span class="s font-papergirls">'d'</span><span class="p">,</span> <span class="mi">1</span><span class="p">),(</span><span class="s font-papergirls">'s'</span><span class="p">,</span> <span class="mi">1</span><span class="p">),(</span><span class="s font-papergirls">'Q'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span></code></pre>
<p>So if we wanna stick to our guess that this is really just English, but written with silly squiggles, then it’s looking pretty likely that ‘<span class="font-papergirls">E</span>’ is the letter ‘e’, since off the top of my head that’s the most commonly used letter in English. But what’s the rest? I always forget, though I know that the rest of the vowels and the ‘n’ are pretty high up there. We could Google, but, like, why would we? Let’s just grab some English text and count!</p>
<p>(Note: I strongly recommend not doing the next part by hand.)</p>
<p>Cool. Let’s pick some random English text, say <em><a href="https://en.wikipedia.org/wiki/Emma_(novel)">Emma</a></em> by Jane Austen—why not?—and do the exact same thing. We remove spaces, apostrophes, and commas, and while we’re at it, let’s convert the text to lowercase—our eldritch glyphs don’t really <em>look</em> like they have a case distinction.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>letters_emma <span class="op">=</span> <span class="st">&quot; &quot;</span>.join(nltk.corpus.gutenberg.words(<span class="st">&#39;austen-emma.txt&#39;</span>))</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>letters_emma <span class="op">=</span> re.sub(<span class="st">&quot;[\s&#39;,]&quot;</span>,<span class="st">&quot;&quot;</span>,emma).lower()</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>letters_counts_emma <span class="op">=</span> collections.Counter(letters_emma)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>letters_counts_emma <span class="op">=</span> </span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">sorted</span>(letters_counts_emma.items(), key<span class="op">=</span><span class="kw">lambda</span> x: x[<span class="dv">1</span>], reverse<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>[(<span class="st">&#39;e&#39;</span>, <span class="dv">86021</span>), (<span class="st">&#39;t&#39;</span>, <span class="dv">59201</span>), (<span class="st">&#39;a&#39;</span>, <span class="dv">54379</span>), (<span class="st">&#39;o&#39;</span>, <span class="dv">53199</span>), (<span class="st">&#39;n&#39;</span>, <span class="dv">47288</span>), … ]</span></code></pre></div>
<p>Let’s plot those side by side, see if anything looks off about this.</p>
<p><img src="/public/images/paper-girls-frequency-analysis.png" alt="Frequency analysis graphs for single characters in the speech in Paper Girls compared to the speech in Jane Austen’s Emma. The graphs look similar." /><br />
</p>
<p>Great news! The distribution of the letters looks like <em>language</em>. For comparison, if we encrypt <em>Emma</em> and then do frequency analysis, it looks something like this:</p>
<p><img src="/public/images/paper-girls-frequency-analysis-encrypted.png" alt="Frequency analysis graphs for single characters in the speech in Jane Austen’s Emma encrypted compared to the speech in Jane Austen’s Emma unencrypted. The frequency counts for the encrypted speech are virtually uniform." /><br />
</p>
<p>Ok, so hypothesis:</p>
<blockquote>
<p>The frequencies for <em>Paper Girls</em> overlap <em>exactly</em> with those of <em>Emma</em>.</p>
</blockquote>
<p>Let’s test it. First, we build a translation table, and then we apply it to our data.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>trans <span class="op">=</span> {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    l1: l2 <span class="cf">for</span> (l1, c1), (l2, c2) <span class="kw">in</span> <span class="bu">zip</span>(letters_counts, letters_counts_emma)}</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>data_transed <span class="op">=</span> [</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;&#39;</span>.join(trans.get(c,c) <span class="cf">for</span> c <span class="kw">in</span> line) <span class="cf">for</span> line <span class="kw">in</span> data.splitlines()]</span></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>[</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;yauqogdnti&#39;</span>,</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;hpsnt wpi ce&#39;ss ge;t ot tre hefadu vasundyi&quot;</span>,</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;htom ocom vlag ge-&#39;</span>,</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;htap-&#39;</span>,</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;pseohe-&#39;</span>,</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;mawle yandy ta yet mawlhes.eh knsseu-&#39;</span>,</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;maw peapse ole awt av mawl&#39;</span>,</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;da&#39;</span>,</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    …</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>]</span></code></pre></div>
<p>Ok, so, maybe we’re not so lucky? Eugh, why do these things always have to be hard.</p>
<p>Well, our data is pretty sparse, so it makes sense that these wouldn’t line up precisely, even if our teenagers <em>were</em> speaking English… And I’m not particularily keen on going in and transcribing more, so I guess we’ll just have to do more thinking.</p>
<p>Let’s just assume that we got one or two characters right. Those first peaks look pretty convincing, so let’s assume ‘<span class="font-papergirls">E</span>’ is ‘e’ and ‘<span class="font-papergirls">T</span>’ is ‘t’. What else can we do?</p>
<h3 id="common-words">Common words</h3>
<p>We can have a look at the single-letter words! Let’s pretend we don’t know English. What are common single-letter words, according to <em>Emma</em>?</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>single_letter_words_counts <span class="op">=</span> collections.Counter(</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    word <span class="cf">for</span> word <span class="kw">in</span> emma.split() <span class="cf">if</span> <span class="bu">len</span>(word) <span class="op">==</span> <span class="dv">1</span> <span class="kw">and</span> word.isalpha())</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>single_letter_words_counts <span class="op">=</span> <span class="bu">sorted</span>(</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    single_letter_words_counts.items(), key<span class="op">=</span><span class="kw">lambda</span> x: x[<span class="dv">1</span>], reverse<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>[(<span class="st">&#39;I&#39;</span>, <span class="dv">3178</span>), (<span class="st">&#39;a&#39;</span>, <span class="dv">3004</span>), (<span class="st">&#39;s&#39;</span>, <span class="dv">933</span>), (<span class="st">&#39;A&#39;</span>, <span class="dv">125</span>), (<span class="st">&#39;t&#39;</span>, <span class="dv">19</span>), (<span class="st">&#39;d&#39;</span>, <span class="dv">12</span>),</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a> (<span class="st">&#39;E&#39;</span>, <span class="dv">11</span>),   (<span class="st">&#39;o&#39;</span>, <span class="dv">8</span>),    (<span class="st">&#39;F&#39;</span>, <span class="dv">4</span>),   (<span class="st">&#39;W&#39;</span>, <span class="dv">4</span>),   (<span class="st">&#39;V&#39;</span>, <span class="dv">3</span>),  … ]</span></code></pre></div>
<p>Ah, yes, the well-known word ‘W’. But at least we can be fairly sure that the only single-letter words which matter in English are ‘I’ and ‘a’, and we didn’t even have to think! Let’s see what single-letter words our data has on offer…</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>single_letter_words <span class="op">=</span> <span class="bu">set</span>(word <span class="cf">for</span> word <span class="kw">in</span> data.split() <span class="cf">if</span> <span class="bu">len</span>(word) <span class="op">==</span> <span class="dv">1</span>)</span></code></pre></div>
<pre><code class="highlight"><span class="p">[</span><span class="s font-papergirls">'I'</span><span class="p">]</span></code></pre>
<p>Well, that’s disappointing, now we have to pick. At least we’re fairly sure now that ‘<span class="s font-papergirls">I</span>’ will turn out to be either ‘i’ or ‘a’.</p>
<p>We can repeat this trick for two letter words, three letter words, four letter words, etc. However, we’ll probably need quite a lot of data for word counts to start looking like your average word counts for English—like those found in <em>Emma</em> and only <em>Emma</em>. Let’s count up the two-letter words, and plot their frequencies:</p>
<p><img src="/public/images/paper-girls-frequency-analysis-two-letter.png" alt="Frequency analysis graphs for two-letter words in the speech in Paper Girls compared to the speech in Jane Austen’s Emma. The graphs look similar." /><br />
</p>
<p>It’s tempting to assume that those plots align exactly, but we’re dealing with <em>really</em> sparse data at this point. Instead, let’s use the knowledge that we’ve uncovered so far to see if we can find any of those common words. The words ‘<span class="font-papergirls">TO</span>’, ‘<span class="font-papergirls">IT</span>’, and ‘<span class="font-papergirls">AT</span>’ all feature a ‘<span class="font-papergirls">T</span>’. They seem like pretty likely candidates for ‘to’, ‘it’, and ‘at’, so it seems quite likely that ‘<span class="font-papergirls">O</span>’ is ‘o’, and that ‘<span class="font-papergirls">I</span>’ is ‘i’ and ‘<span class="font-papergirls">A</span>’ is ‘a’, or vice versa. Note that ‘<span class="font-papergirls">A</span>’ is the fourth most character, like we’d expect from an ‘i’ or an ‘a’. Based on the frequencies—‘a’ is a more common character than ‘i’, but ‘I’ is a more common word than ‘a’—we can guess that ‘<span class="font-papergirls">I</span>’ is ‘i’ and ‘<span class="font-papergirls">a</span>’ is ‘a’.</p>
<p>We could continue with this trick for quite a while, using three-letter words, four-letter words, bi-grams, tri-grams, etc. However, we could quite quickly run into the problem that the data we have is really quite sparse, and we can only really solve that by reading more <em>Paper Girls</em> and adding more phrases to our database… which… well, the first part of that sounds like fun. However, there is one trick which we can still quite easily exploit…</p>
<h3 id="double-letters">Double letters</h3>
<p>Let’s do some counting of <em>repeated letters</em>, such as the ‘tt’ in letters, and see how those patterns compare to those found in English. We do this by zipping the data with the data offset by one–e.g. from <code>"hello"</code> we would get <code>[('h','e'), ('e','l'), ('l','l'), ('l','o')]</code>—and then picking only the pairs where both letters are the same—in our example, <code>('l','l')</code>.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>doubles <span class="op">=</span> [ l1 <span class="op">+</span> l2 <span class="cf">for</span> l1, l2 <span class="kw">in</span> <span class="bu">zip</span>(data,data[<span class="dv">1</span>:]) <span class="cf">if</span> l1 <span class="op">==</span> l2 ]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>doubles_counts <span class="op">=</span> collections.Counter(doubles)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>doubles_counts <span class="op">=</span> <span class="bu">sorted</span>(doubles_counts.items(), key<span class="op">=</span><span class="kw">lambda</span> x: x[<span class="dv">1</span>], reverse<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<p>You’ve got the hang of this by now—we count doubles in <em>Emma</em> as well, and plot both distributions.</p>
<p><img src="/public/images/paper-girls-frequency-analysis-doubles-1.png" alt="Frequency analysis graphs for bigrams in the speech in Paper Girls compared to the speech in Jane Austen’s Emma. The graph for paper girls has only two entries." /><br />
</p>
<p>Whoa, so something kinda weird is going on here. First off, really? There’s only <em>two</em> characters that are ever repeated? Like, our sample size is small, but not <em>that</em> small. Also, neither of these characters are anything we have a guess for yet… so if our guesses are correct, we don’t have <em>any</em> occurances of ‘ee’ or ‘tt’. Look at the chart for <em>Emma</em>, they’re pretty common.</p>
<p>It may be a good idea to have a closer look at the data. If you scroll up to where we defined <code>data</code>, you’ll find ‘<span class="font-papergirls">Dd</span>’ and ‘<span class="font-papergirls">Ee</span>’, and actually, if we look at all the data, we’ll find ‘<span class="font-papergirls">Oo</span>’ and ‘<span class="font-papergirls">Ss</span>’ as well. These mirrored versions of the characters only seem to appear directly after a neutral versions of the same character, and they look <em>suspiciously</em> like repeated characters. Actually, we should’ve asked this <em>a long time ago</em>. How many characters do we even have?</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>num_characters <span class="op">=</span> <span class="bu">len</span>(letters_counts)</span></code></pre></div>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dv">32</span></span></code></pre></div>
<p><em>WHAT?!</em> 32 CHARACTERS?! Right, that doesn’t mash with our whole “Latin alphabet” thing. Eugh, let’s finish this “double characters” thing first, and then we’ll look into our surplus of characters.</p>
<p>Let’s count up the double characters <em>and</em> the characters followed by their mirrored image, and plot those against the double characters in <em>Emma</em>.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>doubles_or_mirrored <span class="op">=</span> [</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    l1 <span class="op">+</span> l2 <span class="cf">for</span> l1, l2 <span class="kw">in</span> <span class="bu">zip</span>(data,data[<span class="dv">1</span>:]) <span class="cf">if</span> l1 <span class="op">==</span> l2 <span class="kw">or</span> l1 <span class="op">==</span> l2.mirrored() ]</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>doubles_or_mirrored_counts <span class="op">=</span> collections.Counter(doubles_or_mirrored)</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>doubles_or_mirrored_counts <span class="op">=</span> <span class="bu">sorted</span>(</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    doubles_or_mirrored_counts.items(), key<span class="op">=</span><span class="kw">lambda</span> x: x[<span class="dv">1</span>], reverse<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<p><img src="/public/images/paper-girls-frequency-analysis-doubles-2.png" alt="Frequency analysis graphs for bigrams in the speech in Paper Girls compared to the speech in Jane Austen’s Emma. The graphs look similar." /><br />
</p>
<p>Ah, that makes <em>way</em> more sense. We can still probably assume that ‘<span class="font-papergirls">LL</span>’ is ‘ll’, and it probably makes sense to stick to our guns and say that ‘<span class="font-papergirls">Oo</span>’ is ‘oo’ and ‘<span class="font-papergirls">Ee</span>’ is ‘ee’.</p>
<h3 id="too-many-characters">Too many characters</h3>
<p>Eek! So let’s get to that whole “too many characters thing”. See, if our hypothesis is true, and this is really English, then we’d kinda expect to see at most 26 characters. Realistically, we’d expect more like 20 to 23 characters. For instance, if we check the frequency analysis for letters a while back, we see that ‘v’, ‘k’, ‘x’, ‘j’, ‘q’, and ‘z’ are rarer in English than the full stop.</p>
<p>So what do we do with our bonus characters? Well, if we go with the idea that doubles are mirrored, then that at least takes care of four characters: ‘<span class="font-papergirls">o</span>’, ‘<span class="font-papergirls">e</span>’, ‘<span class="font-papergirls">d</span>’, and ‘<span class="font-papergirls">s</span>’. That takes us down to only 28 characters.</p>
<p>So… four down, at least two to go? The most common non-letter is the full stop, but it’d be a bit weird if the full stop were included in the alphabet, given that the comma and the apostrophe were just written as usual. However, if we look at the data, we find three characters—<span class="font-papergirls">.</span>, <span class="font-papergirls">!</span>, and <span class="font-papergirls">?</span>—which <em>exclusively</em> appear at the end of words, and <em>almost exclusively</em> at the end of the entire speech bubble. Moreover, almost every speech bubble ends with one of these characters, the only exceptions being chapter titles and <em>two</em> other utterances. We can assume that these are ‘.’, ‘!’, and ‘?’, in order of frequency. Honestly, it doesn’t hurt too much if we get these wrong, the only important thing is that—if these truly are punctuation—we don’t try to assign letters to them.</p>
<h3 id="write-down-everything-weve-got">Write down everything we’ve got!</h3>
<p>Right, so, we’ve made quite a few guesses by now, let’s see if that gets us anywhere. First, let’s write down everything we’ve got…</p>
<pre><code class="highlight"><span class="n">trans</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">" "</span><span class="p">:</span> <span class="s">" "</span><span class="p">,</span> <span class="s">"'"</span><span class="p">:</span> <span class="s">"'"</span><span class="p">,</span> <span class="s">","</span><span class="p">:</span> <span class="s">","</span><span class="p">,</span> 
    <span class="s font-papergirls">'A'</span><span class="p">:</span> <span class="s">'a'</span><span class="p">,</span> <span class="s font-papergirls">'E'</span><span class="p">:</span> <span class="s">'e'</span><span class="p">,</span> <span class="s font-papergirls">'e'</span><span class="p">:</span> <span class="s">'e'</span><span class="p">,</span> <span class="s font-papergirls">'T'</span><span class="p">:</span> <span class="s">'t'</span><span class="p">,</span> <span class="s font-papergirls">'I'</span><span class="p">:</span> <span class="s">'i'</span><span class="p">,</span> <span class="s font-papergirls">'o'</span><span class="p">:</span> <span class="s">'o'</span><span class="p">,</span> <span class="s font-papergirls">'O'</span><span class="p">:</span> <span class="s">'o'</span><span class="p">,</span> <span class="s font-papergirls">'L'</span><span class="p">:</span> <span class="s">'l'</span><span class="p">,</span> <span class="s font-papergirls">'.'</span><span class="p">:</span> <span class="s">'.'</span><span class="p">,</span> <span class="s font-papergirls">'!'</span><span class="p">:</span> <span class="s">'!'</span><span class="p">,</span> <span class="s font-papergirls">'?'</span><span class="p">:</span> <span class="s">'?'</span><span class="p">}</span></code></pre>
<p>…and then use that to try and translate our data, replacing anything for which we haven’t made a guess yet with an underscore.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>data_transed <span class="op">=</span> [</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;&#39;</span>.join(trans.get(c,<span class="st">&#39;_&#39;</span>) <span class="cf">for</span> c <span class="kw">in</span> line) <span class="cf">for</span> line <span class="kw">in</span> data.splitlines()]</span></code></pre></div>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>[<span class="st">&#39;_o__a__it.&#39;</span>,</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a> <span class="st">&quot;__lit __. _e&#39;ll _eet at t_e _e_o__ _ol_i__.&quot;</span>,</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_ta_ a_a_ __o_ _e!&#39;</span>,</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_to_!&#39;</span>,</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_lea_e!&#39;</span>,</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o__e _oi__ to _et _o___el_e_ _ille_!&#39;</span>,</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o_ _eo_le a_e o_t o_ _o__&#39;</span>,</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o&#39;</span>,</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a> …]</span></code></pre></div>
<p>From here, it’s a bit of a word puzzle. For instance, "_e’ll _eet at t_e" looks like it’s saying “we’ll meet at the”. Let’s add those guesses, and translate again, see if they make sense?</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>[<span class="st">&#39;_o__am_it.&#39;</span>,</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a> <span class="st">&quot;__lit __. we&#39;ll meet at the _e_o__ _ol_i__.&quot;</span>,</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_ta_ awa_ __om me!&#39;</span>,</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_to_!&#39;</span>,</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_lea_e!&#39;</span>,</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o__e _oi__ to _et _o___el_e_ _ille_!&#39;</span>,</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o_ _eo_le a_e o_t o_ _o__&#39;</span>,</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o&#39;</span>,</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a> …]</span></code></pre></div>
<p>Does "awa_ __om me" say “away from me”? Let’s see if that makes sense!</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>[<span class="st">&#39;_o__am_it.&#39;</span>,</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a> <span class="st">&quot;__lit __. we&#39;ll meet at the _e_o__ fol_i__.&quot;</span>,</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_tay away from me!&#39;</span>,</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_to_!&#39;</span>,</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_lea_e!&#39;</span>,</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;yo_re _oi__ to _et yo_r_el_e_ _ille_!&#39;</span>,</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;yo_ _eo_le are o_t of yo_r&#39;</span>,</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o&#39;</span>,</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a> …]</span></code></pre></div>
<p>Right, <em>stay</em>, as in “stay away from me!” If we’d kept the source text in mind, we would’ve probably seen that. Though I often find it easier to stare only at the underscored text, to not be distracted by these otherworldly glyphs.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>[<span class="st">&#39;_o__am_it.&#39;</span>,</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a> <span class="st">&quot;s_lit __. we&#39;ll meet at the se_o__ fol_i__.&quot;</span>,</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;stay away from me!&#39;</span>,</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;sto_!&#39;</span>,</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_lease!&#39;</span>,</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;yo_re _oi__ to _et yo_rsel_es _ille_!&#39;</span>,</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;yo_ _eo_le are o_t of yo_r&#39;</span>,</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a> <span class="st">&#39;_o&#39;</span>,</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a> …]</span></code></pre></div>
<p>Things are starting to get pretty clear. “Stop!”, “Please!”, “youre going to get yourselves killed!”, “you people are out of your”… We can keep doing this, and eventually we’ll manage to find guesses for most of the letters. The authors have even included an ‘x’ and a ‘q’ in such natural words such as ‘vertex’ and ‘tuplequad’. Honestly, that last one took me a while. The ‘ua’ and the fact that it was either gonna be a ‘q’ or a ‘z’ helped.</p>
<h3 id="and-then-you-make-a-nice-table">…and then you make a nice table</h3>
<p>Woo! We’ve done it! We can read the bizzare glyphs in <em>Paper Girls</em> now! And the only letter we’re missing is the ‘z’. Hope I’ll find one of those in one of the later books.</p>
<table style="font-size:xx-large;">
<tbody>
<tr>
<td>
<span class="font-papergirls">A</span>
</td>
<td>
<span class="font-papergirls">B</span>
</td>
<td>
<span class="font-papergirls">C</span>
</td>
<td>
<span class="font-papergirls">D</span>
</td>
<td>
<span class="font-papergirls">E</span>
</td>
<td>
<span class="font-papergirls">F</span>
</td>
<td>
<span class="font-papergirls">G</span>
</td>
<td>
<span class="font-papergirls">H</span>
</td>
<td>
<span class="font-papergirls">I</span>
</td>
<td>
<span class="font-papergirls">J</span>
</td>
</tr>
<tr>
<td>
a
</td>
<td>
b
</td>
<td>
c
</td>
<td>
d
</td>
<td>
e
</td>
<td>
f
</td>
<td>
g
</td>
<td>
h
</td>
<td>
i
</td>
<td>
j
</td>
</tr>
<tr>
<td>
<span class="font-papergirls">K</span>
</td>
<td>
<span class="font-papergirls">L</span>
</td>
<td>
<span class="font-papergirls">M</span>
</td>
<td>
<span class="font-papergirls">N</span>
</td>
<td>
<span class="font-papergirls">O</span>
</td>
<td>
<span class="font-papergirls">P</span>
</td>
<td>
<span class="font-papergirls">Q</span>
</td>
<td>
<span class="font-papergirls">R</span>
</td>
<td>
<span class="font-papergirls">S</span>
</td>
<td>
<span class="font-papergirls">T</span>
</td>
</tr>
<tr>
<td>
k
</td>
<td>
l
</td>
<td>
m
</td>
<td>
n
</td>
<td>
o
</td>
<td>
p
</td>
<td>
q
</td>
<td>
r
</td>
<td>
s
</td>
<td>
t
</td>
</tr>
<tr>
<td>
<span class="font-papergirls">U</span>
</td>
<td>
<span class="font-papergirls">V</span>
</td>
<td>
<span class="font-papergirls">W</span>
</td>
<td>
<span class="font-papergirls">X</span>
</td>
<td>
<span class="font-papergirls">Y</span>
</td>
<td>
<span class="font-papergirls">_</span>
</td>
<td>
<span class="font-papergirls"> </span>
</td>
<td>
<span class="font-papergirls">.</span>
</td>
<td>
<span class="font-papergirls">!</span>
</td>
<td>
<span class="font-papergirls">?</span>
</td>
</tr>
<tr>
<td>
u
</td>
<td>
v
</td>
<td>
w
</td>
<td>
x
</td>
<td>
y
</td>
<td>
z
</td>
<td>
</td>
<td>
.
</td>
<td>
!
</td>
<td>
?
</td>
</tr>
</tbody>
</table>
<p>Wrapping up, what have we learned? I guess the important things are that you can pretty easily crack any substitution cipher by boldly making some assumptions about what the language is, and then exploiting letter frequencies from that language… and that you can exploit way more than just <em>plain</em> letter freqencies—short words, n-grams, repeated characters, they’re all good candidates for frequency analysis.</p>
<p>Also… <em>Paper Girls</em> is fucking rad, go read that shit.</p>]]></description>
    <pubDate>Sun, 09 Dec 2018 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2018-12-09-paper-girls-substitution-ciphers-and-frequency-analysis.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>VISL CG-3 is the new assembler</title>
    <link>http://wen.works/posts/2017-05-15-visl-cg-3-is-the-new-assembler.html</link>
    <description><![CDATA[<p>This post is a continuation of <em><a href="/posts/2016-03-16-constraint-grammar-can-count.html">Constraint Grammar can count!</a></em>, in which I talked a bunch about how expressive constraint grammar is. Now, for most of that post, what I actually meant was the fragment of constraint grammar where you only use the <code>REMOVE</code> rule. However, I always had the suspicion that I’d be pretty easy to simulate a Turing machine using only the <code>ADDCOHORT</code> and <code>REMCOHORT</code> commands, treating the list of cohorts as the Turing machine’s tape—and I don’t think I was the only one to feel that way.</p>
<!--more-->
<p>Now, this would be wonderful news. It would prove that <code>ADDCOHORT</code> and <code>REMCOHORT</code> are Turing-complete—given that VISL CG-3 itself is a pretty decent proof that we can run constraint grammars on a universal computer. Not only that, but VISL CG-3 is an extremely optimized piece of software—so the fact that we could compile <em>any Turing machine</em> to VISL CG-3 would be great news for the HPC community<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>With all this in mind, I decided to finally work out the details of this compiler I had had tumbling around in my brain for the past months. Turns out, it’s kinda nice.</p>
<p>For this post, we’ll encode the first Turing machine program I could find, using a quick search, as a constraint grammar, using only <code>ADDCOHORT</code> and <code>REMCOHORT</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> I’ll try to explain the general principle as we go. But first, I should probably briefly go over how a Turing machine works—though I hope you’ll forgive me if I’ll be a little informal. <em>Heads-up</em>: If you don’t want to read through a whole bunch about Turing machines, it’s probably best to skip right to <a href="#visl-cg-3-turing-machines">the meat</a>.</p>
<h1 id="so-whats-this-turing-machine-business">So what’s this Turing machine business?</h1>
<p>A Turing machine is a tiny machine, which sits whirring away on top of an infinite roll of tape. It has a head, which hoovers over the tape, and reads and writes whatever cell it happens to hoover over. It also has a state. This is basically saying that it can remember what it was doing, but practically speaking this’ll be some number. The number of the thing it was supposed to be doing. It was never supposed to be built, but of course someone did:</p>
<p><img src="/public/images/model-of-a-turing-machine.jpg" alt="An actual Turing machine." /><br />
</p>
<p>Actually, many people have built one. Out of everything from <a href="https://web.archive.org/web/20150924052601/https://www.newscientist.com/blogs/nstv/2011/03/turing-machine-built-from-wood-and-scrap-metal.html">wood and scrap metal</a>, to <a href="http://web.archive.org/web/20170513045644/http://www.legoturingmachine.org/lego-turing-machine/">Legos</a>, to <a href="http://dx.doi.org/10.1063/1.4793648">artificial muscle</a>.</p>
<p>Anyway. What makes every Turing machine special is that each has it’s own unique table, which contains its own unique program. At every step, the Turing machine will use its head to read the cell it’s hoovering over, and then sorta feel its state, and it will consult the great big (or sometimes small) table of its program. The table will then tell it what to do. What it should write over the thing it just read, what its next state should be, and whether it should whirr the tape to the left or to the right. It’ll do this until the table says it should enter its stop state. Then it stops. Some Turing machines have faulty tables, which never let it reach a stopping state.</p>
<p>Now, it just so happens that the first search result for “Turing machine example program” on the day I wrote this post was a machine which increments binary numbers, and its table looked like this:</p>
<p><a href="https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/turing-machine/four.html"><img src="/public/images/bit-succ-tm.png" alt="Transition function for a Turing machine which computes the binary successor." /></a></p>
<p>These programs are a little hard to read, so let’s go over what the Turing machine will be doing at each of these states.</p>
<p><strong>State 0</strong> The machine expects its input—that number we’re going to increment—to already be written on the tape. However, it doesn’t trust us to place its head directly at the beginning of said number. So, state 0 is there so that wherever in the number we put its head, it will move right to the start. Then it continues in state 1.</p>
<p><strong>State 1</strong> All the real work is done in state 1. In state 1, the Turing machine is in the business of progressivly moving its head to the right. It will overwrite any <code>1</code> it meets with a <code>0</code>. But if it <em>ever</em> reads a <code>0</code> or a blank, it will write a <code>1</code> and continue in state 2.</p>
<p><strong>State 2</strong> A brief check with your binary arithmetic will tell you we’ve already incremented the number in the previous state. So what is state 2 there for? It does the same thing as state 0. For reasons of cleanliness, and being a good bot, it moves its head back to the beginning of the number. And when it has done that, it stops.</p>
<p>Below is the trace for the machine incrementing the number 11 to 12, or <code>1011</code> to <code>1100</code> in binary. I’ve put a 🤖, to show you where the machine is looking:</p>
<pre><code>_	_ 🤖	1	1	0	1 # 0: Read 1, Write 1, Move ←
_ 🤖	_	1	1	0	1 # 0: Read _, Write _, Move →
_	_ 🤖	1	1	0	1 # 1: Read 1, Write 0, Move →
_	_	0 🤖	1	0	1 # 1: Read 1, Write 0, Move →
_	_	0	0 🤖	0	1 # 1: Read 0, Write 1, Move ←
_	_	0 🤖	0	1	1 # 2: Read 0, Write 0, Move ←
_	_ 🤖	0	0	1	1 # 2: Read 0, Write 0, Move ←
_ 🤖	_	0	0	1	1 # 2: Read _, Write _, Move →
_	_ 🤖	0	0	1	1 # Stop</code></pre>
<p>Great! So now we’ve got that out of the way, let’s have a look at implementing this machine in VISL CG-3, because why not?</p>
<h1 id="visl-cg-3-turing-machines">VISL CG-3 Turing Machines</h1>
<p>We’re going to represent the Turing machine’s tape as a list of cohorts. This means that when we pass in the number 11, we pass VISL CG-3 the following text:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;0&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span></span></code></pre></div>
<p>We will take a cue from the nice infix notation we used above, and write the current state to the tape, right before the cell which the head is currently on. For instance, the third row in the execution trace above would be written as:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;0&quot;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State1&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;0&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span></span></code></pre></div>
<p>To start off, our constraint grammar will add a cohort for the start state. It’ll add it right before the first cell of our input. This kind-of makes the whole of state 0 superfluous, but we’ll keep it anyway, for good form:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State0&quot;</span>) BEFORE (<span class="st">&quot;&lt;Cell&gt;&quot;</span>) IF (<span class="op">-</span><span class="dv">1</span> (<span class="op">&gt;&gt;&gt;</span>))<span class="op">;</span></span></code></pre></div>
<p>Now the meat. We will encode the program of our Turing machine. This is a recursive specification, we we’ll need to wrap it in a <code>SECTION</code>. First, we mark the current state cohort and the cell we’re reading as old:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>ADD (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;OLD&quot;</span>) (<span class="st">&quot;&lt;State&gt;&quot;</span>)<span class="op">;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>ADD (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;OLD&quot;</span>) (<span class="st">&quot;&lt;Cell&gt;&quot;</span>) IF (<span class="op">-</span><span class="dv">1</span> (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;OLD&quot;</span>))<span class="op">;</span></span></code></pre></div>
<p>I realise that these are <code>ADD</code> commands, and I promised to only use <code>ADDCOHORT</code> and <code>REMCOHORT</code>, but hear me out. We can simulate this usage of <code>ADD</code> by adding a cohort <code>"&lt;Old&gt;"</code> <em>after</em> the cohort we’re marking. However, every time we now select a cohort using e.g. <code>("&lt;Cell&gt;" "OLD")</code>, we’d have to change this to <code>(0 ("&lt;Cell&gt;") LINK 1 ("&lt;Old&gt;"))</code>… and we’d have to take into account the expected number of <code>"&lt;Old&gt;"</code> cohorts, and move every selection by that. Anyway, it wouldn’t be pretty. So please allow me this one thing. Ok?</p>
<p>Back to our scheduled program. Once we’ve marked our old state cohort and the cell we’re reading as old, we can introduce new ones. We will compile every single entry in the Turing machine’s program to <em>two</em> rules. One which introduces the next state, and one which writes a new cell to replace the old one. For instance, the rule which says that “if we are in state 1, and we read a 1, then we write a 0, move the tape to the right, and continue in state 1,” is compiled to the following two rules:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State1&quot;</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>   BEFORE (<span class="st">&quot;&lt;Cell&gt;&quot;</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>       IF (<span class="op">-</span><span class="dv">2</span> (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State1&quot;</span> <span class="st">&quot;OLD&quot;</span>) LINK</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>            <span class="dv">1</span> (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span> <span class="st">&quot;OLD&quot;</span>))<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;0&quot;</span>)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    AFTER (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span> <span class="st">&quot;OLD&quot;</span>)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>       IF (<span class="op">-</span><span class="dv">1</span> (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State1&quot;</span> <span class="st">&quot;OLD&quot;</span>))<span class="op">;</span></span></code></pre></div>
<p>And the rule which says that “if we are in state 1, and we read a blank, then we write a 1, move the tape to the left, and change to state 2” is compiled to the following two rules:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State2&quot;</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>   BEFORE (<span class="st">&quot;&lt;Cell&gt;&quot;</span>)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>       IF (<span class="dv">1</span> (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State1&quot;</span> <span class="st">&quot;OLD&quot;</span>) LINK</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>           <span class="dv">1</span> (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;_&quot;</span> <span class="st">&quot;OLD&quot;</span>))<span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;1&quot;</span>)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    AFTER (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;_&quot;</span> <span class="st">&quot;OLD&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>       IF (<span class="op">-</span><span class="dv">1</span> (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;State1&quot;</span> <span class="st">&quot;OLD&quot;</span>))<span class="op">;</span></span></code></pre></div>
<p>In both pairs, the first rule inserts the next state in the appropriate place, and the second rule inserts the newly written cell after the one marked as old.</p>
<p>After all these rules—of which at most one pair will match, because we check for both the state and the cell marked as old—we clean up, simply removing every cohort marked as old:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>REMCOHORT (<span class="st">&quot;&lt;State&gt;&quot;</span> <span class="st">&quot;OLD&quot;</span>)<span class="op">;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>REMCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;OLD&quot;</span>)<span class="op">;</span></span></code></pre></div>
<p>This cycle of marking as old, applying the transitions, and removing the old cohorts will repeat until there are no further changes. Since there are no transitions which match on a stop state, the repetitions will stop here, and the stop state will be marked as old and removed.</p>
<p>Finally, because moving the head back to the start of the number is rather pointless in this implementation, we have a final cleanup step. We remove any leading or trailing blank cells:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>AFTER<span class="op">-</span>SECTIONS</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>REMCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;_&quot;</span>) IF (NOT <span class="op">-</span><span class="dv">1</span><span class="op">*</span> SYMB)<span class="op">;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>REMCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;_&quot;</span>) IF (NOT  <span class="dv">1</span><span class="op">*</span> SYMB)<span class="op">;</span></span></code></pre></div>
<p>Hooray! We’ve implemented a Turing machine! Or have we? There’s one tiny issue with the above implementation. Our little Turing machine sits whirring on top of an <em>infinite</em> amount of tape. Here, our implementation only ever writes to cells which were already filled in the input. This means we’ve actually been implementing a linear bounded automaton all this time—i.e. we’ve proven that <code>ADDCOHORT</code> and <code>REMCOHORT</code> cover at least the context-sensitive languages! But really, we’d like to be able to simulate Turing machines, so…</p>
<p>There is a simple way to extend this framework to Turing machines. We add two rules, <em>right</em> at the start of the <code>SECTION</code>, which simply add more blank cells to the edges of the tape whenever the head gets too close:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;_&quot;</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>   BEFORE (<span class="st">&quot;&lt;State&gt;&quot;</span>)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>       IF (<span class="op">-</span><span class="dv">1</span> (<span class="op">&gt;&gt;&gt;</span>))<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>ADDCOHORT (<span class="st">&quot;&lt;Cell&gt;&quot;</span> <span class="st">&quot;_&quot;</span>)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    AFTER (<span class="st">&quot;&lt;Cell&gt;&quot;</span>)</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>       IF (<span class="dv">0</span> (<span class="op">&lt;&lt;&lt;</span>) LINK <span class="op">-</span><span class="dv">1</span> (<span class="st">&quot;&lt;State&gt;&quot;</span>))<span class="op">;</span></span></code></pre></div>
<p>The first of these rules adds a blank cell at the beginning if the state cohort is the <em>first</em> cohort. The second adds a blank cell at the end if the state cohort is the second-to-last cohort—because, remember, we are reading the cell right after the cohort.</p>
<p>Now if you’re thinking “VISL CG-3 is known for being fast; I can’t wait to compile all my code to it!” then I have to tell you—way ahead of you. I’ve implemented this TM to CG compile as a small Haskell library, in addition to a small Turing machine interpreter, so you can really see just <em>how</em> much time you’re saving. I’ve also implemented my example machine, the binary successor function, and wrote a set of QuickCheck functions which compare:</p>
<ul>
<li>Haskell’s <code>(+1)</code>;</li>
<li>the interpreted binary successor machine; and</li>
<li>the compiled binary successor in VISL CG-3.</li>
</ul>
<p>Turns out, everthing works!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> If you want to have a go—maybe implement that sorting algorithm so you can <em>really</em> do a speed comparison—the library is available <a href="https://github.com/wenkokke/cgtm">on my Github</a>, and you can get VISL CG-3 <a href="http://beta.visl.sdu.dk/cg3/chunked/installation.html">on the internet</a>.</p>
<hr />
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>No, it wouldn’t.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Well, those and the <code>ADD</code> command—we can theoretically encode our use of <code>ADD</code> with <code>ADDCOHORT</code>, but it really doesn’t get any prettier if we do so.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>For the binary successor machine.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Mon, 15 May 2017 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2017-05-15-visl-cg-3-is-the-new-assembler.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Presidents, Scumbags, Kings and Arseholes, and The Great Dalmuti</title>
    <link>http://wen.works/posts/2016-04-05-presidents-scumbags-kings-and-arseholes-and-the-great-dalmuti.html</link>
    <description><![CDATA[<p>One of my favourite card games is <a href="https://boardgamegeek.com/boardgame/929/great-dalmuti">The Great Dalmuti</a>. It’s a variant of a widely-played card game with many, many names: President, Scumbag, Kings and Arseholes. Each of these may have <em>slightly</em> different rules, and <em>slightly</em> different decks, but they are all more or less the same game.</p>
<p>I’ve had a bunch of discussions about this game over the years, most of which were about the possible strategies. Personally, I don’t believe that this game is all that hard to play well—and consequently, that it isn’t all that hard to write an AI for it. Pehaps even a very simple, rule-based AI can play passably. However, friends of mine think that it is a much harder problem, and that much more advanced techniques will be needed. Therefore, I thought I’d write a little playground for AIs to play in.</p>
<!--more-->
<p>I’ll get back to that later in this post, though if you’re familiar with the game, you may as well <a href="#an-ai-playground">skip the next section</a>.</p>
<h2 id="the-rules">The Rules</h2>
<p>Before I get to showcasing my playground, it’s probably prudent to at least briefly talk about the game. The rules of the game are fairly simple, so I’ll summarise them here:</p>
<ul>
<li><strong>Rank</strong>: Each player has a rank, with the top ranks usually called something like “president” and “vice president”, and the lower ranks called something like “scumbag” and, well, “vice scumbag”;</li>
<li><strong>Setup</strong>: To start the game, <em>all the cards</em> in the deck are distributed evenly amongst the players; the highest ranking player then starts the first round;</li>
<li><strong>Rounds</strong>: Starting with the player who starts that round (obviously) each player either plays some cards or passes, and the turn passing to the next in rank (after the lowest rank, the turn passes to the highest in rank);</li>
<li><strong>Legal Plays</strong>: A play is legal if:
<ul>
<li>it is the first play, and the cards are all identical in number; or</li>
<li>there are previous plays, the new play has the same number of cards as the previous plays, and all of the cards in the play are the identical in number and strictly “better” than those of the previous play.</li>
</ul></li>
<li><strong>Winning the Round</strong>: Once there is an entire round of passes, the player who was the last to play cards wins the round, and starts the next one;</li>
<li><strong>Winning the Game</strong>: The goal is for players to get rid of all of their cards as fast as possible. The order in which they do so, determines their ranks in the next game, with the first player to finish becoming the highest in rank, the second the second highest, and so on.</li>
</ul>
<p>Each variant of the game adds their own rules to this, but this much is shared by more or less all of them. Note that I haven’t said anything about what cards there are in the deck—this is because every variant is played with a different deck, and with different rules as to which card is “better” than which other. I’ve played many variants of this game, but there’s just something pleasing about the deck The Great Dalmuti uses—one one, two twos, three threes, up to twelve twelves—plus, I own a copy of it, so why not use it as an example? Anyway, The Great Dalmuti adds the following rules:</p>
<ul>
<li><strong>Deck</strong>: It uses the deck outlined above (with one one, two twos, three threes, up to twelve twelves). Confusingly, the lower cards are “better”, so a <code>1</code> is better than a <code>5</code>, which in turn is better than a <code>12</code>;</li>
<li><strong>Jokers</strong>: There are two jokers, which are counted as a <code>13</code> when played by themselves. However, they can be used to complete any set. For instance, <code>[3,13,13]</code> is a legal set of three threes;</li>
<li><strong>Taxation</strong>: Before the game starts, there is a “taxation”. During taxation, The lowest ranking player gives their two <em>best</em> cards to the highest ranking player, and gets any two cards in return. The second lowest and second highest player exchange a <em>single card</em> in a similar manner;</li>
<li><strong>Revolution</strong>: Before the taxation, there is a check. If any player has <em>both</em> jokers in their hand, they may cry “Revolution!” If this happens, the taxation phase is skipped; if the lowest ranking player cries “Revolution!”, instead of skipping the taxation, there is an actual revolution—the lowest ranking player changes places with the highest ranking player, and the second lowest ranking player changes places with the second highest ranking player.</li>
</ul>
<h2 id="an-ai-playground">An AI Playground</h2>
<p>As I mentioned above, I feel that a very simple, rule-based AI could already competently play The Great Dalmuti. As a first step in demonstrating this, I’ve written a small playground where AIs can compete with one another. Below, you should see a number of tabs, the first of which is labelled ‘Console’. In it, there should be a button that looks like this: <span class="runmain">▶</span>. If you click it, the AIs in the other tabs will be pitted against one another in a game of The Great Dalmuti. Try it!</p>
<p><img src="/public/images/dalmuti-example.png" alt="Screenshot of UI of embedded The Great Dalmuti after an example run." /><br />
</p>
<p>In implementing the game, I’ve made one small concession—while it isn’t <em>technically</em> forbidden by the original rules, most players would probably say that a pass isn’t a legal opening move. Why would you? However, in order to keep faulty AIs from breaking up the flow of the game, I’ve implemented it such that <em>it is</em>. This means that, in the game above, if your AI attempts an illegal move, or throws an error, it is taken as a pass instead. Furthermore, if your AI attempts to abuse the taxation system by giving away too many or too few cards, it is instead penalised by giving <em>the best cards.</em></p>
<p>The default AIs—for now—are a little disappointing. There are some functions built into my implementation. Most interestingy, <code>playWorstCards</code> and <code>giveWorstCards</code> both pick whatever your worst possible cards are, and dump them. They’re not incredibly intelligent in doing so, but they’re the best thing that comes with the playground. These functions form Abby and Ezra’s AIs, so amongst the default implementations, they’re the only ones who really have a shot.</p>
<p>Much worse are <code>playBestCards</code> and <code>giveBestCards</code>, which make up Neil’s AI, eager as he is to show how great his cards are, even if it means giving them to other players. And then finally, there’s Ruth. She’s just very nice, and wants to give other players a chance, so she’s been written to pass every turn, even if she’s starting a round. And when it comes to giving away cards, she just gives away the cards that she would be happiest receiving. So, you know, obviously there’s some room for improvement in the department. At least, if competitive play is your goal.</p>
<h2 id="write-your-own-ai">Write your own AI</h2>
<p>I’d love to make it easy for you, and tell you that you can write your AI in <em>any</em> language you want, but the matter of the fact is that you’re reading this on what is basically a huge JavaScript interpreter. So AIs are written in JavaScript.</p>
<p>If you have a look at the code of, for instance, Ezra, you will see that what you need to define is an object with two functions: <code>play</code> and <code>give</code>. The play function is given your player name (just for your convenience) and an object representing the current game state. A <code>game</code> object usually looks something like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>game <span class="op">=</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    { <span class="dt">active</span>   <span class="op">:</span> [<span class="st">&#39;Abby&#39;</span><span class="op">,</span><span class="st">&#39;Ezra&#39;</span><span class="op">,</span><span class="st">&#39;Neil&#39;</span><span class="op">,</span><span class="st">&#39;Ruth&#39;</span>]</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">,</span> <span class="dt">finished</span> <span class="op">:</span> []</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">,</span> <span class="dt">ranks</span>    <span class="op">:</span> [<span class="st">&#39;Neil&#39;</span><span class="op">,</span><span class="st">&#39;Ruth&#39;</span><span class="op">,</span><span class="st">&#39;Abby&#39;</span><span class="op">,</span><span class="st">&#39;Ezra&#39;</span>]</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">,</span> <span class="dt">plays</span>    <span class="op">:</span> [ [<span class="st">&#39;Ruth&#39;</span><span class="op">,</span>[]]</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                 <span class="op">,</span> [<span class="st">&#39;Neil&#39;</span><span class="op">,</span>[<span class="dv">5</span><span class="op">,</span><span class="dv">5</span>]]</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                 <span class="op">,</span> [<span class="st">&#39;Ezra&#39;</span><span class="op">,</span>[<span class="dv">11</span><span class="op">,</span><span class="dv">11</span>]]</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                 <span class="op">,</span> [<span class="st">&#39;Abby&#39;</span><span class="op">,</span>[<span class="dv">12</span><span class="op">,</span><span class="dv">12</span>]]</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                 ]</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">,</span> <span class="dt">hands</span>    <span class="op">:</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        { <span class="dt">Ezra</span> <span class="op">:</span> [<span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span>]</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="dt">Neil</span> <span class="op">:</span> [<span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span>]</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="dt">Abby</span> <span class="op">:</span> [<span class="dv">1</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">5</span><span class="op">,</span><span class="dv">6</span><span class="op">,</span><span class="dv">6</span><span class="op">,</span><span class="dv">7</span><span class="op">,</span><span class="dv">8</span><span class="op">,</span><span class="dv">8</span><span class="op">,</span><span class="dv">9</span><span class="op">,</span><span class="dv">9</span><span class="op">,</span><span class="dv">9</span><span class="op">,</span><span class="dv">10</span><span class="op">,</span><span class="dv">10</span><span class="op">,</span><span class="dv">11</span><span class="op">,</span><span class="dv">11</span>]</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="dt">Ruth</span> <span class="op">:</span> [<span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span>]</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    }</span></code></pre></div>
<p>As you can see, <code>game</code> tells you which players are still in the game, and in which order they’re up (spoiler: you’re first) and who have already finished. Furthermore, it tells you the players’ original ranks (in this case, Neil is top chicken).</p>
<p>Using <code>game.plays</code>, you can find out what the players who have gone before you have played. As you can see, before you came Ruth, who passed—no surprises there—and before that, Neil played two fives. Before that came Ezra, and before that Abby, who started the round by playing two twelves.</p>
<p>Last, there’s a field called “hands”. Obviously, some meddling has gone on here, since no, the other players aren’t holding hands full of zeros. However, isn’t this a quaint way of showing how many cards they are holding? And in addition, your get to see your own hand! Just call <code>game.hands[player]</code>!</p>
<p>The second function, <code>give</code> is much simpler. You’re given your hand of cards, and some number n, and you have to choose n cards to give away. The usual implementation is <code>giveWorstCards</code>, which simply opts to give away your worst cards, potentially breaking up a set. Obviously, this is not quite optimal—it may, e.g. break up a set of three to leave you with <em>one</em> twelve, or it may give away two perfectly good twelves while you have a single eleven and ten.</p>
<p>As a final tip for this section: there’s a function built into my implementation of The Great Dalmuti, <code>allPlays(allowSplit,game)</code>, which returns all legal moves. The second argument, <code>game</code>, is simply the game state that you’ve been passed. The first argument, <code>allowSplit</code>, is a boolean flag. If <code>allowSplit</code> is set to true, then the returned moves will include moves which break up sets. Otherwise, well, it won’t.</p>
<h2 id="join-in-on-the-fun">Join in on the fun!</h2>
<p>Let me leave you with a small snippet of JavaScript. The below code, if copied into one of the AI slots above—I recommend Ruth—will allow you to join in on the fun! It will prompt you, ever time it’s your move, with a request as to which move you’d like to make:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>({</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">play</span> <span class="op">:</span> <span class="kw">function</span>(player<span class="op">,</span>game) {</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">var</span> hand <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(game<span class="op">.</span><span class="at">hands</span>[player])<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">var</span> play <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(<span class="fu">playWorstCards</span>(game))<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">var</span> resp <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">parse</span>(</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            <span class="fu">prompt</span>( <span class="st">&quot;Your hand is &quot;</span><span class="op">+</span>hand<span class="op">+</span><span class="st">&quot;.</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                  <span class="op">+</span> <span class="st">&quot;What would you like to play?&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>                  <span class="op">,</span> play))<span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> (<span class="bu">Array</span><span class="op">.</span><span class="fu">isArray</span>(resp)) <span class="op">?</span> resp <span class="op">:</span> []<span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">give</span> <span class="op">:</span> <span class="kw">function</span> (player<span class="op">,</span>n<span class="op">,</span>hand) {</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">var</span> give <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(<span class="fu">giveWorstCards</span>(n<span class="op">,</span>hand))<span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">var</span> resp <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">parse</span>(</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>            <span class="fu">prompt</span>( <span class="st">&quot;Your hand is &quot;</span><span class="op">+</span>hand<span class="op">+</span><span class="st">&quot;.</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>                  <span class="op">+</span> <span class="st">&quot;What would you like to give?&quot;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>                  <span class="op">,</span> give))<span class="op">;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> (<span class="bu">Array</span><span class="op">.</span><span class="fu">isArray</span>(resp)) <span class="op">?</span> resp <span class="op">:</span> []<span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>That’s it for now. I’ll be back later with a <em>proper</em> AI for The Great Dalmuti—though, I probably won’t be implementing it in JavaScript. If you’ve had a look under the hood, you may have noticed a bunch of completely garbled JavaScript files. This is because I’ve actually implemented the game in Haskell, and compiled it to JavaScript using <a href="https://github.com/ghcjs/ghcjs">GHCJS</a>—which is awesome! Thanks a whole bunch to the GHCJS project, helping Haskell get into the browser!</p>]]></description>
    <pubDate>Tue, 05 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2016-04-05-presidents-scumbags-kings-and-arseholes-and-the-great-dalmuti.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Breadboxes, Plenty Questions and Distributional Semantics</title>
    <link>http://wen.works/posts/2016-03-21-breadboxes-and-distributional-semantics.html</link>
    <description><![CDATA[<p>Quite a while ago, <a href="https://github.com/UnicornPower">UnicornPower</a> introduced me to a game called <em>Breadbox</em>. It’s an experimental cousin of <em>20 Questions</em>, also known as <em>Plenty Questions</em>, which is played by two players—or more, really—who we’ll name Allie and Blake:</p>
<ul>
<li>Allie thinks of something.</li>
<li>As their first question, Blake asks <em>“Is it a breadbox?”</em></li>
<li>Allie—who, seeing the mandatory first question, obviously wouldn’t choose a breadbox—answers <em>“No, it’s not!”</em></li>
</ul>
<p>From there on out, all Blake’s questions have to be of the form…</p>
<ul>
<li><em>“Is it more like a breadbox, or more like…?”</em></li>
</ul>
<p>…where <em>breadbox</em> is replaced by whatever the current guess is, and the dots are filled in with whatever Blake wants. Let’s see if we can write an AI for playing this game!</p>
<!--more-->
<p>Okay, before we get started, let’s look at an example of a quick game:</p>
<dl>
<dt>Allie</dt>
<dd>I’m thinking of something…
</dd>
<dt>Blake</dt>
<dd>Is it a breadbox?
</dd>
<dt>Allie</dt>
<dd>No, it’s not.
</dd>
<dt>Blake</dt>
<dd>Is it more like a breadbox or more like a dog?
</dd>
<dt>Allie</dt>
<dd>It’s more like a dog…
</dd>
<dt>Blake</dt>
<dd>Is it more like a dog or more like a cat?
</dd>
<dt>Allie</dt>
<dd>It’s more like a cat…
</dd>
<dt>Blake</dt>
<dd>Is it more like a cat or more like a unicorn?
</dd>
<dt>Allie</dt>
<dd>It’s more like a cat…
</dd>
<dt>Blake</dt>
<dd>Is it more like a cat or more like a garden?
</dd>
<dt>Allie</dt>
<dd>It’s more like a garden…
</dd>
<dt>Blake</dt>
<dd>Is it more like a garden or more like a house?
</dd>
<dt>Allie</dt>
<dd>It’s more like a house…
</dd>
<dt>Blake</dt>
<dd>Is it more like a house or more like a friend?
</dd>
<dt>Allie</dt>
<dd>It’s more like a friend…
</dd>
<dt>Blake</dt>
<dd>Is it more like a friend or more like a lover?
</dd>
<dt>Allie</dt>
<dd>It’s more like a friend…
</dd>
<dt>Blake</dt>
<dd>Is it more like a friend or more like a relative?
</dd>
<dt>Allie</dt>
<dd>It’s more like a friend…
</dd>
<dt>Blake</dt>
<dd>Is it more like a friend or more like a neighbour?
</dd>
<dt>Allie</dt>
<dd>That’s exactly what I was thinking of!
</dd>
</dl>
<p>Since this game tends to bring out the… best in people, Blake might just have to give up. After this, Allie may be called on to explain what the word she chose even means:</p>
<dl>
<dt>Blake</dt>
<dd>I give up… what was it?
</dd>
<dt>Allie</dt>
<dd>Reverberation!
</dd>
<dt>Allie</dt>
<dd>It’s the repetition of a sound resulting from reflection of the sound waves!
</dd>
</dl>
<p>The game does a <em>fantastic</em> job of revealing how hierarchical people tend to think. For instance, I would say that a dolphin is more like an orca than it is like a mammal, <em>even though a dolphin isn’t an orca</em>. But while playing the game, I often find myself slipping into hierarchical thinking: “Oh, it’s not like an animal… so we can exclude all animals.”</p>
<p>It is exactly this—the fact that the game forces you to consider a distance metric for your internal ontology, insofar as one exists—which makes it so fascinating to play. I heartily recommend you try it!</p>
<p>If you’re upset because Breadbox is hard, or because you think that the choices it makes are weird or wrong… try playing it with a person!</p>
<hr />
<blockquote>
<p><em>Hiya! It’s Wen from the future, here to tell you that I used to have a copy of Breadbox running on OpenShift, where you could try it out for yourself. Unfortunately, that died with the deprecation of OpenShift 2, and I haven’t been able to find anywhere else that would let me host a 2GB web app for free…</em><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
</blockquote>
<hr />
<p>In the summer of 2014, I took a course on distributional semantics (by Marco Baroni and Georgiana Dinu) and the first thing I thought to do was to use their [dataset][semantic-vectors] to implement an AI for Breadbox. <del>Try it here!</del></p>
<p>So how does it work? The core hypothesis of distributional semantics is</p>
<blockquote>
<p>You can know the meaning of a word by the company it keeps</p>
</blockquote>
<p>Have a look at the two sentences below:<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<ol type="1">
<li>He filled the <em>wampimuk</em>, passed it around and we all drunk some.</li>
<li>We found a little, hairy <em>wampimuk</em> sleeping behind the tree.</li>
</ol>
<p>While you’ve probably never read the word wampimuk before, it’s likely that either sentence will give you a pretty clear idea of what a wampurnik is <em>in that context</em>.</p>
<p>So if you want to know what a word (e.g. “bear”) means, you take a <em>huge</em> corpus, and you look for all the occurances of that word…<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<pre style="margin-left: 3em;">
       over the mountains. A <a style="color:dark-orange;">bear</a> also features prominentl
    rnejakt" (An Unfortunate <a style="color:dark-orange;">Bear</a> Hunt) by Theodor Kittels
       to his hagiography, a <a style="color:dark-orange;">bear</a> killed Saint Corbinian's
         however, he let the <a style="color:dark-orange;">bear</a> go. The saddled "bear
       bear go. The saddled "<a style="color:dark-orange;">bear</a> of St. Corbinian" the
    tails on this topic, see <a style="color:dark-orange;">Bear</a> in heraldry. The British
         Cat and the Russian <a style="color:dark-orange;">Bear</a> (see The Great Game)
     Great Game) The Russian <a style="color:dark-orange;">bear</a> is a common national
    Soviet Union). The brown <a style="color:dark-orange;">bear</a> is also Finland's nation
    animals and had the same <a style="color:dark-orange;">bear</a> carry him from his hermi
         thus Christianised, <a style="color:dark-orange;">bear</a> clasping each gable
     evidence of prehistoric <a style="color:dark-orange;">bear</a> worship. Anthropologists
     peoples, considered the <a style="color:dark-orange;">bear</a> as the spirit of one's
    fathers. This is why the <a style="color:dark-orange;">bear</a> (karhu) was a greatly
    ikämmen and kontio). The <a style="color:dark-orange;">bear</a> is the national animal
      tries to kill a mother <a style="color:dark-orange;">bear</a> and her cubs—and is
         society. "The Brown <a style="color:dark-orange;">Bear</a> of Norway" is a Scottish
     magically turned into a <a style="color:dark-orange;">bear</a>, and who managed to get
     television. Evidence of <a style="color:dark-orange;">bear</a> worship has been found
      mythology identify the <a style="color:dark-orange;">bear</a> as their ancestor and
    shopric of Freising, the <a style="color:dark-orange;">bear</a> is the dangerous totem
</pre>
<p>…and then you count, for every other word, how often it occurs together with your word. The above text, for instance, gives us a number of obvious co-occurances for bear: mountain, kill, hunt, brown, animal and cub. The idea is that, given a large enough corpus, these co-occurances will drown out the noisier ones.</p>
<p>By doing this for <em>every</em> word, you build up a co-occurance matrix, which lists how often every word occurs with every other word. For instance,<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<table>
<thead>
<tr class="header">
<th></th>
<th style="text-align: left;">leash</th>
<th style="text-align: left;">walk</th>
<th style="text-align: left;">run</th>
<th style="text-align: left;">owner</th>
<th style="text-align: left;">pet</th>
<th style="text-align: left;">bark</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dog</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">2</td>
</tr>
<tr class="even">
<td>cat</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="odd">
<td>lion</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="even">
<td>light</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="odd">
<td>bark</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">0</td>
</tr>
<tr class="even">
<td>car</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">1</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
</tr>
</tbody>
</table>
<p>Now the meaning for a word is determined by its co-occurances with some select group of words. For instance, if we look at ‘dog’ we see that it strongly co-occurs with things such as ‘leash’, ‘walk’, ‘owner’, ‘pet’ and ‘bark’. For ‘cat’, we lose ‘leash’ and ‘bark’—since cats don’t bark, and are rarely leashed. And for ‘lion’, we also lose ‘owner’ and ‘pet’—while a lion could conceivably be a pet, it’d be a lot rarer than having a cat or dog… and we could never really feel like we <em>owned</em> the lion.</p>
<p>You can think of the rows in this matrix as points, in a six dimensional space—one dimension for every column. And because it’s a space, you can measure the distance between words. And this is where we get back to Breadbox: in order to play this bizarre game, we needed a distance metric for meanings, to be able to compare and order <em>any two objects</em>. And this is <em>exactly</em> what a co-occurance matrix gives us!</p>
<p>Obviously, there’s a lot more to distributional semantics than just this. For instance, the matrices that you derive this way tend to be huge—one axis per word, one point per word—so there’s a whole bunch of work which goes into selecting exactly which set of words should be the axes. Then there’s the difficultly of <em>composing</em> word meanings. You may have noticed that my breadbox implementation doesn’t work all too well for compound nouns: that’s because I’m not taking the effort to compose meaning vectors.<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<p>If you wish to read more about distributional semantics, there’s a pretty good overview of introductions and surveys [here][slides]. Additionally, there’s a whole branch of work which uses neural networks to learn the word meanings: for instance, have a look at [Word2Vec][word2vec].</p>
<hr />
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>You can still try to run it [from source][breadbox], but be warned… I did not future-proof it. [DontCountPredict]: http://clic.cimec.unitn.it/marco/publications/acl2014/baroni-etal-countpredict-acl2014.pdf [word2vec]: http://deeplearning4j.org/word2vec [slides]: https://www.cs.utexas.edu/~mooney/cs388/slides/dist-sem-intro-NLP-class-UT.pdf [semantic-vectors]: http://clic.cimec.unitn.it/composes/semantic-vectors.html [breadbox]: https://github.com/wenkokke/Breadbox<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Taken from <a href="https://www.cs.utexas.edu/~mooney/cs388/slides/dist-sem-intro-NLP-class-UT.pdf" class="uri">https://www.cs.utexas.edu/~mooney/cs388/slides/dist-sem-intro-NLP-class-UT.pdf</a>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Taken from <a href="http://www.webcorp.org.uk" class="uri">http://www.webcorp.org.uk</a>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>Taken from <a href="https://www.cs.utexas.edu/~mooney/cs388/slides/dist-sem-intro-NLP-class-UT.pdf" class="uri">https://www.cs.utexas.edu/~mooney/cs388/slides/dist-sem-intro-NLP-class-UT.pdf</a>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>A bit of a shame, really, since the course I took was <em>about</em> composing meaning vectors. Also, full disclosure, the vectors that I used were created using [Word2Vec][word2vec], using neural networks. Such vectors generally outperform counting vectors in tasks of relatedness (see <em>[Don’t Count, Predict!][DontCountPredict]</em> by Baroni et al.).<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Mon, 21 Mar 2016 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2016-03-21-breadboxes-and-distributional-semantics.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>One λ-calculus, many times…</title>
    <link>http://wen.works/posts/2016-03-20-one-lambda-calculus-many-times.html</link>
    <description><![CDATA[<!--
<pre class="Agda"><a id="14" class="Keyword">module</a> <a id="21" href="2016-03-20-one-lambda-calculus-many-times.html" class="Module">2016-03-20-one-lambda-calculus-many-times</a> <a id="63" class="Keyword">where</a>
</pre>-->
<p>Previously, I mentioned that one of the most common posts on Agda blogs is implementing the simply-typed λ-calculus. <a href="https://gergo.erdi.hu/blog/2013-05-01-simply_typed_lambda_calculus_in_agda,_without_shortcuts/">Gergő Érdi</a> even goes as far as to call it the FizzBuzz of dependently-typed programming, and rightfully so: If you do a quick search, you’ll find dozens of examples.</p>
<p>In <em><a href="http://www.cse.chalmers.se/~ulfn/papers/afp08/tutorial.pdf">Dependently-Typed Programming with Agda</a></em>, Ulf Norell implements a type checker the simply-typed λ-calculus; <a href="http://mazzo.li/posts/Lambda.html">Francesco Mazzoli</a> more or less follows Ulf, but extends his λ-calculus with a primitive operator for addition; and, Gergő Érdi extends Ulf’s approach with a checker for scope and binding.</p>
<p>I figured it would be more fun if, instead of rewriting the type checker example, I would do something a little bit different. So for my λ-calculus post, I’ll have a look at kinds of different ways of implementing the simply-typed λ-calculus. Today, natural deduction and the sequent calculus.</p>
<!--more-->
<h3 id="natural-deduction-and-the-λ-calculus">Natural Deduction and the λ-Calculus</h3>
<p>We’ll start our discussion with the syntax of types. Usually, types are defined inductively over some set of atomic types. We don’t really care what these atomic types will be, so we might as well abstract over them:</p>
<pre class="Agda"><a id="1279" class="Keyword">module</a> <a id="Syntax"></a><a id="1286" href="2016-03-20-one-lambda-calculus-many-times.html#1286" class="Module">Syntax</a> <a id="1293" class="Symbol">(</a><a id="1294" href="2016-03-20-one-lambda-calculus-many-times.html#1294" class="Bound">Atom</a> <a id="1299" class="Symbol">:</a> <a id="1301" class="PrimitiveType">Set</a><a id="1304" class="Symbol">)</a> <a id="1306" class="Keyword">where</a>
</pre>
<p>But, if it makes you feel better, we can pretend that they’ll be some like this:</p>
<pre class="Agda Spec">  <a name="511" class="Keyword">data</a><a name="515"> </a><a name="516" href="https://agda.github.io/agda-stdlib/#289" class="Module">Atom</a><a name="521"> </a><a name="522" class="Symbol">:</a><a name="523"> </a><a name="524" class="PrimitiveType">Set</a><a name="527"> </a><a name="528" class="Keyword">where</a><a name="533"><br />    </a><a name="538" href="https://agda.github.io/agda-stdlib/#538" class="InductiveConstructor">Int</a><a name="542">    </a><a name="543" class="Symbol">:</a><a name="544"> </a><a name="545" href="https://agda.github.io/agda-stdlib/#516" class="Datatype">Atom</a><a name="550"><br />    </a><a name="555" href="https://agda.github.io/agda-stdlib/#555" class="InductiveConstructor">String</a><a name="562"> </a><a name="563" class="Symbol">:</a><a name="564"> </a><a name="565" href="https://agda.github.io/agda-stdlib/#516" class="Datatype">Atom</a></pre>
<p>Next, we defined our types. Since we’re talking about minimal propositional logic, a type is either atomic (marked by <a class="Agda InductiveConstructor">El</a>) or an implication:</p>
<pre class="Agda">  <a id="2332" class="Keyword">infixr</a> <a id="2339" class="Number">6</a> <a id="2341" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">_⇒_</a>

  <a id="2348" class="Keyword">data</a> <a id="Syntax.Type"></a><a id="2353" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="2358" class="Symbol">:</a> <a id="2360" class="PrimitiveType">Set</a> <a id="2364" class="Keyword">where</a>
    <a id="Syntax.Type.El"></a><a id="2374" href="2016-03-20-one-lambda-calculus-many-times.html#2374" class="InductiveConstructor">El</a>  <a id="2378" class="Symbol">:</a> <a id="2380" href="2016-03-20-one-lambda-calculus-many-times.html#1294" class="Bound">Atom</a> <a id="2385" class="Symbol">→</a> <a id="2387" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a>
    <a id="Syntax.Type._⇒_"></a><a id="2396" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">_⇒_</a> <a id="2400" class="Symbol">:</a> <a id="2402" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="2407" class="Symbol">→</a> <a id="2409" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="2414" class="Symbol">→</a> <a id="2416" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a>
</pre>
<p>Now we’ll define sequents. Even though this is just a tiny piece of syntax, we should put some thought behind it…</p>
<p>Traditionally, the antecedent of some sequent would be a <em>set</em> of formulas. However, we’re looking at this from the perspective of λ-calculus, and there may well be a difference between two terms of the same type. This is usually solved by changing the antecedent to a set of <em>type assignments</em>, which means <span class="math inline">x:A</span> and <span class="math inline">y:A</span> are now distinct. From the logical perspective, this is the same as using a <em>bag</em> or <em>multiset</em> antecedent. If we were doing mathematics, we’d be done, but implementation-wise a bag is actually a rather complex beast. For this reason, we’ll use a <em>list</em>:<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<!--
<pre class="Agda">  <a id="3142" class="Keyword">open</a> <a id="3147" class="Keyword">import</a> <a id="3154" href="Data.Nat.html" class="Module">Data.Nat</a>             <a id="3175" class="Keyword">using</a> <a id="3181" class="Symbol">(</a><a id="3182" href="Agda.Builtin.Nat.html#192" class="Datatype">ℕ</a><a id="3183" class="Symbol">;</a> <a id="3185" href="Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a><a id="3188" class="Symbol">;</a> <a id="3190" href="Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a><a id="3194" class="Symbol">)</a>
  <a id="3198" class="Keyword">open</a> <a id="3203" class="Keyword">import</a> <a id="3210" href="Data.Fin.html" class="Module">Data.Fin</a>             <a id="3231" class="Keyword">using</a> <a id="3237" class="Symbol">(</a><a id="3238" href="Data.Fin.Base.html#1146" class="Datatype">Fin</a><a id="3241" class="Symbol">;</a> <a id="3243" href="Data.Fin.Base.html#1199" class="InductiveConstructor">suc</a><a id="3246" class="Symbol">;</a> <a id="3248" href="Data.Fin.Base.html#1168" class="InductiveConstructor">zero</a><a id="3252" class="Symbol">)</a>
  <a id="3256" class="Keyword">open</a> <a id="3261" class="Keyword">import</a> <a id="3268" href="Data.List.html" class="Module">Data.List</a>            <a id="3289" class="Keyword">using</a> <a id="3295" class="Symbol">(</a><a id="3296" href="Agda.Builtin.List.html#148" class="Datatype">List</a><a id="3300" class="Symbol">;</a> <a id="3302" href="Agda.Builtin.List.html#200" class="InductiveConstructor Operator">_∷_</a><a id="3305" class="Symbol">;</a> <a id="3307" href="Data.List.Base.html#10010" class="InductiveConstructor">[]</a><a id="3309" class="Symbol">;</a> <a id="3311" href="Data.List.Base.html#1763" class="Function Operator">_++_</a><a id="3315" class="Symbol">)</a>
  <a id="3319" class="Keyword">open</a> <a id="3324" class="Keyword">import</a> <a id="3331" href="Function.Equivalence.html" class="Module">Function.Equivalence</a> <a id="3352" class="Keyword">using</a> <a id="3358" class="Symbol">(</a><a id="3359" href="Function.Equivalence.html#1204" class="Function Operator">_⇔_</a><a id="3362" class="Symbol">;</a> <a id="3364" href="Function.Equivalence.html#1660" class="Function">id</a><a id="3366" class="Symbol">;</a> <a id="3368" href="Function.Equivalence.html#2878" class="Function">map</a><a id="3371" class="Symbol">;</a> <a id="3373" href="Function.Equivalence.html#1297" class="Function">equivalence</a><a id="3384" class="Symbol">)</a>

  <a id="3389" class="Keyword">open</a> <a id="3394" class="Keyword">import</a> <a id="3401" href="Data.List.Relation.Unary.Any.html" class="Module">Data.List.Relation.Unary.Any</a> <a id="3430" class="Keyword">using</a> <a id="3436" class="Symbol">(</a><a id="3437" href="Data.List.Relation.Unary.Any.html#1156" class="Datatype">Any</a><a id="3440" class="Symbol">;</a> <a id="3442" href="Data.List.Relation.Unary.Any.html#1219" class="InductiveConstructor">here</a><a id="3446" class="Symbol">;</a> <a id="3448" href="Data.List.Relation.Unary.Any.html#1272" class="InductiveConstructor">there</a><a id="3453" class="Symbol">)</a>
  <a id="3457" class="Keyword">open</a> <a id="3462" class="Keyword">import</a> <a id="3469" href="Data.List.Membership.Propositional.html" class="Module">Data.List.Membership.Propositional</a> <a id="3504" class="Keyword">using</a> <a id="3510" class="Symbol">(</a><a id="3511" href="Data.List.Membership.Setoid.html#887" class="Function Operator">_∈_</a><a id="3514" class="Symbol">)</a>
  <a id="3518" class="Keyword">open</a> <a id="3523" class="Keyword">import</a> <a id="3530" href="Data.List.Relation.Sublist.Propositional.html" class="Module">Data.List.Relation.Sublist.Propositional</a> <a id="3571" class="Keyword">using</a> <a id="3577" class="Symbol">(</a><a id="3578" href="Data.List.Relation.Binary.Sublist.Setoid.html#1349" class="Function Operator">_⊆_</a><a id="3581" class="Symbol">;</a> <a id="3583" href="Data.List.Relation.Binary.Sublist.Setoid.html#2455" class="Function">⊆-refl</a><a id="3589" class="Symbol">;</a> <a id="3591" href="Data.List.Relation.Binary.Sublist.Propositional.html#1176" class="Function">lookup</a><a id="3597" class="Symbol">)</a>
  <a id="3601" class="Keyword">open</a> <a id="3606" class="Keyword">import</a> <a id="3613" href="Data.List.Relation.Sublist.Propositional.Properties.html" class="Module">Data.List.Relation.Sublist.Propositional.Properties</a> <a id="3665" class="Keyword">using</a> <a id="3671" class="Symbol">(</a><a id="3672" href="Data.List.Relation.Binary.Sublist.Setoid.Properties.html#4573" class="Function">++⁺</a><a id="3675" class="Symbol">;</a> <a id="3677" href="Data.List.Relation.Binary.Sublist.Setoid.Properties.html#4431" class="Function">++⁺ˡ</a><a id="3681" class="Symbol">)</a>
  <a id="3685" class="Keyword">open</a> <a id="3690" class="Keyword">import</a> <a id="3697" href="Relation.Binary.PropositionalEquality.html" class="Module">Relation.Binary.PropositionalEquality</a> <a id="3735" class="Keyword">using</a> <a id="3741" class="Symbol">(</a><a id="3742" href="Agda.Builtin.Equality.html#151" class="Datatype Operator">_≡_</a><a id="3745" class="Symbol">;</a> <a id="3747" href="Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a><a id="3751" class="Symbol">)</a>
</pre>-->
<pre class="Agda">  <a id="3767" class="Keyword">infix</a> <a id="3773" class="Number">4</a> <a id="3775" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">_⊢_</a>

  <a id="3782" class="Keyword">data</a> <a id="Syntax.Sequent"></a><a id="3787" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a> <a id="3795" class="Symbol">:</a> <a id="3797" class="PrimitiveType">Set</a> <a id="3801" class="Keyword">where</a>
    <a id="Syntax.Sequent._⊢_"></a><a id="3811" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">_⊢_</a> <a id="3815" class="Symbol">:</a> <a id="3817" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#148" class="Datatype">List</a> <a id="3822" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="3827" class="Symbol">→</a> <a id="3829" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="3834" class="Symbol">→</a> <a id="3836" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a>
</pre>
<p>So what does a <em>proof</em> of a sequent look like? The logical system that is most familiar to a computer scientist is probably <em>natural deduction</em>. The natural deduction system for minimal propositional logic has <em>three</em> rules:</p>
<p><span class="math display">
    \frac{A \in \Gamma}{\Gamma \vdash A}{\small ax}
    \quad
    \frac{A , \Gamma \vdash B}{\Gamma \vdash A \Rightarrow B}{\small{\Rightarrow}\!i}
    \quad
    \frac{\Gamma \vdash A \Rightarrow B \quad \Gamma \vdash A}{\Gamma \vdash B}{\small{\Rightarrow}\!e}
</span></p>
<p>Recall that λ-terms are constructed in one of three ways: a λ-term is either a <em>variable</em>, an <em>abstraction</em> or an <em>application</em>:</p>
<p><span class="math display">
    M, N ::= x \mid (\lambda x . M) \mid (M\;N)
</span></p>
<p>These correspond exactly to the rules of natural deduction. In fact, in type systems they are usually presented together:</p>
<p><span class="math display">
    \frac{(x : A) \in \Gamma}{\Gamma \vdash x : A}
    \quad
    \frac{x : A , \Gamma \vdash M : B}{\Gamma \vdash (\lambda x. M) : A \Rightarrow B}
    \quad
    \frac{\Gamma \vdash M : A \Rightarrow B \quad \Gamma \vdash N : A}{\Gamma \vdash (M\;N) : B}
</span></p>
<p>However, I like the clean look of the logical notation, so in the interest of keeping things simple I will use that.</p>
<p>In what follows, we’ll use the following metavariables for types, contexts, and sequents. That means that if you see one of these names, and you can’t find a binding site, it’s implicitly bound at the top-level:</p>
<pre class="Agda">  <a id="5251" class="Keyword">variable</a> <a id="5260" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="5262" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="5264" href="2016-03-20-one-lambda-calculus-many-times.html#5264" class="Generalizable">C</a> <a id="5266" class="Symbol">:</a> <a id="5268" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a>
  <a id="5275" class="Keyword">variable</a> <a id="5284" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5286" href="2016-03-20-one-lambda-calculus-many-times.html#5286" class="Generalizable">Γ′</a>  <a id="5290" class="Symbol">:</a> <a id="5292" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#148" class="Datatype">List</a> <a id="5297" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a>
  <a id="5304" class="Keyword">variable</a> <a id="5313" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a>     <a id="5319" class="Symbol">:</a> <a id="5321" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a>
</pre>
<p>We encode the natural deduction system as a datatype, with each rule corresponding to a <em>constructor</em>, and each proof a <em>value</em>:</p>
<pre class="Agda">  <a id="5470" class="Keyword">infix</a> <a id="5476" class="Number">3</a> <a id="5478" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND_</a>

  <a id="5485" class="Keyword">data</a> <a id="Syntax.ND_"></a><a id="5490" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND_</a> <a id="5494" class="Symbol">:</a> <a id="5496" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a> <a id="5504" class="Symbol">→</a> <a id="5506" class="PrimitiveType">Set</a> <a id="5510" class="Keyword">where</a>
    <a id="Syntax.ND_.ax"></a><a id="5520" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a> <a id="5523" class="Symbol">:</a> <a id="5525" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="5527" href="https://agda.github.io/agda-stdlib/Data.List.Membership.Setoid.html#887" class="Function Operator">∈</a> <a id="5529" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5531" class="Symbol">→</a> <a id="5533" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="5536" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5538" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="5540" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a>
    <a id="Syntax.ND_.⇒i"></a><a id="5546" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="5549" class="Symbol">:</a> <a id="5551" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="5554" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="5556" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="5558" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5560" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="5562" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="5564" class="Symbol">→</a> <a id="5566" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="5569" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5571" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="5573" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="5575" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">⇒</a> <a id="5577" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a>
    <a id="Syntax.ND_.⇒e"></a><a id="5583" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="5586" class="Symbol">:</a> <a id="5588" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="5591" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5593" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="5595" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="5597" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">⇒</a> <a id="5599" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="5601" class="Symbol">→</a> <a id="5603" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="5606" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5608" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="5610" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="5612" class="Symbol">→</a> <a id="5614" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="5617" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="5619" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="5621" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a>
</pre>
<p>Note: for the sake of brevity, I’m using an Agda notation in which implicit arguments are hidden. That means that any unbound variable—such as the <span class="math inline">A</span>s, <span class="math inline">B</span>s and <span class="math inline">\Gamma</span>s above—is implicitly universally quantified.</p>
<p>I prefer to think of things of the type <a class="Agda Datatype Operator">ND</a> as proofs made up of rules, but if you prefer to think of them as programs made up of the constructors of lambda terms, just use the following syntax:</p>
<pre class="Agda">  <a id="6088" class="Keyword">pattern</a> <a id="Syntax.var"></a><a id="6096" href="2016-03-20-one-lambda-calculus-many-times.html#6096" class="InductiveConstructor">var</a>   <a id="6102" href="2016-03-20-one-lambda-calculus-many-times.html#6111" class="Bound">x</a> <a id="6104" class="Symbol">=</a> <a id="6106" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a>   <a id="6111" href="2016-03-20-one-lambda-calculus-many-times.html#6111" class="Bound">x</a>
  <a id="6115" class="Keyword">pattern</a> <a id="Syntax.lam"></a><a id="6123" href="2016-03-20-one-lambda-calculus-many-times.html#6123" class="InductiveConstructor">lam</a>   <a id="6129" href="2016-03-20-one-lambda-calculus-many-times.html#6138" class="Bound">x</a> <a id="6131" class="Symbol">=</a> <a id="6133" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a>   <a id="6138" href="2016-03-20-one-lambda-calculus-many-times.html#6138" class="Bound">x</a>
  <a id="6142" class="Keyword">pattern</a> <a id="Syntax._∙_"></a><a id="6150" href="2016-03-20-one-lambda-calculus-many-times.html#6150" class="InductiveConstructor Operator">_∙_</a> <a id="6154" href="2016-03-20-one-lambda-calculus-many-times.html#6163" class="Bound">f</a> <a id="6156" href="2016-03-20-one-lambda-calculus-many-times.html#6165" class="Bound">x</a> <a id="6158" class="Symbol">=</a> <a id="6160" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="6163" href="2016-03-20-one-lambda-calculus-many-times.html#6163" class="Bound">f</a> <a id="6165" href="2016-03-20-one-lambda-calculus-many-times.html#6165" class="Bound">x</a>
</pre>
<p>Earlier, we made the conscious choice to use <em>lists</em> to represent the antecedent. However, this introduced a minor problem: while two programs of the same type may not do the same thing, they <em>should</em> be equivalent, as far as the type system is concerned, and so it <em>should</em> be possible to rewrite a program which needs <em>two</em> values of type <span class="math inline">A</span> to a program which needs only <em>one</em>.</p>
<p>Similarily, by using lists, we have introduced a fixed order in our antecedent which isn’t exactly desirable. While they may be different programs, we <em>should</em> be able to rewrite the program <span class="math inline">f : A \to B \to C</span> to receive its arguments in the different order, i.e. to a program <span class="math inline">f\prime : B \to A \to C</span>.</p>
<p>Collectively, such properties are known as <em>structural</em> properties, and for this particular logic we can summarise them neatly as follows:</p>
<blockquote>
<p>If <span class="math inline">\Gamma \subseteq \Gamma\prime</span> and <span class="math inline">\Gamma \vdash A</span>, then <span class="math inline">\Gamma\prime \vdash A</span>.</p>
</blockquote>
<p>We can give a proof of this theorem by induction on the structure of natural deduction proofs. Note that we represent the subset relation as a <em>function</em>, that is to say <span class="math inline">\Gamma \subseteq \Gamma\prime</span> is the <em>function</em> <span class="math inline">A\in\Gamma\to A\in\Gamma\prime</span>:</p>
<pre class="Agda">  <a id="Syntax.struct"></a><a id="7353" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7360" class="Symbol">:</a> <a id="7362" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="7364" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Binary.Sublist.Setoid.html#1349" class="Function Operator">⊆</a> <a id="7366" href="2016-03-20-one-lambda-calculus-many-times.html#5286" class="Generalizable">Γ′</a> <a id="7369" class="Symbol">→</a> <a id="7371" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="7374" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="7376" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="7378" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="7380" class="Symbol">→</a> <a id="7382" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="7385" href="2016-03-20-one-lambda-calculus-many-times.html#5286" class="Generalizable">Γ′</a> <a id="7388" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="7390" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a>
  <a id="7394" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7401" href="2016-03-20-one-lambda-calculus-many-times.html#7401" class="Bound">Γ⊆Γ′</a> <a id="7406" class="Symbol">(</a><a id="7407" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a> <a id="7410" href="2016-03-20-one-lambda-calculus-many-times.html#7410" class="Bound">x</a><a id="7411" class="Symbol">)</a>   <a id="7415" class="Symbol">=</a> <a id="7417" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a> <a id="7420" class="Symbol">(</a><a id="7421" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Binary.Sublist.Propositional.html#1176" class="Function">lookup</a> <a id="7428" href="2016-03-20-one-lambda-calculus-many-times.html#7401" class="Bound">Γ⊆Γ′</a> <a id="7433" href="2016-03-20-one-lambda-calculus-many-times.html#7410" class="Bound">x</a><a id="7434" class="Symbol">)</a>
  <a id="7438" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7445" href="2016-03-20-one-lambda-calculus-many-times.html#7445" class="Bound">Γ⊆Γ′</a> <a id="7450" class="Symbol">(</a><a id="7451" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="7454" href="2016-03-20-one-lambda-calculus-many-times.html#7454" class="Bound">f</a><a id="7455" class="Symbol">)</a>   <a id="7459" class="Symbol">=</a> <a id="7461" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="7464" class="Symbol">(</a><a id="7465" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7472" class="Symbol">(</a><a id="7473" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Binary.Sublist.Setoid.Properties.html#4573" class="Function">++⁺</a> <a id="7477" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Binary.Sublist.Setoid.html#2455" class="Function">⊆-refl</a> <a id="7484" href="2016-03-20-one-lambda-calculus-many-times.html#7445" class="Bound">Γ⊆Γ′</a><a id="7488" class="Symbol">)</a> <a id="7490" href="2016-03-20-one-lambda-calculus-many-times.html#7454" class="Bound">f</a><a id="7491" class="Symbol">)</a>
  <a id="7495" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7502" href="2016-03-20-one-lambda-calculus-many-times.html#7502" class="Bound">Γ⊆Γ′</a> <a id="7507" class="Symbol">(</a><a id="7508" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="7511" href="2016-03-20-one-lambda-calculus-many-times.html#7511" class="Bound">f</a> <a id="7513" href="2016-03-20-one-lambda-calculus-many-times.html#7513" class="Bound">g</a><a id="7514" class="Symbol">)</a> <a id="7516" class="Symbol">=</a> <a id="7518" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="7521" class="Symbol">(</a><a id="7522" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7529" href="2016-03-20-one-lambda-calculus-many-times.html#7502" class="Bound">Γ⊆Γ′</a> <a id="7534" href="2016-03-20-one-lambda-calculus-many-times.html#7511" class="Bound">f</a><a id="7535" class="Symbol">)</a> <a id="7537" class="Symbol">(</a><a id="7538" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="7545" href="2016-03-20-one-lambda-calculus-many-times.html#7502" class="Bound">Γ⊆Γ′</a> <a id="7550" href="2016-03-20-one-lambda-calculus-many-times.html#7513" class="Bound">g</a><a id="7551" class="Symbol">)</a>
</pre>
<p>Note that values of type <span class="math inline">A\in\Gamma</span> are constructed using <a class="Agda InductiveConstructor">here</a> and <a class="Agda InductiveConstructor">there</a>, which makes them more or less just numbers, i.e. “first value”, “second value”, etc…</p>
<p>I mentioned two uses of this structural rule: contracting two different variables of the <em>same</em> type into one, and exchanging the order of the types in the antecedent. There is one more canonical use: <em>weakning</em>.</p>
<p>Weakening is so obvious to programmers that they don’t really think of it, but what it says is that if you can run a program in <em>some</em> environment, then you should <em>certainly</em> be able to run that program in that enviroment with some irrelevant stuff added to it. Formally, we write it as:</p>
<pre class="Agda">  <a id="Syntax.w′"></a><a id="8312" href="2016-03-20-one-lambda-calculus-many-times.html#8312" class="Function">w′</a> <a id="8315" class="Symbol">:</a> <a id="8317" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="8320" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="8322" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="8324" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="8326" class="Symbol">→</a> <a id="8328" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="8331" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="8333" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="8335" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="8337" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="8339" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a>
  <a id="8343" href="2016-03-20-one-lambda-calculus-many-times.html#8312" class="Function">w′</a> <a id="8346" href="2016-03-20-one-lambda-calculus-many-times.html#8346" class="Bound">f</a> <a id="8348" class="Symbol">=</a> <a id="8350" href="2016-03-20-one-lambda-calculus-many-times.html#7353" class="Function">struct</a> <a id="8357" class="Symbol">(</a><a id="8358" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Binary.Sublist.Setoid.Properties.html#4431" class="Function">++⁺ˡ</a> <a id="8363" class="Symbol">_</a> <a id="8365" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Binary.Sublist.Setoid.html#2455" class="Function">⊆-refl</a><a id="8371" class="Symbol">)</a> <a id="8373" href="2016-03-20-one-lambda-calculus-many-times.html#8346" class="Bound">f</a>
</pre>
<p>Passing <a class="Agda InductiveConstructor">there</a> to <a class="Agda Function">struct</a> simply moves every value by one: the first value becomes the second, the second becomes the third, etc… In the new antecedent, the first value will be our “irrelevant stuff”.</p>
<h3 id="sequent-calculus-and-natural-deduction">Sequent Calculus and Natural Deduction</h3>
<p>We’ve got enough to start talking about the sequent calculus now. The sequent calculus is a different way of writing down logical systems, and it has some pros and cons when compared to natural deduction. It’s usual presentation is as follows:</p>
<p><span class="math display">
    \frac{A \in \Gamma}{\Gamma \vdash A}{\small ax}
    \quad
    \frac{\Gamma \vdash A \quad A , \Gamma \vdash B}{\Gamma \vdash B}{\small cut}
    \quad
    \frac{\Gamma \vdash A \quad B , \Gamma \vdash C}{A \Rightarrow  B , \Gamma \vdash C}{\small{\Rightarrow}\!l}
    \quad
    \frac{A , \Gamma \vdash B}{\Gamma \vdash A \Rightarrow B}{\small{\Rightarrow}\!r}
</span></p>
<p>We can encode these rules in Agda as follows:</p>
<pre class="Agda">  <a id="9363" class="Keyword">infix</a> <a id="9369" class="Number">3</a> <a id="9371" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC_</a>

  <a id="9378" class="Keyword">data</a> <a id="Syntax.SC_"></a><a id="9383" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC_</a> <a id="9387" class="Symbol">:</a> <a id="9389" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a> <a id="9397" class="Symbol">→</a> <a id="9399" class="PrimitiveType">Set</a> <a id="9403" class="Keyword">where</a>
    <a id="Syntax.SC_.ax"></a><a id="9413" href="2016-03-20-one-lambda-calculus-many-times.html#9413" class="InductiveConstructor">ax</a>  <a id="9417" class="Symbol">:</a> <a id="9419" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9421" href="https://agda.github.io/agda-stdlib/Data.List.Membership.Setoid.html#887" class="Function Operator">∈</a> <a id="9423" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9425" class="Symbol">→</a> <a id="9427" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9430" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9432" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9434" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a>
    <a id="Syntax.SC_.cut"></a><a id="9440" href="2016-03-20-one-lambda-calculus-many-times.html#9440" class="InductiveConstructor">cut</a> <a id="9444" class="Symbol">:</a> <a id="9446" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9449" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9451" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9453" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9455" class="Symbol">→</a> <a id="9457" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9460" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9462" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="9464" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9466" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9468" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="9470" class="Symbol">→</a> <a id="9472" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9475" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9477" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9479" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a>
    <a id="Syntax.SC_.⇒l"></a><a id="9485" href="2016-03-20-one-lambda-calculus-many-times.html#9485" class="InductiveConstructor">⇒l</a>  <a id="9489" class="Symbol">:</a> <a id="9491" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9494" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9496" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9498" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9500" class="Symbol">→</a> <a id="9502" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9505" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="9507" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="9509" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9511" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9513" href="2016-03-20-one-lambda-calculus-many-times.html#5264" class="Generalizable">C</a> <a id="9515" class="Symbol">→</a> <a id="9517" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9520" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9522" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">⇒</a> <a id="9524" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="9526" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="9528" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9530" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9532" href="2016-03-20-one-lambda-calculus-many-times.html#5264" class="Generalizable">C</a>
    <a id="Syntax.SC_.⇒r"></a><a id="9538" href="2016-03-20-one-lambda-calculus-many-times.html#9538" class="InductiveConstructor">⇒r</a>  <a id="9542" class="Symbol">:</a> <a id="9544" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9547" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9549" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="9551" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9553" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9555" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a> <a id="9557" class="Symbol">→</a> <a id="9559" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="9562" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="9564" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="9566" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="9568" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">⇒</a> <a id="9570" href="2016-03-20-one-lambda-calculus-many-times.html#5262" class="Generalizable">B</a>
</pre>
<p>We will define a few patterns that we’d otherwise have to write out, over and over again. Namely, names for the first, second, and third variable in a context:</p>
<pre class="Agda">  <a id="9744" class="Keyword">pattern</a> <a id="Syntax.ax₀"></a><a id="9752" href="2016-03-20-one-lambda-calculus-many-times.html#9752" class="InductiveConstructor">ax₀</a> <a id="9756" class="Symbol">=</a> <a id="9758" class="InductiveConstructor">ax</a> <a id="9761" class="Symbol">(</a><a id="9762" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1219" class="InductiveConstructor">here</a> <a id="9767" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a><a id="9771" class="Symbol">)</a>
  <a id="9775" class="Keyword">pattern</a> <a id="Syntax.ax₁"></a><a id="9783" href="2016-03-20-one-lambda-calculus-many-times.html#9783" class="InductiveConstructor">ax₁</a> <a id="9787" class="Symbol">=</a> <a id="9789" class="InductiveConstructor">ax</a> <a id="9792" class="Symbol">(</a><a id="9793" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1272" class="InductiveConstructor">there</a> <a id="9799" class="Symbol">(</a><a id="9800" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1219" class="InductiveConstructor">here</a> <a id="9805" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a><a id="9809" class="Symbol">))</a>
  <a id="9814" class="Keyword">pattern</a> <a id="Syntax.ax₂"></a><a id="9822" href="2016-03-20-one-lambda-calculus-many-times.html#9822" class="InductiveConstructor">ax₂</a> <a id="9826" class="Symbol">=</a> <a id="9828" class="InductiveConstructor">ax</a> <a id="9831" class="Symbol">(</a><a id="9832" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1272" class="InductiveConstructor">there</a> <a id="9838" class="Symbol">(</a><a id="9839" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1272" class="InductiveConstructor">there</a> <a id="9845" class="Symbol">(</a><a id="9846" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1219" class="InductiveConstructor">here</a> <a id="9851" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a><a id="9855" class="Symbol">)))</a>
  <a id="9861" class="Comment">--- etc.</a>
</pre>
<p>It’s a little bit of a puzzle, but given <a class="Agda Function">w′</a> it becomes quite easy to show that the two logics are in fact equivalent—that they derive the <em>same sequents</em>:</p>
<pre class="Agda">  <a id="10068" class="Keyword">module</a> <a id="ND⇔SC"></a><a id="10075" href="2016-03-20-one-lambda-calculus-many-times.html#10075" class="Module">ND⇔SC</a> <a id="10081" class="Keyword">where</a>

    <a id="Syntax.ND⇔SC.⟹"></a><a id="10092" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10094" class="Symbol">:</a> <a id="10096" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="10099" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a> <a id="10101" class="Symbol">→</a> <a id="10103" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="10106" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a>
    <a id="10112" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10114" class="Symbol">(</a><a id="10115" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a> <a id="10118" href="2016-03-20-one-lambda-calculus-many-times.html#10118" class="Bound">x</a><a id="10119" class="Symbol">)</a>   <a id="10123" class="Symbol">=</a> <a id="10125" href="2016-03-20-one-lambda-calculus-many-times.html#9413" class="InductiveConstructor">ax</a> <a id="10128" href="2016-03-20-one-lambda-calculus-many-times.html#10118" class="Bound">x</a>
    <a id="10134" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10136" class="Symbol">(</a><a id="10137" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="10140" href="2016-03-20-one-lambda-calculus-many-times.html#10140" class="Bound">f</a><a id="10141" class="Symbol">)</a>   <a id="10145" class="Symbol">=</a> <a id="10147" href="2016-03-20-one-lambda-calculus-many-times.html#9538" class="InductiveConstructor">⇒r</a>  <a id="10151" class="Symbol">(</a><a id="10152" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10154" href="2016-03-20-one-lambda-calculus-many-times.html#10140" class="Bound">f</a><a id="10155" class="Symbol">)</a>
    <a id="10161" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10163" class="Symbol">(</a><a id="10164" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="10167" href="2016-03-20-one-lambda-calculus-many-times.html#10167" class="Bound">f</a> <a id="10169" href="2016-03-20-one-lambda-calculus-many-times.html#10169" class="Bound">g</a><a id="10170" class="Symbol">)</a> <a id="10172" class="Symbol">=</a> <a id="10174" href="2016-03-20-one-lambda-calculus-many-times.html#9440" class="InductiveConstructor">cut</a> <a id="10178" class="Symbol">(</a><a id="10179" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10181" href="2016-03-20-one-lambda-calculus-many-times.html#10167" class="Bound">f</a><a id="10182" class="Symbol">)</a> <a id="10184" class="Symbol">(</a><a id="10185" href="2016-03-20-one-lambda-calculus-many-times.html#9485" class="InductiveConstructor">⇒l</a> <a id="10188" class="Symbol">(</a><a id="10189" href="2016-03-20-one-lambda-calculus-many-times.html#10092" class="Function">⟹</a> <a id="10191" href="2016-03-20-one-lambda-calculus-many-times.html#10169" class="Bound">g</a><a id="10192" class="Symbol">)</a> <a id="10194" href="2016-03-20-one-lambda-calculus-many-times.html#9752" class="InductiveConstructor">ax₀</a><a id="10197" class="Symbol">)</a>

    <a id="Syntax.ND⇔SC.⟸"></a><a id="10204" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10206" class="Symbol">:</a> <a id="10208" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="10211" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a> <a id="10213" class="Symbol">→</a> <a id="10215" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="10218" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a>
    <a id="10224" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10226" class="Symbol">(</a><a id="10227" href="2016-03-20-one-lambda-calculus-many-times.html#9413" class="InductiveConstructor">ax</a>  <a id="10231" href="2016-03-20-one-lambda-calculus-many-times.html#10231" class="Bound">p</a><a id="10232" class="Symbol">)</a>   <a id="10236" class="Symbol">=</a> <a id="10238" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a> <a id="10241" href="2016-03-20-one-lambda-calculus-many-times.html#10231" class="Bound">p</a>
    <a id="10247" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10249" class="Symbol">(</a><a id="10250" href="2016-03-20-one-lambda-calculus-many-times.html#9440" class="InductiveConstructor">cut</a> <a id="10254" href="2016-03-20-one-lambda-calculus-many-times.html#10254" class="Bound">f</a> <a id="10256" href="2016-03-20-one-lambda-calculus-many-times.html#10256" class="Bound">g</a><a id="10257" class="Symbol">)</a> <a id="10259" class="Symbol">=</a> <a id="10261" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="10264" class="Symbol">(</a><a id="10265" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="10268" class="Symbol">(</a><a id="10269" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10271" href="2016-03-20-one-lambda-calculus-many-times.html#10256" class="Bound">g</a><a id="10272" class="Symbol">))</a> <a id="10275" class="Symbol">(</a><a id="10276" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10278" href="2016-03-20-one-lambda-calculus-many-times.html#10254" class="Bound">f</a><a id="10279" class="Symbol">)</a>
    <a id="10285" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10287" class="Symbol">(</a><a id="10288" href="2016-03-20-one-lambda-calculus-many-times.html#9485" class="InductiveConstructor">⇒l</a>  <a id="10292" href="2016-03-20-one-lambda-calculus-many-times.html#10292" class="Bound">f</a> <a id="10294" href="2016-03-20-one-lambda-calculus-many-times.html#10294" class="Bound">g</a><a id="10295" class="Symbol">)</a> <a id="10297" class="Symbol">=</a> <a id="10299" href="2016-03-20-one-lambda-calculus-many-times.html#8312" class="Function">w′</a> <a id="10302" class="Symbol">(</a><a id="10303" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="10306" class="Symbol">(</a><a id="10307" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10309" href="2016-03-20-one-lambda-calculus-many-times.html#10294" class="Bound">g</a><a id="10310" class="Symbol">))</a> <a id="10313" href="2016-03-20-one-lambda-calculus-many-times.html#6150" class="InductiveConstructor Operator">∙</a> <a id="10315" class="Symbol">(</a><a id="10316" href="2016-03-20-one-lambda-calculus-many-times.html#9752" class="InductiveConstructor">ax₀</a> <a id="10320" href="2016-03-20-one-lambda-calculus-many-times.html#6150" class="InductiveConstructor Operator">∙</a> <a id="10322" href="2016-03-20-one-lambda-calculus-many-times.html#8312" class="Function">w′</a> <a id="10325" class="Symbol">(</a><a id="10326" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10328" href="2016-03-20-one-lambda-calculus-many-times.html#10292" class="Bound">f</a><a id="10329" class="Symbol">))</a>
    <a id="10336" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10338" class="Symbol">(</a><a id="10339" href="2016-03-20-one-lambda-calculus-many-times.html#9538" class="InductiveConstructor">⇒r</a>  <a id="10343" href="2016-03-20-one-lambda-calculus-many-times.html#10343" class="Bound">f</a><a id="10344" class="Symbol">)</a>   <a id="10348" class="Symbol">=</a> <a id="10350" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="10353" class="Symbol">(</a><a id="10354" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">⟸</a> <a id="10356" href="2016-03-20-one-lambda-calculus-many-times.html#10343" class="Bound">f</a><a id="10357" class="Symbol">)</a>
</pre>
<p>The rules for sequent calculus obviously no longer correspond <em>directly</em> to the λ-calculus. However, we’ve just shown that there is in fact <em>some</em> correspondence between them. In the λ-calculus, computation is represented by β-reduction, which is the iterative removal of redexes</p>
<p><span class="math display">(\lambda x.M)\; N\mapsto M[x := N]</span></p>
<p>Likewise, sequent calculus comes equipped with its own notion of computation: cut-elimination. And the beautiful thing about cut elimination is that it has a <em>very</em> concrete normal form. Instead of faffing about, claiming the structure is free of β-redexes, cut elimination—as its name implies—allows you to all occurances of the “cut” rule. It would be interesting to show exactly what kind of relation cut elimination has to β-reduction…</p>
<p><em>Alas</em>! It may be too much effort for a single post to implement both of these logics <em>and</em> a procedure for cut elimination. However, there <em>is</em> a much simpler thing we can do. Agda itself has a pretty servicable implementation of β-reduction for Agda terms, and we can quite easily piggyback on that mechanism. In fact, most of the articles I linked to at the beginning do exactly this.</p>
<h3 id="interpretations-in-agda">Interpretations in Agda</h3>
<p>As a first step, we write down what an interpretation is—and since we want to use the intepretation brackets in as many places as possible, we create a type class for it, and give <a class="Agda Field Operator">⟦_⟧</a> the least restrictive type possible:</p>
<!--
<pre class="Agda"><a id="11817" class="Keyword">open</a> <a id="11822" class="Keyword">import</a> <a id="11829" href="Level.html" class="Module">Level</a> <a id="11835" class="Keyword">using</a> <a id="11841" class="Symbol">(</a><a id="11842" href="Agda.Primitive.html#636" class="Primitive Operator">_⊔_</a><a id="11845" class="Symbol">)</a>
</pre>-->
<pre class="Agda"><a id="11859" class="Keyword">record</a> <a id="Interpret"></a><a id="11866" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Record">Interpret</a> <a id="11876" class="Symbol">{</a><a id="11877" href="2016-03-20-one-lambda-calculus-many-times.html#11877" class="Bound">a</a><a id="11878" class="Symbol">}</a> <a id="11880" class="Symbol">{</a><a id="11881" href="2016-03-20-one-lambda-calculus-many-times.html#11881" class="Bound">b</a><a id="11882" class="Symbol">}</a> <a id="11884" class="Symbol">(</a><a id="11885" href="2016-03-20-one-lambda-calculus-many-times.html#11885" class="Bound">A</a> <a id="11887" class="Symbol">:</a> <a id="11889" class="PrimitiveType">Set</a> <a id="11893" href="2016-03-20-one-lambda-calculus-many-times.html#11877" class="Bound">a</a><a id="11894" class="Symbol">)</a> <a id="11896" class="Symbol">(</a><a id="11897" href="2016-03-20-one-lambda-calculus-many-times.html#11897" class="Bound">B</a> <a id="11899" class="Symbol">:</a> <a id="11901" class="PrimitiveType">Set</a> <a id="11905" href="2016-03-20-one-lambda-calculus-many-times.html#11881" class="Bound">b</a><a id="11906" class="Symbol">)</a> <a id="11908" class="Symbol">:</a> <a id="11910" class="PrimitiveType">Set</a> <a id="11914" class="Symbol">(</a><a id="11915" href="2016-03-20-one-lambda-calculus-many-times.html#11877" class="Bound">a</a> <a id="11917" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#636" class="Primitive Operator">⊔</a> <a id="11919" href="2016-03-20-one-lambda-calculus-many-times.html#11881" class="Bound">b</a><a id="11920" class="Symbol">)</a> <a id="11922" class="Keyword">where</a>
  <a id="11930" class="Keyword">field</a>
    <a id="Interpret.⟦_⟧"></a><a id="11940" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦_⟧</a> <a id="11944" class="Symbol">:</a> <a id="11946" href="2016-03-20-one-lambda-calculus-many-times.html#11885" class="Bound">A</a> <a id="11948" class="Symbol">→</a> <a id="11950" href="2016-03-20-one-lambda-calculus-many-times.html#11897" class="Bound">B</a>
<a id="11952" class="Keyword">open</a> <a id="11957" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Module">Interpret</a> <a id="11967" class="Symbol">{{...}}</a>
</pre>
<p>Now, in order to interpret natural deduction proofs in Agda, we’ll need an interpretation for the atomic types. Below we say as much:</p>
<pre class="Agda"><a id="12119" class="Keyword">module</a> <a id="Semantics"></a><a id="12126" href="2016-03-20-one-lambda-calculus-many-times.html#12126" class="Module">Semantics</a> <a id="12136" class="Symbol">(</a><a id="12137" href="2016-03-20-one-lambda-calculus-many-times.html#12137" class="Bound">Atom</a> <a id="12142" class="Symbol">:</a> <a id="12144" class="PrimitiveType">Set</a><a id="12147" class="Symbol">)</a> <a id="12149" class="Symbol">{{</a><a id="12151" href="2016-03-20-one-lambda-calculus-many-times.html#12151" class="Bound">InterpretAtom</a> <a id="12165" class="Symbol">:</a> <a id="12167" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Record">Interpret</a> <a id="12177" href="2016-03-20-one-lambda-calculus-many-times.html#12137" class="Bound">Atom</a> <a id="12182" class="PrimitiveType">Set</a><a id="12185" class="Symbol">}}</a> <a id="12188" class="Keyword">where</a>
</pre>
<!--
<pre class="Agda">  <a id="12210" class="Keyword">open</a> <a id="12215" href="2016-03-20-one-lambda-calculus-many-times.html#1286" class="Module">Syntax</a> <a id="12222" href="2016-03-20-one-lambda-calculus-many-times.html#12137" class="Bound">Atom</a>
  <a id="12229" class="Keyword">open</a> <a id="12234" class="Keyword">import</a> <a id="12241" href="Data.Empty.html" class="Module">Data.Empty</a>           <a id="12262" class="Keyword">using</a> <a id="12268" class="Symbol">(</a><a id="12269" href="Data.Empty.html#628" class="Function">⊥-elim</a><a id="12275" class="Symbol">)</a>
  <a id="12279" class="Keyword">open</a> <a id="12284" class="Keyword">import</a> <a id="12291" href="Data.List.html" class="Module">Data.List</a>            <a id="12312" class="Keyword">using</a> <a id="12318" class="Symbol">(</a><a id="12319" href="Agda.Builtin.List.html#148" class="Datatype">List</a><a id="12323" class="Symbol">;</a> <a id="12325" href="Agda.Builtin.List.html#200" class="InductiveConstructor Operator">_∷_</a><a id="12328" class="Symbol">;</a> <a id="12330" href="Data.List.Base.html#10010" class="InductiveConstructor">[]</a><a id="12332" class="Symbol">;</a> <a id="12334" href="Data.List.Base.html#1497" class="Function">map</a><a id="12337" class="Symbol">)</a>
  <a id="12341" class="Keyword">open</a> <a id="12346" class="Keyword">import</a> <a id="12353" href="Function.html" class="Module">Function</a>             <a id="12374" class="Keyword">using</a> <a id="12380" class="Symbol">(</a><a id="12381" href="Function.Base.html#1031" class="Function Operator">_∘_</a><a id="12384" class="Symbol">)</a>
  <a id="12388" class="Keyword">open</a> <a id="12393" class="Keyword">import</a> <a id="12400" href="Function.Equality.html" class="Module">Function.Equality</a>    <a id="12421" class="Keyword">using</a> <a id="12427" class="Symbol">(</a><a id="12428" href="Function.Equality.html#1064" class="Field Operator">_⟨$⟩_</a><a id="12433" class="Symbol">)</a>
  <a id="12437" class="Keyword">open</a> <a id="12442" class="Keyword">import</a> <a id="12449" href="Function.Equivalence.html" class="Module">Function.Equivalence</a> <a id="12470" class="Keyword">using</a> <a id="12476" class="Symbol">(</a><a id="12477" class="Keyword">module</a> <a id="12484" href="Function.Equivalence.html#829" class="Module">Equivalence</a><a id="12495" class="Symbol">)</a>
  <a id="12499" class="Keyword">open</a> <a id="12504" href="Function.Equivalence.html#829" class="Module">Equivalence</a>                 <a id="12532" class="Keyword">using</a> <a id="12538" class="Symbol">(</a><a id="12539" href="Function.Equivalence.html#979" class="Field">to</a><a id="12541" class="Symbol">;</a> <a id="12543" href="Function.Equivalence.html#1000" class="Field">from</a><a id="12547" class="Symbol">)</a>

  <a id="12552" class="Keyword">open</a> <a id="12557" class="Keyword">import</a> <a id="12564" href="Data.List.Relation.Unary.Any.html" class="Module">Data.List.Relation.Unary.Any</a> <a id="12593" class="Keyword">using</a> <a id="12599" class="Symbol">(</a><a id="12600" href="Data.List.Relation.Unary.Any.html#1156" class="Datatype">Any</a><a id="12603" class="Symbol">;</a> <a id="12605" href="Data.List.Relation.Unary.Any.html#1219" class="InductiveConstructor">here</a><a id="12609" class="Symbol">;</a> <a id="12611" href="Data.List.Relation.Unary.Any.html#1272" class="InductiveConstructor">there</a><a id="12616" class="Symbol">)</a>
  <a id="12620" class="Keyword">open</a> <a id="12625" class="Keyword">import</a> <a id="12632" href="Data.List.Membership.Propositional.html" class="Module">Data.List.Membership.Propositional</a> <a id="12667" class="Keyword">using</a> <a id="12673" class="Symbol">(</a><a id="12674" href="Data.List.Membership.Setoid.html#887" class="Function Operator">_∈_</a><a id="12677" class="Symbol">)</a>
  <a id="12681" class="Keyword">open</a> <a id="12686" class="Keyword">import</a> <a id="12693" href="Data.List.Relation.Sublist.Propositional.html" class="Module">Data.List.Relation.Sublist.Propositional</a> <a id="12734" class="Keyword">using</a> <a id="12740" class="Symbol">(</a><a id="12741" href="Data.List.Relation.Binary.Sublist.Setoid.html#1349" class="Function Operator">_⊆_</a><a id="12744" class="Symbol">)</a>
  <a id="12748" class="Keyword">open</a> <a id="12753" class="Keyword">import</a> <a id="12760" href="Relation.Binary.PropositionalEquality.html" class="Module">Relation.Binary.PropositionalEquality</a> <a id="12798" class="Keyword">using</a> <a id="12804" class="Symbol">(</a><a id="12805" href="Agda.Builtin.Equality.html#151" class="Datatype Operator">_≡_</a><a id="12808" class="Symbol">;</a> <a id="12810" href="Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a><a id="12814" class="Symbol">)</a>
</pre>-->
<p>Unsurprisingly, we interpret the implication as Agda’s function type:</p>
<pre class="Agda">  <a id="12902" class="Keyword">instance</a>
    <a id="Semantics.InterpretType"></a><a id="12915" href="2016-03-20-one-lambda-calculus-many-times.html#12915" class="Function">InterpretType</a> <a id="12929" class="Symbol">:</a> <a id="12931" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Record">Interpret</a> <a id="12941" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="12946" class="PrimitiveType">Set</a>
    <a id="12954" href="2016-03-20-one-lambda-calculus-many-times.html#12915" class="Function">InterpretType</a> <a id="12968" class="Symbol">=</a> <a id="12970" class="Keyword">record</a> <a id="12977" class="Symbol">{</a> <a id="12979" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦_⟧</a> <a id="12983" class="Symbol">=</a> <a id="12985" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟦_⟧′</a> <a id="12990" class="Symbol">}</a>
      <a id="12998" class="Keyword">where</a>
        <a id="13012" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟦_⟧′</a>  <a id="13018" class="Symbol">:</a> <a id="13020" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="13025" class="Symbol">→</a> <a id="13027" class="PrimitiveType">Set</a>
        <a id="13039" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟦</a> <a id="13041" href="2016-03-20-one-lambda-calculus-many-times.html#2374" class="InductiveConstructor">El</a>  <a id="13045" href="2016-03-20-one-lambda-calculus-many-times.html#13045" class="Bound">A</a> <a id="13047" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟧′</a> <a id="13050" class="Symbol">=</a> <a id="13052" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="13054" href="2016-03-20-one-lambda-calculus-many-times.html#13045" class="Bound">A</a> <a id="13056" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a>
        <a id="13066" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟦</a> <a id="13068" href="2016-03-20-one-lambda-calculus-many-times.html#13068" class="Bound">A</a> <a id="13070" href="2016-03-20-one-lambda-calculus-many-times.html#2396" class="InductiveConstructor Operator">⇒</a> <a id="13072" href="2016-03-20-one-lambda-calculus-many-times.html#13072" class="Bound">B</a> <a id="13074" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟧′</a> <a id="13077" class="Symbol">=</a> <a id="13079" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟦</a> <a id="13081" href="2016-03-20-one-lambda-calculus-many-times.html#13068" class="Bound">A</a> <a id="13083" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟧′</a> <a id="13086" class="Symbol">→</a> <a id="13088" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟦</a> <a id="13090" href="2016-03-20-one-lambda-calculus-many-times.html#13072" class="Bound">B</a> <a id="13092" href="2016-03-20-one-lambda-calculus-many-times.html#13012" class="Function Operator">⟧′</a>
</pre>
<p>In order to interpret sequents, we’ll need an interpretation for the antecedent. For this we’ll create a type for <em>environments</em>, <a class="Agda Datatype">Env</a>, which is indexed by a list of types, and which stores values of the <em>interpretations</em> of those types:</p>
<pre class="Agda">  <a id="13373" class="Keyword">infixr</a> <a id="13380" class="Number">5</a> <a id="13382" href="2016-03-20-one-lambda-calculus-many-times.html#13443" class="InductiveConstructor Operator">_∷_</a>

  <a id="13389" class="Keyword">data</a> <a id="Semantics.Env"></a><a id="13394" href="2016-03-20-one-lambda-calculus-many-times.html#13394" class="Datatype">Env</a> <a id="13398" class="Symbol">:</a> <a id="13400" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#148" class="Datatype">List</a> <a id="13405" href="2016-03-20-one-lambda-calculus-many-times.html#2353" class="Datatype">Type</a> <a id="13410" class="Symbol">→</a> <a id="13412" class="PrimitiveType">Set</a> <a id="13416" class="Keyword">where</a>
    <a id="Semantics.Env.[]"></a><a id="13426" href="2016-03-20-one-lambda-calculus-many-times.html#13426" class="InductiveConstructor">[]</a>  <a id="13430" class="Symbol">:</a> <a id="13432" href="2016-03-20-one-lambda-calculus-many-times.html#13394" class="Datatype">Env</a> <a id="13436" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#185" class="InductiveConstructor">[]</a>
    <a id="Semantics.Env._∷_"></a><a id="13443" href="2016-03-20-one-lambda-calculus-many-times.html#13443" class="InductiveConstructor Operator">_∷_</a> <a id="13447" class="Symbol">:</a> <a id="13449" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="13451" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="13453" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a> <a id="13455" class="Symbol">→</a> <a id="13457" href="2016-03-20-one-lambda-calculus-many-times.html#13394" class="Datatype">Env</a> <a id="13461" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="13463" class="Symbol">→</a> <a id="13465" href="2016-03-20-one-lambda-calculus-many-times.html#13394" class="Datatype">Env</a> <a id="13469" class="Symbol">(</a><a id="13470" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="13472" href="https://agda.github.io/agda-stdlib/Agda.Builtin.List.html#200" class="InductiveConstructor Operator">∷</a> <a id="13474" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a><a id="13475" class="Symbol">)</a>
</pre>
<p>Using this, we can interpret sequents as functions from environments to values:</p>
<pre class="Agda">  <a id="13569" class="Keyword">instance</a>
    <a id="Semantics.InterpretSequent"></a><a id="13582" href="2016-03-20-one-lambda-calculus-many-times.html#13582" class="Function">InterpretSequent</a> <a id="13599" class="Symbol">:</a> <a id="13601" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Record">Interpret</a> <a id="13611" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a> <a id="13619" class="PrimitiveType">Set</a>
    <a id="13627" href="2016-03-20-one-lambda-calculus-many-times.html#13582" class="Function">InterpretSequent</a> <a id="13644" class="Symbol">=</a> <a id="13646" class="Keyword">record</a> <a id="13653" class="Symbol">{</a> <a id="13655" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦_⟧</a> <a id="13659" class="Symbol">=</a> <a id="13661" href="2016-03-20-one-lambda-calculus-many-times.html#13688" class="Function Operator">⟦_⟧′</a> <a id="13666" class="Symbol">}</a>
      <a id="13674" class="Keyword">where</a>
        <a id="13688" href="2016-03-20-one-lambda-calculus-many-times.html#13688" class="Function Operator">⟦_⟧′</a> <a id="13693" class="Symbol">:</a> <a id="13695" href="2016-03-20-one-lambda-calculus-many-times.html#3787" class="Datatype">Sequent</a> <a id="13703" class="Symbol">→</a> <a id="13705" class="PrimitiveType">Set</a>
        <a id="13717" href="2016-03-20-one-lambda-calculus-many-times.html#13688" class="Function Operator">⟦</a> <a id="13719" href="2016-03-20-one-lambda-calculus-many-times.html#13719" class="Bound">Γ</a> <a id="13721" href="2016-03-20-one-lambda-calculus-many-times.html#3811" class="InductiveConstructor Operator">⊢</a> <a id="13723" href="2016-03-20-one-lambda-calculus-many-times.html#13723" class="Bound">A</a> <a id="13725" href="2016-03-20-one-lambda-calculus-many-times.html#13688" class="Function Operator">⟧′</a> <a id="13728" class="Symbol">=</a> <a id="13730" href="2016-03-20-one-lambda-calculus-many-times.html#13394" class="Datatype">Env</a> <a id="13734" href="2016-03-20-one-lambda-calculus-many-times.html#13719" class="Bound">Γ</a> <a id="13736" class="Symbol">→</a> <a id="13738" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="13740" href="2016-03-20-one-lambda-calculus-many-times.html#13723" class="Bound">A</a> <a id="13742" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a>
</pre>
<p>Let’s get to interpreting terms! First off, variables. We can interpret variables simply by looking them up in the environment:</p>
<pre class="Agda">  <a id="Semantics.lookup"></a><a id="13884" href="2016-03-20-one-lambda-calculus-many-times.html#13884" class="Function">lookup</a> <a id="13891" class="Symbol">:</a> <a id="13893" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="13895" href="https://agda.github.io/agda-stdlib/Data.List.Membership.Setoid.html#887" class="Function Operator">∈</a> <a id="13897" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="13899" class="Symbol">→</a> <a id="13901" href="2016-03-20-one-lambda-calculus-many-times.html#13394" class="Datatype">Env</a> <a id="13905" href="2016-03-20-one-lambda-calculus-many-times.html#5284" class="Generalizable">Γ</a> <a id="13907" class="Symbol">→</a> <a id="13909" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="13911" href="2016-03-20-one-lambda-calculus-many-times.html#5260" class="Generalizable">A</a> <a id="13913" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a>
  <a id="13917" href="2016-03-20-one-lambda-calculus-many-times.html#13884" class="Function">lookup</a> <a id="13924" class="Symbol">(</a><a id="13925" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1219" class="InductiveConstructor">here</a> <a id="13930" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a><a id="13934" class="Symbol">)</a> <a id="13936" class="Symbol">(</a><a id="13937" href="2016-03-20-one-lambda-calculus-many-times.html#13937" class="Bound">x</a> <a id="13939" href="2016-03-20-one-lambda-calculus-many-times.html#13443" class="InductiveConstructor Operator">∷</a> <a id="13941" class="Symbol">_)</a> <a id="13944" class="Symbol">=</a> <a id="13946" href="2016-03-20-one-lambda-calculus-many-times.html#13937" class="Bound">x</a>
  <a id="13950" href="2016-03-20-one-lambda-calculus-many-times.html#13884" class="Function">lookup</a> <a id="13957" class="Symbol">(</a><a id="13958" href="https://agda.github.io/agda-stdlib/Data.List.Relation.Unary.Any.html#1272" class="InductiveConstructor">there</a> <a id="13964" href="2016-03-20-one-lambda-calculus-many-times.html#13964" class="Bound">A∈Γ</a><a id="13967" class="Symbol">)</a> <a id="13969" class="Symbol">(_</a> <a id="13972" href="2016-03-20-one-lambda-calculus-many-times.html#13443" class="InductiveConstructor Operator">∷</a> <a id="13974" href="2016-03-20-one-lambda-calculus-many-times.html#13974" class="Bound">e</a><a id="13975" class="Symbol">)</a> <a id="13977" class="Symbol">=</a> <a id="13979" href="2016-03-20-one-lambda-calculus-many-times.html#13884" class="Function">lookup</a> <a id="13986" href="2016-03-20-one-lambda-calculus-many-times.html#13964" class="Bound">A∈Γ</a> <a id="13990" href="2016-03-20-one-lambda-calculus-many-times.html#13974" class="Bound">e</a>
</pre>
<p>(If you’re wondering what we’re rewriting by: the <a class="Agda InductiveConstructor">here</a> constructor carries a small proof that the element at the top of the list is <em>really</em> the element you were looking for.)</p>
<p>The translation for natural deduction proofs is, of course, completely routine—we translate variables withs lookups, introductions by abstractions and eliminations by applications:</p>
<pre class="Agda">  <a id="14406" class="Keyword">instance</a>
    <a id="Semantics.InterpretND"></a><a id="14419" href="2016-03-20-one-lambda-calculus-many-times.html#14419" class="Function">InterpretND</a> <a id="14431" class="Symbol">:</a> <a id="14433" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Record">Interpret</a> <a id="14443" class="Symbol">(</a><a id="14444" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="14447" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a><a id="14448" class="Symbol">)</a> <a id="14450" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="14452" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a> <a id="14454" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a>
    <a id="14460" href="2016-03-20-one-lambda-calculus-many-times.html#14419" class="Function">InterpretND</a> <a id="14472" class="Symbol">=</a> <a id="14474" class="Keyword">record</a> <a id="14481" class="Symbol">{</a> <a id="14483" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦_⟧</a> <a id="14487" class="Symbol">=</a> <a id="14489" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦_⟧′</a> <a id="14494" class="Symbol">}</a>
      <a id="14502" class="Keyword">where</a>
        <a id="14516" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦_⟧′</a> <a id="14521" class="Symbol">:</a> <a id="14523" href="2016-03-20-one-lambda-calculus-many-times.html#5490" class="Datatype Operator">ND</a> <a id="14526" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a> <a id="14528" class="Symbol">→</a> <a id="14530" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="14532" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a> <a id="14534" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a>
        <a id="14544" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦</a> <a id="14546" href="2016-03-20-one-lambda-calculus-many-times.html#5520" class="InductiveConstructor">ax</a> <a id="14549" href="2016-03-20-one-lambda-calculus-many-times.html#14549" class="Bound">p</a>   <a id="14553" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟧′</a> <a id="14556" href="2016-03-20-one-lambda-calculus-many-times.html#14556" class="Bound">e</a> <a id="14558" class="Symbol">=</a> <a id="14560" href="2016-03-20-one-lambda-calculus-many-times.html#13884" class="Function">lookup</a> <a id="14567" href="2016-03-20-one-lambda-calculus-many-times.html#14549" class="Bound">p</a> <a id="14569" href="2016-03-20-one-lambda-calculus-many-times.html#14556" class="Bound">e</a>
        <a id="14579" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦</a> <a id="14581" href="2016-03-20-one-lambda-calculus-many-times.html#5546" class="InductiveConstructor">⇒i</a> <a id="14584" href="2016-03-20-one-lambda-calculus-many-times.html#14584" class="Bound">f</a>   <a id="14588" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟧′</a> <a id="14591" href="2016-03-20-one-lambda-calculus-many-times.html#14591" class="Bound">e</a> <a id="14593" class="Symbol">=</a> <a id="14595" class="Symbol">λ</a> <a id="14597" href="2016-03-20-one-lambda-calculus-many-times.html#14597" class="Bound">x</a> <a id="14599" class="Symbol">→</a> <a id="14601" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦</a> <a id="14603" href="2016-03-20-one-lambda-calculus-many-times.html#14584" class="Bound">f</a> <a id="14605" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟧′</a> <a id="14608" class="Symbol">(</a><a id="14609" href="2016-03-20-one-lambda-calculus-many-times.html#14597" class="Bound">x</a> <a id="14611" href="2016-03-20-one-lambda-calculus-many-times.html#13443" class="InductiveConstructor Operator">∷</a> <a id="14613" href="2016-03-20-one-lambda-calculus-many-times.html#14591" class="Bound">e</a><a id="14614" class="Symbol">)</a>
        <a id="14624" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦</a> <a id="14626" href="2016-03-20-one-lambda-calculus-many-times.html#5583" class="InductiveConstructor">⇒e</a> <a id="14629" href="2016-03-20-one-lambda-calculus-many-times.html#14629" class="Bound">f</a> <a id="14631" href="2016-03-20-one-lambda-calculus-many-times.html#14631" class="Bound">g</a> <a id="14633" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟧′</a> <a id="14636" href="2016-03-20-one-lambda-calculus-many-times.html#14636" class="Bound">e</a> <a id="14638" class="Symbol">=</a> <a id="14640" class="Symbol">(</a><a id="14641" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦</a> <a id="14643" href="2016-03-20-one-lambda-calculus-many-times.html#14629" class="Bound">f</a> <a id="14645" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟧′</a> <a id="14648" href="2016-03-20-one-lambda-calculus-many-times.html#14636" class="Bound">e</a><a id="14649" class="Symbol">)</a> <a id="14651" class="Symbol">(</a><a id="14652" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟦</a> <a id="14654" href="2016-03-20-one-lambda-calculus-many-times.html#14631" class="Bound">g</a> <a id="14656" href="2016-03-20-one-lambda-calculus-many-times.html#14516" class="Function Operator">⟧′</a> <a id="14659" href="2016-03-20-one-lambda-calculus-many-times.html#14636" class="Bound">e</a><a id="14660" class="Symbol">)</a>
</pre>
<p>Hooray! And even better, as a corollary, we immediately obtain a translation from sequent calculus into Agda:</p>
<pre class="Agda">  <a id="14785" class="Keyword">instance</a>
    <a id="Semantics.InterpretSC"></a><a id="14798" href="2016-03-20-one-lambda-calculus-many-times.html#14798" class="Function">InterpretSC</a> <a id="14810" class="Symbol">:</a> <a id="14812" href="2016-03-20-one-lambda-calculus-many-times.html#11866" class="Record">Interpret</a> <a id="14822" class="Symbol">(</a><a id="14823" href="2016-03-20-one-lambda-calculus-many-times.html#9383" class="Datatype Operator">SC</a> <a id="14826" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a><a id="14827" class="Symbol">)</a> <a id="14829" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦</a> <a id="14831" href="2016-03-20-one-lambda-calculus-many-times.html#5313" class="Generalizable">S</a> <a id="14833" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟧</a>
    <a id="14839" href="2016-03-20-one-lambda-calculus-many-times.html#14798" class="Function">InterpretSC</a> <a id="14851" class="Symbol">=</a> <a id="14853" class="Keyword">record</a> <a id="14860" class="Symbol">{</a> <a id="14862" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦_⟧</a> <a id="14866" class="Symbol">=</a> <a id="14868" href="2016-03-20-one-lambda-calculus-many-times.html#11940" class="Field Operator">⟦_⟧</a> <a id="14872" href="https://agda.github.io/agda-stdlib/Function.Base.html#1031" class="Function Operator">∘</a> <a id="14874" href="2016-03-20-one-lambda-calculus-many-times.html#10204" class="Function">ND⇔SC.⟸</a> <a id="14882" class="Symbol">}</a>
</pre>
<p>Which means that we’ve now implemented the following functions:</p>
<p><span class="math display">
    \begin{array}{ccc}
    ND &amp; \rightarrow &amp; Agda \\
                            \\
    \updownarrow            \\
                            \\
    SC                      \\
    \end{array}
</span></p>
<p>If you are looking for more reading on this topic, I can recommend the highly readible <em><a href="http://journals.cambridge.org/action/displayAbstract?fromPage=online&amp;aid=44279#">Lambda terms for natural deduction, sequent calculus and cut elimination</a></em> by Henk Barendregt and Silvia Ghilezan.</p>
<p>Next time, I’ll talk about Gentzen’s LJ, which has explicit structural rules, and variations which use other, non-list structures as the antecedent.</p>
<hr />
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>This is a good time to note that I’m not showing any of the import statements. If you wish to see them, they’re there in the HTML source. However, it may be much easier to click the symbol that confuses you—that should take you directly to its definition in the standard library.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Sun, 20 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2016-03-20-one-lambda-calculus-many-times.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Constraint Grammar can count!</title>
    <link>http://wen.works/posts/2016-03-16-constraint-grammar-can-count.html</link>
    <description><![CDATA[<p>Constraint grammar—it is a natural language processing formalism with great two distinctions: it routinely scores amongst the highest in tasks such as part-of-speech tagging and word-sense disambiguation, with F-scores at around 99%; and it has made some of the most dubious choices in programming language syntax in history. Though its specification has changed tremendously since CG1, it is nontheless a grammar formalism which sees a lot of usage. One natural question to ask of any grammar formalism is “how expressive is it?”</p>
<p>Over the weekend, <a href="https://github.com/inariksit">inariksit</a> visited me, and we decided to find out!</p>
<!--more-->
<p>It’s not immediately obvious how to even approach this question, as constraint grammar doesn’t <em>generate</em> strings per se. It simply <em>constrains</em> existing, ambiguous strings. We took the following approach: we view a constraint grammar as a formal language <span class="math inline">\mathcal{L}</span>, generated over an alphabet <span class="math inline">\Sigma</span>. We generate the strings in our language by passing maximally ambiguous strings of <em>every</em> length to the grammar. With maximally ambiguous, I mean those strings where each position contains the entire alphabet, so <span class="math inline">\langle \Sigma \rangle_n</span>. A constraint grammar is said to <em>accept</em> a string <span class="math inline">w</span> of length <span class="math inline">n</span> if, when we pass <span class="math inline">\langle \Sigma \rangle_n</span> as an input to the CG, <span class="math inline">w</span> is one of the possible interpretations of its output.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>The specification of CG3 mentions tags such as <code>EXTERNAL</code>, which passes information to an external command. So constraint grammar is obviously Turing complete. However, that’s a little bit boring, so let’s see what we can say about the expressiveness of the absolute core of constraint grammar: <code>REMOVE</code> with sections. If we leave out sections, there is no recursion, and therefore the language will be strictly finite and boring. If we leave out <code>REMOVE</code> then there is no way to restrict strings, so we’d only have the languages <span class="math inline">\Sigma^*</span> for any <span class="math inline">\Sigma</span>.</p>
<p>There are a few concessions we will allow ourselves. If we had <code>MAP</code>, <code>ADD</code>, or any such other command, we would have a way to store information. In this strict fragment, all we have is the current set of symbol assignments. Therefore, we will allow ourselves a second alphabet <span class="math inline">\Sigma\prime</span> of <em>hidden</em> symbols—i.e. symbols that we are not allowed to pass to the output. In addition, we update our definition of <span class="math inline">\mathcal{L}</span> to state that we pass in <span class="math inline">\langle \Sigma \cup \Sigma\prime \rangle_n</span>. This is not <em>strictly</em> necessary in CG3, as we could use <code>APPEND</code> to add these hidden characters, but we would like to stay as faithful to our fragment as possible.</p>
<p>One last hurdle is that constraint grammar has no notion of <em>failure</em>. The worst that can happen is that a grammar changes nothing. Worse so, if there is only one reading left, the <code>REMOVE</code> command will have no effect. So one more concession we make is that we allow ourselves to use the <code>REMCOHORT</code> command—which removes an entire “cohort”, or “position” in our terminology—for the <em>sole purpose</em> of deleting the entire string if it is not accepted.</p>
<p>From here on out, when we say ‘CG3’, we are referring to this fragment of constraint grammar.</p>
<h3 id="cg3-is-not-regular-the-language-anbn">CG3 is not regular; the language <span class="math inline">a^nb^n</span></h3>
<p>In this section we show that CG3, restricted to sections and <code>REMOVE</code> is not regular. We show this by implementing a grammar for the counting language <span class="math inline">a^nb^n</span>.</p>
<p>The first thing we do is to try and detect the edges of the string. CG3 has “magical” constants for this, called <code>&gt;&gt;&gt;</code> and <code>&lt;&lt;&lt;</code> for the left and right edge, respectively. However, we cannot use those. Instead, we define them ourselves using two hidden variables, which we also call <code>&gt;&gt;&gt;</code> and <code>&lt;&lt;&lt;</code>. We do this as follows:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>SET ANY <span class="op">=</span> A OR B<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>REMOVE <span class="op">&gt;&gt;&gt;</span> (<span class="op">-</span><span class="dv">1</span> ANY)<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>REMOVE <span class="op">&lt;&lt;&lt;</span> ( <span class="dv">1</span> ANY)<span class="op">;</span></span></code></pre></div>
<p>Initially, all positions will be labeled with both <code>&gt;&gt;&gt;</code> and <code>&lt;&lt;&lt;</code>. These above rules check whether there is <em>any</em> position preceding or succeeding the current position, and if so, delete <code>&gt;&gt;&gt;</code> or <code>&lt;&lt;&lt;</code>. As a result, the first position will be the only one tagged <code>&gt;&gt;&gt;</code>, and the last the only one tagged <code>&lt;&lt;&lt;</code>.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>Next, we note that <em>all</em> strings in the language <span class="math inline">a^nb^n</span> are of even length, and that every even length corresponds to <em>exactly</em> one string. Therefore, we must reject all strings of uneven length. We assume two more hidden symbols, <code>EVEN</code> and <code>ODD</code>. We can use these to label whether a position is even or odd: we know the first position is odd, so we delete <code>EVEN</code>; we know that positions following odd positions must be even, so we delete <code>ODD</code>; and we know that positions following even positions are <code>ODD</code>, so we delete <code>EVEN</code>…<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>REMOVE EVEN (<span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span>)<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>SECTION</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>REMOVE ODD  (NOT  <span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span> LINK NOT <span class="op">-</span><span class="dv">1</span> EVEN)<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>REMOVE EVEN (NOT <span class="op">-</span><span class="dv">1</span> ODD)<span class="op">;</span></span></code></pre></div>
<p>It’s exactly this “marking as even by deleting odd” that makes it a bit of a confusing read, so if you’d like to play around with an example, <a href="https://gist.github.com/wenkokke/e5f76d82939ecc9d3a4c">my full code with examples is available here</a>, and <a href="http://beta.visl.sdu.dk/cg3/chunked/installation.html">vislcg3 is available here</a>.</p>
<p>Anyway, after performing this labelling, we can check if the last position is even, and if so, delete all positions:<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>AFTER<span class="op">-</span>SECTIONS</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>REMCOHORT ANY (<span class="dv">1</span><span class="op">*</span> <span class="op">&lt;&lt;&lt;</span> LINK NOT <span class="dv">0</span> EVEN)<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>REMCOHORT <span class="op">&lt;&lt;&lt;</span> (NOT <span class="dv">0</span> EVEN)<span class="op">;</span></span></code></pre></div>
<p>Now that we are certain that we only accept even-length strings, it is safe to say that the first symbol must be an <span class="math inline">a</span>, and the last must be a <span class="math inline">b</span>:<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>SELECT A (<span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span>)<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>SELECT B (<span class="dv">0</span> <span class="op">&lt;&lt;&lt;</span>)<span class="op">;</span></span></code></pre></div>
<p>And now it’s only a matter of slowly growing these <span class="math inline">a</span>s and <span class="math inline">b</span>s until they meet. We do this as follows: in each pass, we mark the position <em>after</em> the last definite <span class="math inline">a</span> as a candidate for <span class="math inline">a</span> (written <code>OPT_A</code>), and do likewise for the last position <em>before</em> the first definite <span class="math inline">b</span>. Then we mark each candidate <span class="math inline">a</span> and <span class="math inline">b</span> as <em>definite</em>, and we continue:<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>SECTION</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_B (<span class="op">-</span><span class="dv">1</span>C A)<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_A ( <span class="dv">1</span>C B)<span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>SELECT A (NOT <span class="dv">0</span> OPT_B)<span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>SELECT B (NOT <span class="dv">0</span> OPT_A)<span class="op">;</span></span></code></pre></div>
<p>The grammar described so far exactly expresses the language <span class="math inline">a^nb^n</span>.<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a> Since this language is not regular, we can conclude that constraint grammar is not regular.</p>
<h3 id="cg3-is-not-context-free-the-language-anbncn">CG3 is not context-free; the language <span class="math inline">a^nb^nc^n</span></h3>
<p>In this section we show that CG3, restricted to sections and <code>REMOVE</code> is not context-free. We show this by implementing a grammar for the counting language <span class="math inline">a^nb^nc^n</span>.</p>
<p>The language <span class="math inline">a^nb^nc^n</span> has us divide strings whose length is a multiple of three into three even chunks. The first part of this is obviously to find the bounds of the input string, as before, and make sure that it has a length divisible by three. We can trivially extend our previous approach—now abandoning “even” and “odd” in favour of <code>X1</code>, <code>X2</code> and <code>X3</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>SET X1_OR_X2 <span class="op">=</span> X1 OR X2<span class="op">;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>SET X2_OR_X3 <span class="op">=</span> X2 OR X3<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>SET X3_OR_X1 <span class="op">=</span> X3 OR X1<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>REMOVE X2_OR_X3 (<span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span>)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>SECTION</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>REMOVE X3_OR_X1 (NOT <span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span> LINK NOT <span class="op">-</span><span class="dv">1</span> X2_OR_X3)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>REMOVE X1_OR_X2 (NOT <span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span> LINK NOT <span class="op">-</span><span class="dv">1</span> X3_OR_X1)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>REMOVE X2_OR_X3 (NOT <span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span> LINK NOT <span class="op">-</span><span class="dv">1</span> X1_OR_X2)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>AFTER<span class="op">-</span>SECTIONS</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>REMCOHORT ANY (<span class="dv">1</span><span class="op">*</span> <span class="op">&lt;&lt;&lt;</span> LINK NOT <span class="dv">0</span> X3)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>REMCOHORT <span class="op">&lt;&lt;&lt;</span> (NOT <span class="dv">0</span> X3)</span></code></pre></div>
<p>Note that, somewhat counterintuitively, <code>REMOVE X1_OR_X2</code><a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a> removes <em>both</em> <code>X1</code> and <code>X2</code>, but <code>0 X1_OR_X2</code> matches if the current position still has either option.</p>
<p>Now that we can be sure that our string is of some length <span class="math inline">3n</span>, we can proceed to divide it into three equal chunks. One good way to do this, is to start by finding the middle. This is <em>exactly</em> what we did in our grammar for <span class="math inline">a^nb^n</span>. Below we implement the same, but now <em>without</em> using <code>SELECT</code>, as using this would erase all other tags. For this, we assume four new hidden symbols <code>FST</code>, <code>SND</code>—for first and second half—and <code>OPT_*</code> varieties:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>SET NOT_FST <span class="op">=</span> OPT_FST OR SND OR OPT_SND <span class="op">;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>SET NOT_SND <span class="op">=</span> FST OR OPT_FST OR OPT_SND <span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>REMOVE NOT_FST (<span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span>)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>REMOVE NOT_SND (<span class="dv">0</span> <span class="op">&lt;&lt;&lt;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>SECTION</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_SND (<span class="op">-</span><span class="dv">1</span> FST LINK (NOT <span class="dv">0</span> NOT_FST))</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_FST ( <span class="dv">1</span> SND LINK (NOT <span class="dv">0</span> NOT_SND))</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>REMOVE NOT_FST (<span class="dv">0</span> FST LINK <span class="dv">0</span> SND LINK <span class="dv">0</span> OPT_FST LINK NOT <span class="dv">0</span> OPT_SND)</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>REMOVE NOT_SND (<span class="dv">0</span> FST LINK <span class="dv">0</span> SND LINK <span class="dv">0</span> OPT_SND LINK NOT <span class="dv">0</span> OPT_FST)</span></code></pre></div>
<p>Once we’ve divided the word in half, it becomes fairly easy to point out the middle. Below, we mark the first position as <span class="math inline">a</span>, the last position as <span class="math inline">c</span> and the middle position as <span class="math inline">b</span>:<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a></p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>SET OPT_A_OR_B <span class="op">=</span> (OPT_A OR OPT_B)<span class="op">;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>SET OPT_B_OR_C <span class="op">=</span> (OPT_A OR OPT_B)<span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>SET OPT_C_OR_D <span class="op">=</span> (OPT_A OR OPT_B)<span class="op">;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>BEFORE<span class="op">-</span>SECTIONS</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_B_OR_C (<span class="dv">0</span> <span class="op">&gt;&gt;&gt;</span>)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_A_OR_B (<span class="dv">0</span> <span class="op">&lt;&lt;&lt;</span>)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>SECTION</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_C_OR_A (<span class="dv">0</span> FST LINK  <span class="dv">1</span> SND LINK NOT <span class="dv">0</span> FST)</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_C_OR_A (<span class="dv">0</span> SND LINK <span class="op">-</span><span class="dv">1</span> FST LINK NOT <span class="dv">0</span> SND)</span></code></pre></div>
<p>And finally, we grow <span class="math inline">a</span> and <span class="math inline">b</span>, and <span class="math inline">b</span> and <span class="math inline">c</span> towards one another as we did before. Note that we have to let <span class="math inline">a</span> and <span class="math inline">c</span> grow twice every time we grow <span class="math inline">b</span>, because <span class="math inline">b</span> is growing in <em>two</em> directions at the same time:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>SECTION</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_B_OR_C (<span class="op">-</span><span class="dv">1</span>C A)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_A_OR_B ( <span class="dv">1</span>C C)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>SELECT A (<span class="dv">0</span> OPT_A LINK NOT <span class="dv">0</span> OPT_B_OR_C)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>SELECT C (<span class="dv">0</span> OPT_C LINK NOT <span class="dv">0</span> OPT_A_OR_B)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_C_OR_A ( <span class="dv">1</span>C B)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_C_OR_A (<span class="op">-</span><span class="dv">1</span>C B)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>SELECT B (<span class="dv">0</span> OPT_B LINK NOT <span class="dv">0</span> OPT_C_OR_A)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_B_OR_C (<span class="op">-</span><span class="dv">1</span>C A)</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>REMOVE OPT_A_OR_B ( <span class="dv">1</span>C C)</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>SELECT A (<span class="dv">0</span> OPT_A LINK NOT <span class="dv">0</span> OPT_B_OR_C)</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>SELECT C (<span class="dv">0</span> OPT_C LINK NOT <span class="dv">0</span> OPT_A_OR_B)</span></code></pre></div>
<p>The grammar described so far exactly expresses the language <span class="math inline">a^nb^nc^n</span>. Since this language is not context-free, we can conclude that constraint grammar is not context-free.</p>
<h3 id="beyond-context-free">Beyond Context-Free</h3>
<p>It seems pretty obvious that a language formalism whose only construct has the power to observe <em>all</em> of its surrounding context ends up being at least context-sensitive. I could continue. It is still fairly straightforward to generate the language <span class="math inline">a^nb^nc^nd^n</span>—divide into half, and divide halves into half—and using similar strategies, you can keep on constructing CGs which compute the counting language <span class="math inline">\sigma_1^n\cdots \sigma_k^n</span> for any <span class="math inline">k</span> as long as you can come up with new strategies for prime numbers.. but this won’t do us a whole lot of good—at least, it won’t help us escape the class of context-sensitive languages.</p>
<p>So for now, let’s leave it at this. I’m a little bored of programming CG at any rate. If you want to have a go, <a href="https://gist.github.com/wenkokke/e5f76d82939ecc9d3a4c">my full code and examples are available here</a>, and <a href="http://beta.visl.sdu.dk/cg3/chunked/installation.html">vislcg3 is available here</a>.</p>
<hr />
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>An obvious downside to this approach is that for finite languages (as well as infinite ones, but duh) the CG will never stop generating the language, as we have to feed it <span class="math inline">\langle \Sigma \rangle_n</span> <em>for every <span class="math inline">n</span></em>. But we’re playing fast and loose here, so what gives.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>CG3’s magic constants are just outside of the string, whereas ours are right at the edge of the string. Therefore, all indices using magic constants are moved by one.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>While we use <code>BEFORE-SECTIONS</code> and <code>AFTER-SECTIONS</code> throughout this post, their usage is not strictly necessary. The grammar also works if everything is executed under a single <code>SECTION</code>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>Note that <code>LINK</code> is a conjunction, but one in which indices in the <em>second</em> argument are interpreted from the perspective of the position matched in the first.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>We have chosen to describe faillure by outputting the empty string. If we would have been more careful, we could have added a dedicated symbol for failure. However, under our current definitions we compare languages <em>minus</em> the empty string.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>We can use <code>SELECT</code>, since it is equivalent to calling <code>REMOVE</code> with the complement—i.e. remove everything <em>but</em> its argument.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>Note that <code>SELECT A</code> has no effect if <span class="math inline">a</span> is not a valid option, and that <code>REMOVE A</code> has no effect if <span class="math inline">a</span> is the <em>only</em> remaining option.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p>We have chosen to describe faillure by outputting the empty string. If we would have been more careful, we could have added a dedicated symbol for failure. However, under our current definitions we compare languages <em>minus</em> the empty string.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9" role="doc-endnote"><p>When we write <code>X_OR_Y</code>, this means that we have defined a “set” as <code>SET X1_OR_X2 = X1 OR X2;</code>. The reason for this is that CG3 does not allow the <em>inline</em> use of set primitives.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10" role="doc-endnote"><p>If the string has an even-numbered length, we in fact mark the middle <em>two</em> positions as <span class="math inline">b</span>.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Wed, 16 Mar 2016 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2016-03-16-constraint-grammar-can-count.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Side-effects in English</title>
    <link>http://wen.works/posts/2016-03-09-side-effects-in-english.html</link>
    <description><![CDATA[<p>Back when I wrote this, I had just discovered <a href="http://okmij.org/ftp/Haskell/extensible/">“Extensible Effects: an alternative to Monad Transformers”</a> by Oleg Kiselyov, Amr Sabry, Cameron Swords, and Hiromi Ishii, and I’ve always had a penchant for mucking about with linguistics and Haskell… so… let’s have a little fun with this library and some basic AB grammars in Haskell, see how far we can get within the universally well-defined maximum length of a blog post!</p>
<!--more-->
<p>Before we start, let’s get a clear idea of what we’re going to try and accomplish. It’s more or less a well known fact that natural language has tons of side-effects—sometimes also referred to as “non-compositional phenomena”. Let’s look at some examples:</p>
<ol type="1">
<li>“I cooked up a delicious dinner!”</li>
<li>“There! I walked the damn dog!”</li>
<li>“As Mary left, she whistled a cheery tune.”</li>
</ol>
<p>In (1), the word “I” is non-compositional: it’s a word which you can always use, but which changes its meaning depending on the context—on who uses it. In (2) we have the word “damn”, an expressive. There’s pretty extensive literature on expressives—see, for instance, Daniel Gutzmann’s <a href="http://www.danielgutzmann.com/work/use-conditional-meaning">“Use-conditional meaning”</a>—but the gist of it is as follows: “damn” doesn’t affect the <em>truth</em> of a sentence. If I come back from walking the dog, even though I do not like dogs, and say “There! I walked the damn dog!”, you can’t reply by saying “No, you didn’t! The dog is nice!” Instead, “damn” conveys it’s meaning on some sort of side-channel. Finally, in (3) we have “she”, which again has a context-dependent meaning. However, in this situation, “she” doesn’t get its meaning from the context in which the sentence is uttered. Instead, reading this sentence in isolation, it seems pretty likely that “she” refers to Mary.</p>
<p>“Non-compositional phenomena” is a bit of a misnomer for the phenomena in (1-3). We can implement these phenomena as <em>side-effects</em>, and as we know from functional programming, side-effects are often perfectly compositional. In fact, the above phenomena correspond, in Haskell-lingo, to a <em>Reader</em>, a <em>Writer</em> and a <em>State</em> monad.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> However, rolling together various different monads can be a tedious chore. In addition, when we’re writing what a word means, we might not <em>want</em> to specify its meaning for <em>all possible side-effects</em>. Since linguistics is continually changing, we might not even want to commit to what all possible side-effects <em>are</em>.</p>
<p>So this is why I got excited when I saw the latest library for extensible effects. If you don’t know what extensible effects are, I’d recommend <a href="http://okmij.org/ftp/Haskell/extensible/">the paper linked above</a>. But anyway, what I’m going to do in this post is: develop a parser, which parses Haskell strings, looks up the words in a dictionary of <em>effectful</em> Haskell functions, and composes these to get some meaning for the sentence. Here’s an example that you’ll see again at the end of the post, except then it’ll actually work!</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">SomeEffectfulFunction</span>]</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;tim&quot;</span>    <span class="ot">=</span> [ <span class="dt">NP</span> , <span class="dt">Tim</span>             ]</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;bob&quot;</span>    <span class="ot">=</span> [ <span class="dt">NP</span> , <span class="dt">Bob</span>             ]</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;likes&quot;</span>  <span class="ot">=</span> [ <span class="dt">TV</span> , <span class="dt">Like</span>            ]</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;stupid&quot;</span> <span class="ot">=</span> [ <span class="dt">AP</span> , <span class="op">&lt;</span> <span class="fu">id</span> , <span class="dt">Stupid</span> <span class="op">&gt;</span> ]</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ^ Has an identity (i.e. no) meaning, but</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">--   but conveys `Stupid` as a side-effect.</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;him&quot;</span>    <span class="ot">=</span> [ <span class="dt">NP</span> , magic           ]</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ^ Has some magic way of obtaining the</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">--   thing that&#39;s referenced.</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ot">example ::</span> [(<span class="dt">Pred</span>, [<span class="dt">Pred</span>])]</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>example <span class="ot">=</span> parseWith <span class="dt">Tim</span> <span class="st">&quot;(stupid bob) likes him&quot;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- &gt; [(Like Bob Tim, [Stupid Bob])]</span></span></code></pre></div>
<h2 id="ab-grammars-in-haskell">AB Grammars in Haskell</h2>
<p>Well, first off, don’t let this scare you off… but we are going to do this in Haskell, and we’re going to need a LOT of language extensions. This is because we’re basically going to parse strings to Haskell functions:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    TemplateHaskell, QuasiQuotes, FlexibleInstances, </span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    FlexibleContexts, TypeFamilies, GADTs, TypeOperators, </span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    DataKinds, PolyKinds, RankNTypes, KindSignatures, </span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">    UndecidableInstances, StandaloneDeriving, RecordWildCards, </span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ot">    DeriveFunctor, DeriveFoldable, DeriveTraversable #-}</span></span></code></pre></div>
<!--
```haskell
import Prelude hiding (lookup,lex)
import Control.Applicative ((<|>),empty,liftA2)
import Data.Maybe (maybeToList)
import Data.Singletons.Decide (Decision(..),(:~:)(..),(%~))
import Data.Singletons.Prelude
import Data.Singletons.TH (singletons)
import Eff1 (Eff,run,Reader,runReader,ask,Writer,tell,runWriter)
import Text.Parsec (char,letter,spaces,many1,chainr1,parse)
```
-->
<p>In addition, we’re going to use the following packages:</p>
<ul>
<li><a href="https://hackage.haskell.org/package/singletons">singletons</a>;</li>
<li><a href="http://okmij.org/ftp/Haskell/extensible/">extensible effects</a>;</li>
<li><a href="https://hackage.haskell.org/package/parsec">parsec</a>;</li>
<li><a href="https://hackage.haskell.org/package/markdown-unlit">markdown-unlit</a>.</li>
</ul>
<p>I’ve included a copy the extensible effects code in <a href="https://github.com/wenkokke/side-effects-in-english/">the repository</a>.</p>
<p>Before we start off, let’s review some basic AB-grammar knowledge. In general, a categorial grammar—of which AB-grammars are an instance—consist of three things:</p>
<ol type="1">
<li>a typed language <span class="math inline">\mathcal{L}_1</span>;</li>
<li>a typed language <span class="math inline">\mathcal{L}_2</span>; and</li>
<li>a translation <span class="math inline">Tr</span> from <span class="math inline">\mathcal{L}_1</span> to <span class="math inline">\mathcal{L}_2</span>.</li>
</ol>
<p>The language <span class="math inline">\mathcal{L}_1</span> describes the <em>grammar</em> of our language, whereas <span class="math inline">\mathcal{L}_2</span> will describe its <em>meaning</em>. And one more important requirement: if we have a type in <span class="math inline">\mathcal{L}_1</span>, then we should have some efficient way of getting all the programs of that type—this will be our parsing algorithm.</p>
<p>In the case of AB-grammars, <span class="math inline">\mathcal{L}_1</span> has the following types:</p>
<p><span class="math display">\text{Type }A, B \coloneqq S \mid N \mid NP \mid A \backslash B \mid B/A</span></p>
<p>The programs in this language consist of a bunch of constants, which represent words. It also has two rules for building programs, of them variants of function application:</p>
<p><span class="math display">
\frac{x:A \quad f:A \backslash B}{(fx):B}{\small \backslash e}\quad\frac{f:B / A \quad x:A}{(fx):B}{\small / e}
</span></p>
<p>The language <span class="math inline">\mathcal{L}_2</span> is the simply-typed lambda calculus, typed with only the primitive types <span class="math inline">e</span> and <span class="math inline">t</span>, for entities and truth-values:</p>
<p><span class="math display">\text{Type }\sigma, \tau \coloneqq e \mid t \mid \sigma \to \tau</span></p>
<p>It also has a set of typed constants, which we use to represent the abstract meanings of words. This means it contains familiar logical operators, like <span class="math inline">{\wedge} : t \to t \to t</span> or <span class="math inline">\forall : (e \to t) \to t</span>, but also things like <span class="math inline">\text{cat} : e \to t</span>, the predicate which tests whether or not something is a cat.</p>
<p>The translation function then maps the types for <span class="math inline">\mathcal{L}_1</span> to types for <span class="math inline">\mathcal{L}_2</span>, and the words in <span class="math inline">\mathcal{L}_1</span> to expressions in <span class="math inline">\mathcal{L}_2</span>. For the types, the translation is as follows:</p>
<p><span class="math display">
  \begin{array}{lcl}
    Tr(S) &amp;= &amp;t\\
    Tr(N) &amp;= &amp;e\to t\\
    Tr(NP) &amp;= &amp;e\\
    Tr(A \backslash B) &amp;= &amp;Tr(A)\to Tr(B)\\
    Tr(B / A) &amp;= &amp;Tr(A)\to Tr(B)
  \end{array}
</span></p>
<p>The translation on the level of programs is simple: programs in <span class="math inline">\mathcal{L}_1</span> consist <em>solely</em> of function applications and some constants. As long as we don’t make promises in the types of those constants that we cannot keep, we should be fine!</p>
<p>So, let’s start off by creating some Haskell data types to represent the syntactic and semantic types described above:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>singletons [d|</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    data SynT = S | N | NP | SynT :\ SynT | SynT :/ SynT</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>              deriving (Show,Eq)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    data SemT = E | T | SemT :-&gt; SemT</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>              deriving (Show,Eq)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  |]</span></code></pre></div>
<p>The <code>singletons</code> function that we’re using here is important. It’s a template Haskell function which, given some datatype, defines its “singleton”. A “singleton” is a Haskell data type which has the same structure on the value level and on the type level. For the type <code>SynT</code> above, that means that the <code>singletons</code> function generates a second data type:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SSynT</span> (<span class="ot">ty ::</span> <span class="dt">SynT</span>) <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">SS</span><span class="ot">    ::</span> <span class="dt">SSynT</span> <span class="dt">S</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">SN</span><span class="ot">    ::</span> <span class="dt">SSynT</span> <span class="dt">N</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">SNP</span><span class="ot">   ::</span> <span class="dt">SSynT</span> <span class="dt">NP</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  (<span class="op">:%</span>\)<span class="ot"> ::</span> <span class="dt">SSynT</span> a <span class="ot">-&gt;</span> <span class="dt">SSynT</span> b <span class="ot">-&gt;</span> <span class="dt">SSynT</span> (a <span class="op">:</span>\ b)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ot">  (:%/) ::</span> <span class="dt">SSynT</span> b <span class="ot">-&gt;</span> <span class="dt">SSynT</span> a <span class="ot">-&gt;</span> <span class="dt">SSynT</span> (b <span class="op">:/</span> a)</span></code></pre></div>
<p>By using the singleton of some value, we can get that value <em>on the type level</em>—and by pattern matching on a singleton, we can pattern match on types! For now, just be aware that those data types are generated. They will become relevant soon enough.</p>
<p>First off, though—we probably should’ve done this right away—let’s just set some fixities for our type-level operators:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:</span>\</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">infixl</span> <span class="dv">5</span> <span class="op">:/</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:-&gt;</span></span></code></pre></div>
<p>And while we’re at it, let’s create some type-level aliases for common parts of speech—though I cannot say that this treatment of appositive modifiers is entirely common:<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">IV</span> <span class="ot">=</span> <span class="dt">NP</span> <span class="op">:</span>\ <span class="dt">S</span>  <span class="co">-- intransitive verbs</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">TV</span> <span class="ot">=</span> <span class="dt">IV</span> <span class="op">:/</span> <span class="dt">NP</span> <span class="co">-- transitive verbs</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">AP</span> <span class="ot">=</span> <span class="dt">NP</span> <span class="op">:/</span> <span class="dt">NP</span> <span class="co">-- appositive modifier</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>sIV <span class="ot">=</span> <span class="dt">SNP</span> <span class="op">:%</span>\ <span class="dt">SS</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>sTV <span class="ot">=</span> sIV <span class="op">:%/</span> <span class="dt">SNP</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>sAP <span class="ot">=</span> <span class="dt">SNP</span> <span class="op">:%/</span> <span class="dt">SNP</span></span></code></pre></div>
<p>So now that we’ve defined the types of the languages <span class="math inline">\mathcal{L}_1</span> and <span class="math inline">\mathcal{L}_2</span>, we can define our translation <em>on types</em>. Note that our previous definition of our translation function was already more-or-less valid Haskell:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Tr</span> (<span class="ot">ty ::</span> <span class="dt">SynT</span>)<span class="ot"> ::</span> <span class="dt">SemT</span> <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tr</span> <span class="dt">S</span>        <span class="ot">=</span> <span class="dt">T</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tr</span> <span class="dt">N</span>        <span class="ot">=</span> <span class="dt">E</span> <span class="op">:-&gt;</span> <span class="dt">T</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tr</span> <span class="dt">NP</span>       <span class="ot">=</span> <span class="dt">E</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tr</span> (a <span class="op">:</span>\ b) <span class="ot">=</span> <span class="dt">Tr</span> a <span class="op">:-&gt;</span> <span class="dt">Tr</span> b</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Tr</span> (b <span class="op">:/</span> a) <span class="ot">=</span> <span class="dt">Tr</span> a <span class="op">:-&gt;</span> <span class="dt">Tr</span> b</span></code></pre></div>
<p>Let’s assume for now that we have some sort of data type that we wish to use to represent our semantic terms, for instance:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Expr</span> (<span class="ot">ty ::</span> <span class="dt">SemT</span>) <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">John</span><span class="ot"> ::</span> <span class="dt">Expr</span> <span class="dt">E</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Mary</span><span class="ot"> ::</span> <span class="dt">Expr</span> <span class="dt">E</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Like</span><span class="ot"> ::</span> <span class="dt">Expr</span> (<span class="dt">E</span> <span class="op">:-&gt;</span> <span class="dt">E</span> <span class="op">:-&gt;</span> <span class="dt">T</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  (:$) ::</span> <span class="dt">Expr</span> (a <span class="op">:-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Expr</span> a <span class="ot">-&gt;</span> <span class="dt">Expr</span> b</span></code></pre></div>
<p>While we have a way of talking about terms of a certain type—e.g. by saying <code>Expr E</code> we can talk about all entities—we cannot really leave the type open and talk about <em>all</em> well-typed terms, regardless of type. For this we need to introduce a new data type:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Typed</span> (<span class="ot">expr ::</span> <span class="dt">SemT</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Typed</span> (<span class="dt">SSynT</span> a, expr (<span class="dt">Tr</span> a))</span></code></pre></div>
<p>The <code>Typed</code> data-type contains a tuple of a singleton for a semantic type, and an expression. Notice that the type-level variable <code>a</code> is shared between the singleton and the expression, which means that the expression in the second position is forced to be of the type given in the first.</p>
<p>Our definition of <code>Typed</code> has one type-level parameter, <code>expr</code>, which represents the type of expressions. One possible value for this is the <code>Expr</code> type we sketched earlier—for instance, some values of the type <code>Typed Expr</code> would be <code>(SE, John)</code>, <code>(SE, Mary)</code>, <code>(ST, Like :$ John :$ Mary)</code> and <code>(SE %:-&gt; ST, Like :$ Mary)</code>.</p>
<p>We are abstracting over the expressions used, but we’re going to need them to support <em>at least</em> function application—as this is what AB grammars are built around. Therefore, we’re going to make a tiny type class which encodes function application of functions using the semantic types:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">SemE</span> (<span class="ot">expr ::</span> <span class="dt">SemT</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    apply ::</span> <span class="kw">forall</span> a b<span class="op">.</span> expr (a <span class="op">:-&gt;</span> b) <span class="ot">-&gt;</span> expr a <span class="ot">-&gt;</span> expr b</span></code></pre></div>
<p>Using this <code>apply</code> function, we can define application on <code>Typed</code> expression as well.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> Since these expressions hide their type, we cannot enforce on the type-level that this application necessarily succeeds. What we’re doing in the function is the following:</p>
<ol type="1">
<li>we pattern match to check if either the left or the right type is an appropriate function type;</li>
<li>we use the type-level equality function <code>%~</code> to check if the argument type is the same in both cases; and</li>
<li>if so, we apply <code>apply</code>.</li>
</ol>
<p>In all other cases, we’re forced to return <code>Nothing</code>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">maybeApply ::</span> <span class="dt">SemE</span> expr <span class="ot">=&gt;</span> <span class="dt">Typed</span> expr <span class="ot">-&gt;</span> <span class="dt">Typed</span> expr <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Typed</span> expr)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>maybeApply (<span class="dt">Typed</span> (a1,x)) (<span class="dt">Typed</span> (a2 <span class="op">:%</span>\ b,f)) <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> a1 <span class="op">%~</span> a2 <span class="kw">of</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Proved</span> <span class="dt">Refl</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> (<span class="dt">Typed</span> (b, apply f x))</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    _           <span class="ot">-&gt;</span> empty</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>maybeApply (<span class="dt">Typed</span> (b <span class="op">:%/</span> a1,f)) (<span class="dt">Typed</span> (a2,x)) <span class="ot">=</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> a1 <span class="op">%~</span> a2 <span class="kw">of</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Proved</span> <span class="dt">Refl</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> (<span class="dt">Typed</span> (b, apply f x))</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    _           <span class="ot">-&gt;</span> empty</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>maybeApply _ _ <span class="ot">=</span> empty</span></code></pre></div>
<p>What we’ve implemented above is just a <em>check</em> to see if some given pair of expressions can be applied as function and argument. Applied repeatedly, this corresponds to checking if some given syntax tree has a well-typed function-argument structure. If we want to do this, we’re going to need some sort of trees:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Functor</span>, <span class="dt">Foldable</span>, <span class="dt">Traversable</span>)</span></code></pre></div>
<p>However, since we don’t actually want to write these horribly verbose things, we’re going to use parser combinators to implement a tiny parser which parses sentences of the form “(the unicorn) (found jack) first”:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">parseTree ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Tree</span> <span class="dt">String</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>parseTree str <span class="ot">=</span> <span class="kw">case</span> parse sent <span class="st">&quot;&quot;</span> str <span class="kw">of</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Left</span>  _ <span class="ot">-&gt;</span> empty</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Right</span> t <span class="ot">-&gt;</span> <span class="fu">pure</span> t</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    sent <span class="ot">=</span> chainr1 atom node</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">where</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        word <span class="ot">=</span> <span class="dt">Leaf</span> <span class="op">&lt;$&gt;</span> many1 letter</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>        atom <span class="ot">=</span> word <span class="op">&lt;|&gt;</span> (char &#39;(&#39; <span class="op">*&gt;</span> (sent <span class="op">&lt;*</span> char &#39;)&#39;))</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>        node <span class="ot">=</span> <span class="fu">pure</span> <span class="dt">Node</span> <span class="op">&lt;*</span> spaces</span></code></pre></div>
<p>That is to say, for our parser, spaces form nodes in the tree, and are taken to be right associative. So, the example above represents the following tree:</p>
<pre><code>        -----------
       /           \
      /           ----
     /           /    \
   ----        ----    \
  /    \      /    \    \
the unicorn found jack first</code></pre>
<p>Last, before we can write out full implementation of “parsing” with AB grammars, we’re going to need the concept of a lexicon. In our case, a lexicon will be a function from string to lists of typed expressions (because a word can have multiple interpretations):</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Lexicon</span> expr <span class="ot">=</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Typed</span> expr]</span></code></pre></div>
<p>Parsing consists of four stages:</p>
<ol type="1">
<li>we parse the given string into a tree;</li>
<li>we look up the words in the tree in the lexicon;</li>
<li>we combine the words using <code>maybeApply</code> as defined above; and</li>
<li>we return those resulting terms that are of the correct type.</li>
</ol>
<p>Below, you see the function written out in full. Note that the <code>checkType</code> function once again makes use of the type-level equality function <code>%~</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">parseWith ::</span> <span class="dt">SemE</span> expr </span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>          <span class="ot">=&gt;</span> <span class="dt">Lexicon</span> expr <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">SSynT</span> a <span class="ot">-&gt;</span> [expr (<span class="dt">Tr</span> a)]</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>parseWith <span class="fu">lex</span> str a1 <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    wordTree <span class="ot">&lt;-</span> maybeToList (parseTree str)</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    exprTree <span class="ot">&lt;-</span> <span class="fu">traverse</span> <span class="fu">lex</span> wordTree</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    expr     <span class="ot">&lt;-</span> combine exprTree</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    checkType expr</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- Check if type a1 == a2, and if so return the</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- expression. Otherwise return Nothing.</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>      checkType (<span class="dt">Typed</span> (a2,x)) <span class="ot">=</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">case</span> a1 <span class="op">%~</span> a2 <span class="kw">of</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>          <span class="dt">Proved</span> <span class="dt">Refl</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> x</span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>          _           <span class="ot">-&gt;</span> empty</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- Combine the expressions in the tree using the maybeApply</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- function, defined above.</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>      combine (<span class="dt">Leaf</span> e)     <span class="ot">=</span> <span class="fu">pure</span> e</span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>      combine (<span class="dt">Node</span> t1 t2) <span class="ot">=</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>        <span class="kw">do</span> e1 <span class="ot">&lt;-</span> combine t1</span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a>           e2 <span class="ot">&lt;-</span> combine t2</span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>           maybeToList (maybeApply e1 e2)</span></code></pre></div>
<h2 id="interpretations-in-haskell">Interpretations in Haskell</h2>
<p>Now comes the part where all this mucking about with singleton types really pays off. Because our expressions are typed, and sound with respect to Haskell’s type system, we can choose Haskell to be our semantic language. That means that we now have the ability to parse strings to valid Haskell functions.</p>
<p>First, let’s set up a small language to represent our world, which in this case is mostly made up of Bob and Tim:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Entity</span> <span class="ot">=</span> <span class="dt">Tim</span> <span class="co">-- ^ Tim is a carpenter and an introvert, likes</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>                  <span class="co">--   holding hands and long walks on the beach.</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">Bob</span> <span class="co">-- ^ Bob is an aspiring actor, and a social media</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>                  <span class="co">--   junkie. Likes travelling, beer, and Tim.</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Pred</span> <span class="ot">=</span> <span class="dt">Like</span> <span class="dt">Entity</span> <span class="dt">Entity</span> <span class="co">-- ^ Is it &#39;like&#39; or &#39;like like&#39;?</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="dt">Stupid</span> <span class="dt">Entity</span>      <span class="co">-- ^ This is definitely not &#39;like like&#39;.</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>          <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>Secondly, we could turn our expressions into plain Haskell expressions, but that would be dull. Language isn’t side-effect free—there’s all kinds of stuff going on! So, we’re going to use a library for <a href="http://okmij.org/ftp/Haskell/extensible/">extensible effects</a> written by Oleg Kiselyov, Amr Sabry, Cameron Swords, and Hiromi Ishii.</p>
<p>Let’s translate our semantic types into effectful Haskell types! And, most importantly, let’s keep the set of effects <code>r</code> unspecified!</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">ToEff</span> r<span class="ot"> t ::</span> <span class="op">*</span> <span class="kw">where</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ToEff</span> r <span class="dt">E</span>         <span class="ot">=</span> <span class="dt">Eff</span> r <span class="dt">Entity</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ToEff</span> r <span class="dt">T</span>         <span class="ot">=</span> <span class="dt">Eff</span> r <span class="dt">Pred</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ToEff</span> r (a <span class="op">:-&gt;</span> b) <span class="ot">=</span> <span class="dt">ToEff</span> r a <span class="ot">-&gt;</span> <span class="dt">ToEff</span> r b</span></code></pre></div>
<p>Now, because Haskell is being a buzzkill about using un-saturated type families, we have to wrap our translation in a newtype to be able to use it with the <code>Typed</code> definition and the <code>SemE</code> type class. And because of this, we also have to convince Haskell that these wrapped Haskell functions can be applied:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Ext</span> r a <span class="ot">=</span> <span class="dt">Ext</span> (<span class="dt">ToEff</span> r a)</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">SemE</span> (<span class="dt">Ext</span> r) <span class="kw">where</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>  apply (<span class="dt">Ext</span> f) (<span class="dt">Ext</span> x) <span class="ot">=</span> <span class="dt">Ext</span> (f x)</span></code></pre></div>
<p>But now we’re all ready to go! First, let’s determine the effects we want to use in our library. We could still leave this under specified, and only mention which effects we expect to be supported… but that would be much more verbose:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">RW</span> <span class="ot">=</span> (<span class="dt">Reader</span> <span class="dt">Entity</span> &#39;<span class="op">:</span> <span class="dt">Writer</span> <span class="dt">Pred</span> &#39;<span class="op">:</span> &#39;[])</span></code></pre></div>
<p>Hooray! We can have a lexicon now! And it’s reasonably simple, too!</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Typed</span> (<span class="dt">Ext</span> <span class="dt">RW</span>)]</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;tim&quot;</span>    <span class="ot">=</span> [ <span class="dt">Typed</span> (<span class="dt">SNP</span> , <span class="dt">Ext</span> (<span class="fu">pure</span> <span class="dt">Tim</span>))                            ]</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;bob&quot;</span>    <span class="ot">=</span> [ <span class="dt">Typed</span> (<span class="dt">SNP</span> , <span class="dt">Ext</span> (<span class="fu">pure</span> <span class="dt">Bob</span>))                            ]</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;likes&quot;</span>  <span class="ot">=</span> [ <span class="dt">Typed</span> (sTV , <span class="dt">Ext</span> (liftA2 (<span class="fu">flip</span> <span class="dt">Like</span>)))                  ]</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;stupid&quot;</span> <span class="ot">=</span> [ <span class="dt">Typed</span> (sAP , <span class="dt">Ext</span> (<span class="op">&gt;&gt;=</span> \x <span class="ot">-&gt;</span> tell (<span class="dt">Stupid</span> x) <span class="op">*&gt;</span> <span class="fu">pure</span> x)) ]</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="fu">lex</span> <span class="st">&quot;him&quot;</span>    <span class="ot">=</span> [ <span class="dt">Typed</span> (<span class="dt">SNP</span> , <span class="dt">Ext</span> ask)                                   ]</span></code></pre></div>
<p>The first two definitions simply return Tim and Bob as effect-free constants—hence the application of <code>pure</code>. Tim and Bob are both of type <code>Entity</code>, and through our translation, <code>NP</code> gets translated to <code>Eff r Entity</code>, so this works out.</p>
<p>Then, the predicate <code>Like</code> is simply lifted by <code>liftA2</code>, which is similar to <code>pure</code>, but for binary functions. The <code>flip</code> is present because according to… <em>egh</em>… <em>grammar</em>, <code>Like</code> will take its object first and its subject second… but for readability, we’d like that to be the other way around.</p>
<p>The definition for “stupid” acts as an identity function on entities, but inserts a predicate into the “appositive dimension”. This corresponds to the linguistic analysis of expressives: they don’t contribute to the sentence meaning, but store their meanings in some other meaning dimension—in this case, a <code>Writer</code> monad!</p>
<p>And last, the definition for “him” simply asks a <code>Reader</code> monad what it’s interpretation should be! A more complex example of anaphora resolution would be to also include a <code>Writer</code> monad, and have entities submit themselves as potential referents, then have this <code>Writer</code> monad periodically empty itself into the <code>Reader</code> monad, e.g. at sentence or clause boundaries, and have anaphora consume the first appropriate referent… But we digress!</p>
<p>We’re still stuck with these unresolved effects coming from our lexicon. So we’re going to define a function <code>runExt</code>, which handles all effects in order, and then escapes the <code>Eff</code> monad:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">runExt ::</span> <span class="dt">Entity</span> <span class="ot">-&gt;</span> <span class="dt">Ext</span> <span class="dt">RW</span> <span class="dt">T</span> <span class="ot">-&gt;</span> (<span class="dt">Pred</span>, [<span class="dt">Pred</span>])</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>runExt x (<span class="dt">Ext</span> e) <span class="ot">=</span> run (runWriter (runReader e x))</span></code></pre></div>
<p>And with all this in place, we can handle an example sentence:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ot">example ::</span> [(<span class="dt">Pred</span>, [<span class="dt">Pred</span>])]</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>example <span class="ot">=</span> runExt <span class="dt">Tim</span> <span class="op">&lt;$&gt;</span> parseWith <span class="fu">lex</span> <span class="st">&quot;(stupid bob) likes him&quot;</span> <span class="dt">SS</span></span></code></pre></div>
<p>Which evaluates to: <code>[(Like Bob Tim,[Stupid Bob])]</code></p>
<hr />
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>For a more hands-on implementation of side-effects in natural language using <em>monads</em>, see <a href="https://github.com/dylnb/esslli2015-monads" class="uri">https://github.com/dylnb/esslli2015-monads</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>The convention in the singletons library is to define the singleton version of a constructor by prefixing it with an <code>S</code>. Obviously, since the above definitions aren’t constructors, we can’t do that. However, we stick as close to the convention as possible in naming these “derived” singletons <code>sIV</code>, <code>sTV</code> and <code>sAP</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>It is the repeated application of this function which corresponds to backward-chaining proof search in the more general framework of categorial grammar. However, AB grammars <em>only</em> support function application, and therefore our “proof search” (1) can return at most one result, and (2) is more-or-less just a cursory check to see if the types match.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></description>
    <pubDate>Wed, 09 Mar 2016 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2016-03-09-side-effects-in-english.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>
<item>
    <title>Insertion sort in Agda</title>
    <link>http://wen.works/posts/2016-03-01-insertion-sort-in-agda.html</link>
    <description><![CDATA[<!--
<pre class="Agda"><a id="14" class="Keyword">module</a> <a id="21" href="2016-03-01-insertion-sort-in-agda.html" class="Module">2016-03-01-insertion-sort-in-agda</a> <a id="55" class="Keyword">where</a>
</pre>-->
<p>I wrote this code a long time ago, and verifiying the correctness of some sorting algorithm is pretty much <em>the</em> standard “Hello World! I can Agda!” blog post—well, that and implementing the λ-calculus—but I really wanted an excuse to test my Jekyll/Agda integration…</p>
<!--more-->
<p>Now, the version of insertion sort that I will write in this blog post will be <em>correct by construction</em>. By this I mean that I will implemented insertion sort as a function from lists to ordered lists, where the type of ordered lists only contains ordered lists. There are some concerns about whether this style of programming is the right way to go. If you read a lot of Coq code, you will notice that Coq programmers often implement functions without <em>any</em> guarantees—e.g. they would implement insertion sort as a function from lists to lists—and then prove the function’s properties separately. Personally, I have found that this style can lead to very clumsy code, but there are good arguments to be made for its naive efficiency, both in terms of time and space—if you don’t need some property, you don’t have to compute its proof!</p>
<p>I’m getting carried away… Well, one last announcement in the public interest: This post is written in literate Agda, and I’ve gone through the effort of using the Agda hilighter. This means that all functions and module names have links to their definitions—be it within the post, or in the Agda standard library!</p>
<p>Obligatory “this is literate code, here are my imports.”</p>
<pre class="Agda"><a id="1580" class="Keyword">open</a> <a id="1585" class="Keyword">import</a> <a id="1592" href="https://agda.github.io/agda-stdlib/Level.html" class="Module">Level</a>            <a id="1609" class="Keyword">using</a> <a id="1615" class="Symbol">(</a><a id="1616" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#636" class="Primitive Operator">_⊔_</a><a id="1619" class="Symbol">)</a>
<a id="1621" class="Keyword">open</a> <a id="1626" class="Keyword">import</a> <a id="1633" href="https://agda.github.io/agda-stdlib/Data.Vec.html" class="Module">Data.Vec</a>         <a id="1650" class="Keyword">using</a> <a id="1656" class="Symbol">(</a><a id="1657" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#959" class="Datatype">Vec</a><a id="1660" class="Symbol">;</a> <a id="1662" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#995" class="InductiveConstructor">[]</a><a id="1664" class="Symbol">;</a> <a id="1666" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#1014" class="InductiveConstructor Operator">_∷_</a><a id="1669" class="Symbol">)</a>
<a id="1671" class="Keyword">open</a> <a id="1676" class="Keyword">import</a> <a id="1683" href="https://agda.github.io/agda-stdlib/Data.Nat.html" class="Module">Data.Nat</a>         <a id="1700" class="Keyword">using</a> <a id="1706" class="Symbol">(</a><a id="1707" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#192" class="Datatype">ℕ</a><a id="1708" class="Symbol">;</a> <a id="1710" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#210" class="InductiveConstructor">zero</a><a id="1714" class="Symbol">;</a> <a id="1716" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a><a id="1719" class="Symbol">)</a>
<a id="1721" class="Keyword">open</a> <a id="1726" class="Keyword">import</a> <a id="1733" href="https://agda.github.io/agda-stdlib/Data.Sum.html" class="Module">Data.Sum</a>         <a id="1750" class="Keyword">using</a> <a id="1756" class="Symbol">(</a><a id="1757" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#734" class="Datatype Operator">_⊎_</a><a id="1760" class="Symbol">;</a> <a id="1762" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#784" class="InductiveConstructor">inj₁</a><a id="1766" class="Symbol">;</a> <a id="1768" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#809" class="InductiveConstructor">inj₂</a><a id="1772" class="Symbol">)</a>
<a id="1774" class="Keyword">open</a> <a id="1779" class="Keyword">import</a> <a id="1786" href="https://agda.github.io/agda-stdlib/Data.Product.html" class="Module">Data.Product</a>     <a id="1803" class="Keyword">using</a> <a id="1809" class="Symbol">(</a><a id="1810" href="https://agda.github.io/agda-stdlib/Data.Product.html#1369" class="Function">∃</a><a id="1811" class="Symbol">;</a> <a id="1813" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">_,_</a><a id="1816" class="Symbol">;</a> <a id="1818" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#252" class="Field">proj₁</a><a id="1823" class="Symbol">;</a> <a id="1825" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#264" class="Field">proj₂</a><a id="1830" class="Symbol">)</a>
<a id="1832" class="Keyword">open</a> <a id="1837" class="Keyword">import</a> <a id="1844" href="https://agda.github.io/agda-stdlib/Data.Empty.html" class="Module">Data.Empty</a>       <a id="1861" class="Keyword">using</a> <a id="1867" class="Symbol">(</a><a id="1868" href="https://agda.github.io/agda-stdlib/Data.Empty.html#628" class="Function">⊥-elim</a><a id="1874" class="Symbol">)</a>
<a id="1876" class="Keyword">open</a> <a id="1881" class="Keyword">import</a> <a id="1888" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html" class="Module">Relation.Nullary</a> <a id="1905" class="Keyword">using</a> <a id="1911" class="Symbol">(</a><a id="1912" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#653" class="Function Operator">¬_</a><a id="1914" class="Symbol">;</a> <a id="1916" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1508" class="Record">Dec</a><a id="1919" class="Symbol">;</a> <a id="1921" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1645" class="InductiveConstructor">yes</a><a id="1924" class="Symbol">;</a> <a id="1926" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1682" class="InductiveConstructor">no</a><a id="1928" class="Symbol">)</a>
<a id="1930" class="Keyword">open</a> <a id="1935" class="Keyword">import</a> <a id="1942" href="https://agda.github.io/agda-stdlib/Relation.Binary.html" class="Module">Relation.Binary</a>
<a id="1958" class="Keyword">open</a> <a id="1963" class="Keyword">import</a> <a id="1970" href="https://agda.github.io/agda-stdlib/Relation.Binary.PropositionalEquality.html" class="Module">Relation.Binary.PropositionalEquality</a>
</pre>
<p>So the first question is “What do we want to sort?” The boring answer would be “lists of integers”, but let’s be a little bit more general. We can sort anything that forms a <em>decidable, total order</em>. Basically, this means three things:</p>
<ul>
<li>we have some type A;</li>
<li>for any x and y of type A, we have a <em>type</em> of orderings between them, which we write as <code>x ≤ y</code>;</li>
<li>we can actually get that ordering using <code>x ≤? y</code> or <code>total x y</code>.</li>
</ul>
<p>Below, we define our module to work for any decidable total order, and we unpack that order. If you have a look at <code>≤?</code> and <code>total</code>, you’ll notice that they do slightly different things. For some x and y, <code>x ≤? y</code> will tell you whether or not <code>x ≤ y</code>, whereas <code>total</code> will tell you whether it is <code>x ≤ y</code> or <code>y ≤ x</code>.</p>
<pre class="Agda"><a id="2772" class="Keyword">module</a> <a id="InsertionSort"></a><a id="2779" href="2016-03-01-insertion-sort-in-agda.html#2779" class="Module">InsertionSort</a> <a id="2793" class="Symbol">{</a><a id="2794" href="2016-03-01-insertion-sort-in-agda.html#2794" class="Bound">c</a> <a id="2796" href="2016-03-01-insertion-sort-in-agda.html#2796" class="Bound">ℓ₁</a> <a id="2799" href="2016-03-01-insertion-sort-in-agda.html#2799" class="Bound">ℓ₂</a><a id="2801" class="Symbol">}</a> <a id="2803" class="Symbol">{{</a><a id="2805" href="2016-03-01-insertion-sort-in-agda.html#2805" class="Bound">Ord</a> <a id="2809" class="Symbol">:</a> <a id="2811" href="https://agda.github.io/agda-stdlib/Relation.Binary.Bundles.html#5406" class="Record">DecTotalOrder</a> <a id="2825" href="2016-03-01-insertion-sort-in-agda.html#2794" class="Bound">c</a> <a id="2827" href="2016-03-01-insertion-sort-in-agda.html#2796" class="Bound">ℓ₁</a> <a id="2830" href="2016-03-01-insertion-sort-in-agda.html#2799" class="Bound">ℓ₂</a><a id="2832" class="Symbol">}}</a> <a id="2835" class="Keyword">where</a>

  <a id="2844" class="Keyword">open</a> <a id="2849" href="https://agda.github.io/agda-stdlib/Relation.Binary.Bundles.html#5406" class="Module">DecTotalOrder</a> <a id="2863" class="Symbol">{{…}}</a>
    <a id="2873" class="Keyword">using</a> <a id="2879" class="Symbol">(</a>_≤_<a id="2883" class="Symbol">;</a> _≤?_<a id="2889" class="Symbol">;</a> total<a id="2896" class="Symbol">)</a>
    <a id="2902" class="Keyword">renaming</a> <a id="2911" class="Symbol">(</a>trans <a id="2918" class="Symbol">to</a> ≤-trans<a id="2928" class="Symbol">)</a>
  <a id="InsertionSort.A"></a><a id="2932" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a> <a id="2934" class="Symbol">=</a> <a id="2936" href="https://agda.github.io/agda-stdlib/Relation.Binary.Bundles.html#5490" class="Field">DecTotalOrder.Carrier</a> <a id="2958" href="2016-03-01-insertion-sort-in-agda.html#2805" class="Bound">Ord</a>
</pre>
<p>The type A is already ordered, but it would be incredibly convenient if it were also <em>bounded</em>—meaning that it has a value which is smaller than everything else, and a value which is bigger than everything else. Below, we define a wrapper for A which is bounded at the top by ⊤ and at the bottom by ⊥:</p>
<pre class="Agda">  <a id="3278" class="Keyword">data</a> <a id="InsertionSort.Â"></a><a id="3283" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a> <a id="3286" class="Symbol">:</a> <a id="3288" class="PrimitiveType">Set</a> <a id="3292" href="2016-03-01-insertion-sort-in-agda.html#2794" class="Bound">c</a> <a id="3294" class="Keyword">where</a>
    <a id="InsertionSort.Â.⊤"></a><a id="3304" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="3306" class="Symbol">:</a> <a id="3308" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a>
    <a id="InsertionSort.Â.⊥"></a><a id="3315" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a> <a id="3317" class="Symbol">:</a> <a id="3319" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a>
    <a id="InsertionSort.Â.⟦_⟧"></a><a id="3326" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦_⟧</a> <a id="3330" class="Symbol">:</a> <a id="3332" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a> <a id="3334" class="Symbol">→</a> <a id="3336" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a>
</pre>
<p>We still need to encode the fact that ⊥ and ⊤ are in fact smaller and bigger than all other values. Below, we defined the order ≲ on bounded Â… where we simply state these facts as ⊥≲ and ≲⊤:</p>
<pre class="Agda">  <a id="3544" class="Keyword">infix</a> <a id="3550" class="Number">4</a> <a id="3552" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">_≲_</a>

  <a id="3559" class="Keyword">data</a> <a id="InsertionSort._≲_"></a><a id="3564" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">_≲_</a> <a id="3568" class="Symbol">:</a> <a id="3570" href="https://agda.github.io/agda-stdlib/Relation.Binary.Core.html#882" class="Function">Rel</a> <a id="3574" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a> <a id="3577" class="Symbol">(</a><a id="3578" href="2016-03-01-insertion-sort-in-agda.html#2794" class="Bound">c</a> <a id="3580" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#636" class="Primitive Operator">⊔</a> <a id="3582" href="2016-03-01-insertion-sort-in-agda.html#2799" class="Bound">ℓ₂</a><a id="3584" class="Symbol">)</a> <a id="3586" class="Keyword">where</a>
    <a id="InsertionSort._≲_.⊥≲"></a><a id="3596" href="2016-03-01-insertion-sort-in-agda.html#3596" class="InductiveConstructor">⊥≲</a> <a id="3599" class="Symbol">:</a> <a id="3601" class="Symbol">∀</a> <a id="3603" class="Symbol">{</a><a id="3604" href="2016-03-01-insertion-sort-in-agda.html#3604" class="Bound">x</a><a id="3605" class="Symbol">}</a> <a id="3607" class="Symbol">→</a> <a id="3609" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a> <a id="3611" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="3613" href="2016-03-01-insertion-sort-in-agda.html#3604" class="Bound">x</a>
    <a id="InsertionSort._≲_.≲⊤"></a><a id="3619" href="2016-03-01-insertion-sort-in-agda.html#3619" class="InductiveConstructor">≲⊤</a> <a id="3622" class="Symbol">:</a> <a id="3624" class="Symbol">∀</a> <a id="3626" class="Symbol">{</a><a id="3627" href="2016-03-01-insertion-sort-in-agda.html#3627" class="Bound">x</a><a id="3628" class="Symbol">}</a> <a id="3630" class="Symbol">→</a> <a id="3632" href="2016-03-01-insertion-sort-in-agda.html#3627" class="Bound">x</a> <a id="3634" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="3636" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a>
    <a id="InsertionSort._≲_.≤-lift"></a><a id="3642" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="3649" class="Symbol">:</a> <a id="3651" class="Symbol">∀</a> <a id="3653" class="Symbol">{</a><a id="3654" href="2016-03-01-insertion-sort-in-agda.html#3654" class="Bound">x</a> <a id="3656" href="2016-03-01-insertion-sort-in-agda.html#3656" class="Bound">y</a><a id="3657" class="Symbol">}</a> <a id="3659" class="Symbol">→</a> <a id="3661" href="2016-03-01-insertion-sort-in-agda.html#3654" class="Bound">x</a> <a id="3663" href="https://agda.github.io/agda-stdlib/Relation.Binary.Bundles.html#5555" class="Field Operator">≤</a> <a id="3665" href="2016-03-01-insertion-sort-in-agda.html#3656" class="Bound">y</a> <a id="3667" class="Symbol">→</a> <a id="3669" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="3671" href="2016-03-01-insertion-sort-in-agda.html#3654" class="Bound">x</a> <a id="3673" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="3675" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="3677" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="3679" href="2016-03-01-insertion-sort-in-agda.html#3656" class="Bound">y</a> <a id="3681" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a>
</pre>
<p>Note that with the last constructor, we can lift the order of any two values in A into ≲. However, if we only have a proof of ≰, then the lifting is slightly more involved. Therefore, we define a function which does this for us:</p>
<pre class="Agda">  <a id="InsertionSort.≰-lift"></a><a id="3924" href="2016-03-01-insertion-sort-in-agda.html#3924" class="Function">≰-lift</a> <a id="3931" class="Symbol">:</a> <a id="3933" class="Symbol">∀</a> <a id="3935" class="Symbol">{</a><a id="3936" href="2016-03-01-insertion-sort-in-agda.html#3936" class="Bound">x</a> <a id="3938" href="2016-03-01-insertion-sort-in-agda.html#3938" class="Bound">y</a><a id="3939" class="Symbol">}</a> <a id="3941" class="Symbol">→</a> <a id="3943" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#653" class="Function Operator">¬</a> <a id="3945" class="Symbol">(</a><a id="3946" href="2016-03-01-insertion-sort-in-agda.html#3938" class="Bound">y</a> <a id="3948" href="https://agda.github.io/agda-stdlib/Relation.Binary.Bundles.html#5555" class="Field Operator">≤</a> <a id="3950" href="2016-03-01-insertion-sort-in-agda.html#3936" class="Bound">x</a><a id="3951" class="Symbol">)</a> <a id="3953" class="Symbol">→</a> <a id="3955" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="3957" href="2016-03-01-insertion-sort-in-agda.html#3936" class="Bound">x</a> <a id="3959" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="3961" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="3963" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="3965" href="2016-03-01-insertion-sort-in-agda.html#3938" class="Bound">y</a> <a id="3967" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a>
  <a id="3971" href="2016-03-01-insertion-sort-in-agda.html#3924" class="Function">≰-lift</a> <a id="3978" class="Symbol">{</a><a id="3979" href="2016-03-01-insertion-sort-in-agda.html#3979" class="Bound">x</a><a id="3980" class="Symbol">}</a> <a id="3982" class="Symbol">{</a><a id="3983" href="2016-03-01-insertion-sort-in-agda.html#3983" class="Bound">y</a><a id="3984" class="Symbol">}</a> <a id="3986" href="2016-03-01-insertion-sort-in-agda.html#3986" class="Bound">y≰x</a> <a id="3990" class="Keyword">with</a> <a id="3995" href="https://agda.github.io/agda-stdlib/Relation.Binary.Structures.html#5127" class="Function">total</a> <a id="4001" href="2016-03-01-insertion-sort-in-agda.html#3979" class="Bound">x</a> <a id="4003" href="2016-03-01-insertion-sort-in-agda.html#3983" class="Bound">y</a>
  <a id="4007" href="2016-03-01-insertion-sort-in-agda.html#3924" class="Function">≰-lift</a> <a id="4014" href="2016-03-01-insertion-sort-in-agda.html#4014" class="Bound">y≰x</a> <a id="4018" class="Symbol">|</a> <a id="4020" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#784" class="InductiveConstructor">inj₁</a> <a id="4025" href="2016-03-01-insertion-sort-in-agda.html#4025" class="Bound">x≤y</a> <a id="4029" class="Symbol">=</a> <a id="4031" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="4038" href="2016-03-01-insertion-sort-in-agda.html#4025" class="Bound">x≤y</a>
  <a id="4044" href="2016-03-01-insertion-sort-in-agda.html#3924" class="Function">≰-lift</a> <a id="4051" href="2016-03-01-insertion-sort-in-agda.html#4051" class="Bound">y≰x</a> <a id="4055" class="Symbol">|</a> <a id="4057" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#809" class="InductiveConstructor">inj₂</a> <a id="4062" href="2016-03-01-insertion-sort-in-agda.html#4062" class="Bound">y≤x</a> <a id="4066" class="Symbol">=</a> <a id="4068" href="https://agda.github.io/agda-stdlib/Data.Empty.html#628" class="Function">⊥-elim</a> <a id="4075" class="Symbol">(</a><a id="4076" href="2016-03-01-insertion-sort-in-agda.html#4051" class="Bound">y≰x</a> <a id="4080" href="2016-03-01-insertion-sort-in-agda.html#4062" class="Bound">y≤x</a><a id="4083" class="Symbol">)</a>
</pre>
<p>Another thing we can do with two values of type Â is compute their <em>minimum</em>. This is one example where we deviate from <em>correctness by construction</em>: we define minimum function ⊓, and only then prove its correctness:</p>
<pre class="Agda">  <a id="4316" class="Keyword">infix</a> <a id="4322" class="Number">5</a> <a id="4324" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">_⊓_</a>

  <a id="InsertionSort._⊓_"></a><a id="4331" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">_⊓_</a> <a id="4335" class="Symbol">:</a> <a id="4337" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a> <a id="4340" class="Symbol">→</a> <a id="4342" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a> <a id="4345" class="Symbol">→</a> <a id="4347" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a>
  <a id="4352" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="4354" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="4356" href="2016-03-01-insertion-sort-in-agda.html#4356" class="Bound">y</a> <a id="4358" class="Symbol">=</a> <a id="4360" href="2016-03-01-insertion-sort-in-agda.html#4356" class="Bound">y</a>
  <a id="4364" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a> <a id="4366" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="4368" class="Symbol">_</a> <a id="4370" class="Symbol">=</a> <a id="4372" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a>
  <a id="4376" href="2016-03-01-insertion-sort-in-agda.html#4376" class="CatchallClause Bound">x</a><a id="4377" class="CatchallClause"> </a><a id="4378" href="2016-03-01-insertion-sort-in-agda.html#4331" class="CatchallClause Function Operator">⊓</a><a id="4379" class="CatchallClause"> </a><a id="4380" href="2016-03-01-insertion-sort-in-agda.html#3304" class="CatchallClause InductiveConstructor">⊤</a> <a id="4382" class="Symbol">=</a> <a id="4384" href="2016-03-01-insertion-sort-in-agda.html#4376" class="Bound">x</a>
  <a id="4388" class="CatchallClause Symbol">_</a><a id="4389" class="CatchallClause"> </a><a id="4390" href="2016-03-01-insertion-sort-in-agda.html#4331" class="CatchallClause Function Operator">⊓</a><a id="4391" class="CatchallClause"> </a><a id="4392" href="2016-03-01-insertion-sort-in-agda.html#3315" class="CatchallClause InductiveConstructor">⊥</a> <a id="4394" class="Symbol">=</a> <a id="4396" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a>
  <a id="4400" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4402" href="2016-03-01-insertion-sort-in-agda.html#4402" class="Bound">x</a> <a id="4404" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="4406" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="4408" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4410" href="2016-03-01-insertion-sort-in-agda.html#4410" class="Bound">y</a> <a id="4412" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="4414" class="Keyword">with</a> <a id="4419" href="2016-03-01-insertion-sort-in-agda.html#4402" class="Bound">x</a> <a id="4421" href="https://agda.github.io/agda-stdlib/Relation.Binary.Structures.html#5366" class="Function Operator">≤?</a> <a id="4424" href="2016-03-01-insertion-sort-in-agda.html#4410" class="Bound">y</a>
  <a id="4428" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4430" href="2016-03-01-insertion-sort-in-agda.html#4430" class="Bound">x</a> <a id="4432" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="4434" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="4436" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4438" href="2016-03-01-insertion-sort-in-agda.html#4438" class="Bound">y</a> <a id="4440" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="4442" class="Symbol">|</a> <a id="4444" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1645" class="InductiveConstructor">yes</a> <a id="4448" href="2016-03-01-insertion-sort-in-agda.html#4448" class="Bound">x≤y</a> <a id="4452" class="Symbol">=</a> <a id="4454" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4456" href="2016-03-01-insertion-sort-in-agda.html#4430" class="Bound">x</a> <a id="4458" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a>
  <a id="4462" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4464" href="2016-03-01-insertion-sort-in-agda.html#4464" class="Bound">x</a> <a id="4466" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="4468" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="4470" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4472" href="2016-03-01-insertion-sort-in-agda.html#4472" class="Bound">y</a> <a id="4474" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="4476" class="Symbol">|</a> <a id="4478" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1682" class="InductiveConstructor">no</a>  <a id="4482" href="2016-03-01-insertion-sort-in-agda.html#4482" class="Bound">x&gt;y</a> <a id="4486" class="Symbol">=</a> <a id="4488" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4490" href="2016-03-01-insertion-sort-in-agda.html#4472" class="Bound">y</a> <a id="4492" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a>

  <a id="InsertionSort.⊓-conserves-≲"></a><a id="4497" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4511" class="Symbol">:</a> <a id="4513" class="Symbol">∀</a> <a id="4515" class="Symbol">{</a><a id="4516" href="2016-03-01-insertion-sort-in-agda.html#4516" class="Bound">x</a> <a id="4518" href="2016-03-01-insertion-sort-in-agda.html#4518" class="Bound">y</a> <a id="4520" href="2016-03-01-insertion-sort-in-agda.html#4520" class="Bound">z</a><a id="4521" class="Symbol">}</a> <a id="4523" class="Symbol">→</a> <a id="4525" href="2016-03-01-insertion-sort-in-agda.html#4516" class="Bound">x</a> <a id="4527" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="4529" href="2016-03-01-insertion-sort-in-agda.html#4518" class="Bound">y</a> <a id="4531" class="Symbol">→</a> <a id="4533" href="2016-03-01-insertion-sort-in-agda.html#4516" class="Bound">x</a> <a id="4535" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="4537" href="2016-03-01-insertion-sort-in-agda.html#4520" class="Bound">z</a> <a id="4539" class="Symbol">→</a> <a id="4541" href="2016-03-01-insertion-sort-in-agda.html#4516" class="Bound">x</a> <a id="4543" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="4545" href="2016-03-01-insertion-sort-in-agda.html#4518" class="Bound">y</a> <a id="4547" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="4549" href="2016-03-01-insertion-sort-in-agda.html#4520" class="Bound">z</a>
  <a id="4553" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4567" class="Symbol">{</a><a id="4568" href="2016-03-01-insertion-sort-in-agda.html#4568" class="Bound">x</a><a id="4569" class="Symbol">}</a> <a id="4571" class="Symbol">{</a><a id="4572" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a><a id="4573" class="Symbol">}</a> <a id="4575" class="Symbol">{_}</a> <a id="4579" class="Symbol">_</a> <a id="4581" href="2016-03-01-insertion-sort-in-agda.html#4581" class="Bound">q</a> <a id="4583" class="Symbol">=</a> <a id="4585" href="2016-03-01-insertion-sort-in-agda.html#4581" class="Bound">q</a>
  <a id="4589" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4603" class="Symbol">{</a><a id="4604" href="2016-03-01-insertion-sort-in-agda.html#4604" class="Bound">x</a><a id="4605" class="Symbol">}</a> <a id="4607" class="Symbol">{</a><a id="4608" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a><a id="4609" class="Symbol">}</a> <a id="4611" class="Symbol">{_}</a> <a id="4615" href="2016-03-01-insertion-sort-in-agda.html#4615" class="Bound">p</a> <a id="4617" class="Symbol">_</a> <a id="4619" class="Symbol">=</a> <a id="4621" href="2016-03-01-insertion-sort-in-agda.html#4615" class="Bound">p</a>
  <a id="4625" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4639" class="Symbol">{</a><a id="4640" href="2016-03-01-insertion-sort-in-agda.html#4640" class="Bound">x</a><a id="4641" class="Symbol">}</a> <a id="4643" class="Symbol">{</a><a id="4644" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4646" class="Symbol">_</a> <a id="4648" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4649" class="Symbol">}</a> <a id="4651" class="Symbol">{</a><a id="4652" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a><a id="4653" class="Symbol">}</a> <a id="4655" href="2016-03-01-insertion-sort-in-agda.html#4655" class="Bound">p</a> <a id="4657" class="Symbol">_</a> <a id="4659" class="Symbol">=</a> <a id="4661" href="2016-03-01-insertion-sort-in-agda.html#4655" class="Bound">p</a>
  <a id="4665" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4679" class="Symbol">{</a><a id="4680" href="2016-03-01-insertion-sort-in-agda.html#4680" class="Bound">x</a><a id="4681" class="Symbol">}</a> <a id="4683" class="Symbol">{</a><a id="4684" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4686" class="Symbol">_</a> <a id="4688" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4689" class="Symbol">}</a> <a id="4691" class="Symbol">{</a><a id="4692" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a><a id="4693" class="Symbol">}</a> <a id="4695" class="Symbol">_</a> <a id="4697" href="2016-03-01-insertion-sort-in-agda.html#4697" class="Bound">q</a> <a id="4699" class="Symbol">=</a> <a id="4701" href="2016-03-01-insertion-sort-in-agda.html#4697" class="Bound">q</a>
  <a id="4705" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4719" class="Symbol">{</a><a id="4720" href="2016-03-01-insertion-sort-in-agda.html#4720" class="Bound">x</a><a id="4721" class="Symbol">}</a> <a id="4723" class="Symbol">{</a><a id="4724" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4726" href="2016-03-01-insertion-sort-in-agda.html#4726" class="Bound">y</a> <a id="4728" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4729" class="Symbol">}</a> <a id="4731" class="Symbol">{</a><a id="4732" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4734" href="2016-03-01-insertion-sort-in-agda.html#4734" class="Bound">z</a> <a id="4736" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4737" class="Symbol">}</a> <a id="4739" href="2016-03-01-insertion-sort-in-agda.html#4739" class="Bound">p</a> <a id="4741" href="2016-03-01-insertion-sort-in-agda.html#4741" class="Bound">q</a> <a id="4743" class="Keyword">with</a> <a id="4748" href="2016-03-01-insertion-sort-in-agda.html#4726" class="Bound">y</a> <a id="4750" href="https://agda.github.io/agda-stdlib/Relation.Binary.Structures.html#5366" class="Function Operator">≤?</a> <a id="4753" href="2016-03-01-insertion-sort-in-agda.html#4734" class="Bound">z</a>
  <a id="4757" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4771" class="Symbol">{</a><a id="4772" href="2016-03-01-insertion-sort-in-agda.html#4772" class="Bound">x</a><a id="4773" class="Symbol">}</a> <a id="4775" class="Symbol">{</a><a id="4776" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4778" href="2016-03-01-insertion-sort-in-agda.html#4778" class="Bound">y</a> <a id="4780" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4781" class="Symbol">}</a> <a id="4783" class="Symbol">{</a><a id="4784" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4786" href="2016-03-01-insertion-sort-in-agda.html#4786" class="Bound">z</a> <a id="4788" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4789" class="Symbol">}</a> <a id="4791" href="2016-03-01-insertion-sort-in-agda.html#4791" class="Bound">p</a> <a id="4793" class="Symbol">_</a> <a id="4795" class="Symbol">|</a> <a id="4797" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1645" class="InductiveConstructor">yes</a> <a id="4801" href="2016-03-01-insertion-sort-in-agda.html#4801" class="Bound">y≤z</a> <a id="4805" class="Symbol">=</a> <a id="4807" href="2016-03-01-insertion-sort-in-agda.html#4791" class="Bound">p</a>
  <a id="4811" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="4825" class="Symbol">{</a><a id="4826" href="2016-03-01-insertion-sort-in-agda.html#4826" class="Bound">x</a><a id="4827" class="Symbol">}</a> <a id="4829" class="Symbol">{</a><a id="4830" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4832" href="2016-03-01-insertion-sort-in-agda.html#4832" class="Bound">y</a> <a id="4834" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4835" class="Symbol">}</a> <a id="4837" class="Symbol">{</a><a id="4838" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="4840" href="2016-03-01-insertion-sort-in-agda.html#4840" class="Bound">z</a> <a id="4842" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a><a id="4843" class="Symbol">}</a> <a id="4845" class="Symbol">_</a> <a id="4847" href="2016-03-01-insertion-sort-in-agda.html#4847" class="Bound">q</a> <a id="4849" class="Symbol">|</a> <a id="4851" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1682" class="InductiveConstructor">no</a>  <a id="4855" href="2016-03-01-insertion-sort-in-agda.html#4855" class="Bound">y≰z</a> <a id="4859" class="Symbol">=</a> <a id="4861" href="2016-03-01-insertion-sort-in-agda.html#4847" class="Bound">q</a>
</pre>
<p>Insertion sort has rather complicated invariants. If we were implementing mergesort, that we could define ordered lists as lists in which every element is larger than those before it… But alas! Such a crude analysis won’t work for insertion sort! In fact, the only guarantee that insertion sort gives us is that after one “bubble”—one iteration over the list—the <em>last</em> element is sorted… and that after <em>k</em> insertions, the last <em>k</em> elements are sorted…</p>
<p>So to implement insertion sort, we’re going to need some way to represent lists of which the last <em>k</em> elements are sorted. In fact, because it’s easier to implement, we’re going to go with an encoding which ensures us that at most the <em>first</em> <em>k</em> elements are still <em>unsorted</em>.</p>
<p>The <code>OVec</code> datatype below has three parameters: <em>l</em>, <em>n</em> and <em>k</em>. The first of these is the lower bound… that is to say, of the sorted part, the smallest element is <em>l</em>. The second is the length of the list. One question that we’ve avoided so far is the question “What sort of things can go wrong in a sorting algorithm?” Obviously, the first thing that comes to mind is “it doens’t sort”, but some other problems that it could have is that it can <em>delete</em> elements, or <em>copy</em> elements. While keeping track of the length doesn’t solve <em>all</em> of those problems—if we delete as much as we copy, we don’t change the length—but it’s a good starting point. The last, <em>k</em>, is the number of still unsorted elements at the beginning of the list.</p>
<p>There are three ways to construct an <code>OVec</code>:</p>
<ul>
<li>we have the empty list, which has zero length, and zero unsorted elements… and a sorted segment of length zero with lower bound ⊤—this was the main reason to introduce Â;</li>
<li>we can add an element to the sorted segment of the list—as long as there aren’t any unsorted elements in there yet—but we will have to prove that the new element is actually smaller than the current lower bound;</li>
<li>and finally, we can forgo all sorting, and just add some unsorted elements to the front of the list.</li>
</ul>
<pre class="Agda">  <a id="6904" class="Keyword">data</a> <a id="InsertionSort.OVec"></a><a id="6909" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="6914" class="Symbol">:</a> <a id="6916" class="Symbol">(</a><a id="6917" href="2016-03-01-insertion-sort-in-agda.html#6917" class="Bound">l</a> <a id="6919" class="Symbol">:</a> <a id="6921" href="2016-03-01-insertion-sort-in-agda.html#3283" class="Datatype">Â</a><a id="6923" class="Symbol">)</a> <a id="6925" class="Symbol">(</a><a id="6926" href="2016-03-01-insertion-sort-in-agda.html#6926" class="Bound">n</a> <a id="6928" href="2016-03-01-insertion-sort-in-agda.html#6928" class="Bound">k</a> <a id="6930" class="Symbol">:</a> <a id="6932" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#192" class="Datatype">ℕ</a><a id="6933" class="Symbol">)</a> <a id="6935" class="Symbol">→</a> <a id="6937" class="PrimitiveType">Set</a> <a id="6941" class="Symbol">(</a><a id="6942" href="2016-03-01-insertion-sort-in-agda.html#2794" class="Bound">c</a> <a id="6944" href="https://agda.github.io/agda-stdlib/Agda.Primitive.html#636" class="Primitive Operator">⊔</a> <a id="6946" href="2016-03-01-insertion-sort-in-agda.html#2799" class="Bound">ℓ₂</a><a id="6948" class="Symbol">)</a> <a id="6950" class="Keyword">where</a>

    <a id="InsertionSort.OVec.[]"></a><a id="6961" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>     <a id="6968" class="Symbol">:</a> <a id="6970" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="6975" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="6977" class="Number">0</a> <a id="6979" class="Number">0</a>

    <a id="InsertionSort.OVec._∷_by_"></a><a id="6986" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">_∷_by_</a> <a id="6993" class="Symbol">:</a> <a id="6995" class="Symbol">∀</a> <a id="6997" class="Symbol">{</a><a id="6998" href="2016-03-01-insertion-sort-in-agda.html#6998" class="Bound">l</a> <a id="7000" href="2016-03-01-insertion-sort-in-agda.html#7000" class="Bound">n</a><a id="7001" class="Symbol">}</a> <a id="7003" class="Symbol">(</a><a id="7004" href="2016-03-01-insertion-sort-in-agda.html#7004" class="Bound">x</a> <a id="7006" class="Symbol">:</a> <a id="7008" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a><a id="7009" class="Symbol">)</a> <a id="7011" class="Symbol">(</a><a id="7012" href="2016-03-01-insertion-sort-in-agda.html#7012" class="Bound">xs</a> <a id="7015" class="Symbol">:</a> <a id="7017" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="7022" href="2016-03-01-insertion-sort-in-agda.html#6998" class="Bound">l</a> <a id="7024" href="2016-03-01-insertion-sort-in-agda.html#7000" class="Bound">n</a> <a id="7026" class="Number">0</a><a id="7027" class="Symbol">)</a>
           <a id="7040" class="Symbol">→</a> <a id="7042" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="7044" href="2016-03-01-insertion-sort-in-agda.html#7004" class="Bound">x</a> <a id="7046" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="7048" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="7050" href="2016-03-01-insertion-sort-in-agda.html#6998" class="Bound">l</a> <a id="7052" class="Symbol">→</a> <a id="7054" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="7059" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="7061" href="2016-03-01-insertion-sort-in-agda.html#7004" class="Bound">x</a> <a id="7063" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="7065" class="Symbol">(</a><a id="7066" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="7070" href="2016-03-01-insertion-sort-in-agda.html#7000" class="Bound">n</a><a id="7071" class="Symbol">)</a> <a id="7073" class="Number">0</a>

    <a id="InsertionSort.OVec._∷_"></a><a id="7080" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">_∷_</a>    <a id="7087" class="Symbol">:</a> <a id="7089" class="Symbol">∀</a> <a id="7091" class="Symbol">{</a><a id="7092" href="2016-03-01-insertion-sort-in-agda.html#7092" class="Bound">l</a> <a id="7094" href="2016-03-01-insertion-sort-in-agda.html#7094" class="Bound">n</a> <a id="7096" href="2016-03-01-insertion-sort-in-agda.html#7096" class="Bound">k</a><a id="7097" class="Symbol">}</a> <a id="7099" class="Symbol">(</a><a id="7100" href="2016-03-01-insertion-sort-in-agda.html#7100" class="Bound">x</a> <a id="7102" class="Symbol">:</a> <a id="7104" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a><a id="7105" class="Symbol">)</a> <a id="7107" class="Symbol">(</a><a id="7108" href="2016-03-01-insertion-sort-in-agda.html#7108" class="Bound">xs</a> <a id="7111" class="Symbol">:</a> <a id="7113" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="7118" href="2016-03-01-insertion-sort-in-agda.html#7092" class="Bound">l</a> <a id="7120" href="2016-03-01-insertion-sort-in-agda.html#7094" class="Bound">n</a> <a id="7122" href="2016-03-01-insertion-sort-in-agda.html#7096" class="Bound">k</a><a id="7123" class="Symbol">)</a>
           <a id="7136" class="Symbol">→</a> <a id="7138" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="7143" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a> <a id="7145" class="Symbol">(</a><a id="7146" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="7150" href="2016-03-01-insertion-sort-in-agda.html#7094" class="Bound">n</a><a id="7151" class="Symbol">)</a> <a id="7153" class="Symbol">(</a><a id="7154" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="7158" href="2016-03-01-insertion-sort-in-agda.html#7096" class="Bound">k</a><a id="7159" class="Symbol">)</a>
</pre>
<p>If we have a regular vector—a list which tracks its length—we can turn it into a k-ordered vector together with some lower bound. (This is the reason we’re using vectors… if we were using lists, we’d have another existential with the lists length in it.) Our naive process of just inserting all elements in the vector as <em>unsorted</em> means that the lower bound will be either ⊤ or ⊥. And we can show that!</p>
<pre class="Agda">  <a id="InsertionSort.fromVec"></a><a id="7581" href="2016-03-01-insertion-sort-in-agda.html#7581" class="Function">fromVec</a> <a id="7589" class="Symbol">:</a> <a id="7591" class="Symbol">∀</a> <a id="7593" class="Symbol">{</a><a id="7594" href="2016-03-01-insertion-sort-in-agda.html#7594" class="Bound">n</a><a id="7595" class="Symbol">}</a> <a id="7597" class="Symbol">→</a> <a id="7599" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#959" class="Datatype">Vec</a> <a id="7603" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a> <a id="7605" href="2016-03-01-insertion-sort-in-agda.html#7594" class="Bound">n</a> <a id="7607" class="Symbol">→</a> <a id="7609" href="https://agda.github.io/agda-stdlib/Data.Product.html#1369" class="Function">∃</a> <a id="7611" class="Symbol">(λ</a> <a id="7614" href="2016-03-01-insertion-sort-in-agda.html#7614" class="Bound">l</a> <a id="7616" class="Symbol">→</a> <a id="7618" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="7623" href="2016-03-01-insertion-sort-in-agda.html#7614" class="Bound">l</a> <a id="7625" href="2016-03-01-insertion-sort-in-agda.html#7594" class="Bound">n</a> <a id="7627" href="2016-03-01-insertion-sort-in-agda.html#7594" class="Bound">n</a><a id="7628" class="Symbol">)</a>
  <a id="7632" href="2016-03-01-insertion-sort-in-agda.html#7581" class="Function">fromVec</a> <a id="7640" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#995" class="InductiveConstructor">[]</a> <a id="7643" class="Symbol">=</a> <a id="7645" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="7647" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="7649" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>
  <a id="7654" href="2016-03-01-insertion-sort-in-agda.html#7581" class="Function">fromVec</a> <a id="7662" class="Symbol">(</a><a id="7663" href="2016-03-01-insertion-sort-in-agda.html#7663" class="Bound">x</a> <a id="7665" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#1014" class="InductiveConstructor Operator">∷</a> <a id="7667" href="2016-03-01-insertion-sort-in-agda.html#7667" class="Bound">xs</a><a id="7669" class="Symbol">)</a> <a id="7671" class="Symbol">=</a> <a id="7673" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a> <a id="7675" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="7677" href="2016-03-01-insertion-sort-in-agda.html#7663" class="Bound">x</a> <a id="7679" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="7681" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#264" class="Field">proj₂</a> <a id="7687" class="Symbol">(</a><a id="7688" href="2016-03-01-insertion-sort-in-agda.html#7581" class="Function">fromVec</a> <a id="7696" href="2016-03-01-insertion-sort-in-agda.html#7667" class="Bound">xs</a><a id="7698" class="Symbol">)</a>

  <a id="InsertionSort.fromVec-⊤or⊥"></a><a id="7703" href="2016-03-01-insertion-sort-in-agda.html#7703" class="Function">fromVec-⊤or⊥</a> <a id="7716" class="Symbol">:</a> <a id="7718" class="Symbol">∀</a> <a id="7720" class="Symbol">{</a><a id="7721" href="2016-03-01-insertion-sort-in-agda.html#7721" class="Bound">n</a><a id="7722" class="Symbol">}</a> <a id="7724" class="Symbol">{</a><a id="7725" href="2016-03-01-insertion-sort-in-agda.html#7725" class="Bound">xs</a> <a id="7728" class="Symbol">:</a> <a id="7730" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#959" class="Datatype">Vec</a> <a id="7734" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a> <a id="7736" href="2016-03-01-insertion-sort-in-agda.html#7721" class="Bound">n</a><a id="7737" class="Symbol">}</a>
    <a id="7743" class="Symbol">→</a> <a id="7745" class="Keyword">let</a> <a id="7749" href="2016-03-01-insertion-sort-in-agda.html#7749" class="Bound">l</a> <a id="7751" class="Symbol">=</a> <a id="7753" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#252" class="Field">proj₁</a> <a id="7759" class="Symbol">(</a><a id="7760" href="2016-03-01-insertion-sort-in-agda.html#7581" class="Function">fromVec</a> <a id="7768" href="2016-03-01-insertion-sort-in-agda.html#7725" class="Bound">xs</a><a id="7770" class="Symbol">)</a> <a id="7772" class="Keyword">in</a> <a id="7775" href="2016-03-01-insertion-sort-in-agda.html#7749" class="Bound">l</a> <a id="7777" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#151" class="Datatype Operator">≡</a> <a id="7779" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="7781" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#734" class="Datatype Operator">⊎</a> <a id="7783" href="2016-03-01-insertion-sort-in-agda.html#7749" class="Bound">l</a> <a id="7785" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#151" class="Datatype Operator">≡</a> <a id="7787" href="2016-03-01-insertion-sort-in-agda.html#3315" class="InductiveConstructor">⊥</a>
  <a id="7791" href="2016-03-01-insertion-sort-in-agda.html#7703" class="Function">fromVec-⊤or⊥</a> <a id="7804" class="Symbol">{</a><a id="7805" class="DottedPattern Symbol">.</a><a id="7806" class="DottedPattern Number">0</a><a id="7807" class="Symbol">}</a>       <a id="7815" class="Symbol">{</a><a id="7816" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#995" class="InductiveConstructor">[]</a><a id="7818" class="Symbol">}</a>     <a id="7824" class="Symbol">=</a> <a id="7826" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#784" class="InductiveConstructor">inj₁</a> <a id="7831" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a>
  <a id="7838" href="2016-03-01-insertion-sort-in-agda.html#7703" class="Function">fromVec-⊤or⊥</a> <a id="7851" class="Symbol">{</a><a id="7852" class="DottedPattern Symbol">.(</a><a id="7854" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="DottedPattern InductiveConstructor">suc</a> <a id="7858" class="DottedPattern Symbol">_)</a><a id="7860" class="Symbol">}</a> <a id="7862" class="Symbol">{</a><a id="7863" href="2016-03-01-insertion-sort-in-agda.html#7863" class="Bound">x</a> <a id="7865" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#1014" class="InductiveConstructor Operator">∷</a> <a id="7867" href="2016-03-01-insertion-sort-in-agda.html#7867" class="Bound">xs</a><a id="7869" class="Symbol">}</a> <a id="7871" class="Symbol">=</a> <a id="7873" href="https://agda.github.io/agda-stdlib/Data.Sum.Base.html#809" class="InductiveConstructor">inj₂</a> <a id="7878" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Equality.html#208" class="InductiveConstructor">refl</a>
</pre>
<p>And obviously, we can also turn any k-ordered vector into a regular vector simply by forgetting about all the order evidence:</p>
<pre class="Agda">  <a id="InsertionSort.toVec"></a><a id="8021" href="2016-03-01-insertion-sort-in-agda.html#8021" class="Function">toVec</a> <a id="8027" class="Symbol">:</a> <a id="8029" class="Symbol">∀</a> <a id="8031" class="Symbol">{</a><a id="8032" href="2016-03-01-insertion-sort-in-agda.html#8032" class="Bound">l</a> <a id="8034" href="2016-03-01-insertion-sort-in-agda.html#8034" class="Bound">n</a> <a id="8036" href="2016-03-01-insertion-sort-in-agda.html#8036" class="Bound">k</a><a id="8037" class="Symbol">}</a> <a id="8039" class="Symbol">→</a> <a id="8041" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="8046" href="2016-03-01-insertion-sort-in-agda.html#8032" class="Bound">l</a> <a id="8048" href="2016-03-01-insertion-sort-in-agda.html#8034" class="Bound">n</a> <a id="8050" href="2016-03-01-insertion-sort-in-agda.html#8036" class="Bound">k</a> <a id="8052" class="Symbol">→</a> <a id="8054" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#959" class="Datatype">Vec</a> <a id="8058" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a> <a id="8060" href="2016-03-01-insertion-sort-in-agda.html#8034" class="Bound">n</a>
  <a id="8064" href="2016-03-01-insertion-sort-in-agda.html#8021" class="Function">toVec</a> <a id="8070" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a> <a id="8073" class="Symbol">=</a> <a id="8075" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#995" class="InductiveConstructor">[]</a>
  <a id="8080" href="2016-03-01-insertion-sort-in-agda.html#8021" class="Function">toVec</a> <a id="8086" class="Symbol">(</a><a id="8087" href="2016-03-01-insertion-sort-in-agda.html#8087" class="Bound">x</a> <a id="8089" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="8091" href="2016-03-01-insertion-sort-in-agda.html#8091" class="Bound">xs</a><a id="8093" class="Symbol">)</a> <a id="8095" class="Symbol">=</a> <a id="8097" href="2016-03-01-insertion-sort-in-agda.html#8087" class="Bound">x</a> <a id="8099" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#1014" class="InductiveConstructor Operator">∷</a> <a id="8101" href="2016-03-01-insertion-sort-in-agda.html#8021" class="Function">toVec</a> <a id="8107" href="2016-03-01-insertion-sort-in-agda.html#8091" class="Bound">xs</a>
  <a id="8112" href="2016-03-01-insertion-sort-in-agda.html#8021" class="Function">toVec</a> <a id="8118" class="Symbol">(</a><a id="8119" href="2016-03-01-insertion-sort-in-agda.html#8119" class="Bound">x</a> <a id="8121" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="8123" href="2016-03-01-insertion-sort-in-agda.html#8123" class="Bound">xs</a> <a id="8126" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="8129" class="Symbol">_)</a> <a id="8132" class="Symbol">=</a> <a id="8134" href="2016-03-01-insertion-sort-in-agda.html#8119" class="Bound">x</a> <a id="8136" href="https://agda.github.io/agda-stdlib/Data.Vec.Base.html#1014" class="InductiveConstructor Operator">∷</a> <a id="8138" href="2016-03-01-insertion-sort-in-agda.html#8021" class="Function">toVec</a> <a id="8144" href="2016-03-01-insertion-sort-in-agda.html#8123" class="Bound">xs</a>
</pre>
<p>Finally! We’ve developed enough vocabulary to write down what it really means to perform an insertion:</p>
<pre class="Agda">  <a id="InsertionSort.insert"></a><a id="8262" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="8269" class="Symbol">:</a> <a id="8271" class="Symbol">∀</a> <a id="8273" class="Symbol">{</a><a id="8274" href="2016-03-01-insertion-sort-in-agda.html#8274" class="Bound">l</a> <a id="8276" href="2016-03-01-insertion-sort-in-agda.html#8276" class="Bound">n</a> <a id="8278" href="2016-03-01-insertion-sort-in-agda.html#8278" class="Bound">k</a><a id="8279" class="Symbol">}</a> <a id="8281" class="Symbol">(</a><a id="8282" href="2016-03-01-insertion-sort-in-agda.html#8282" class="Bound">x</a> <a id="8284" class="Symbol">:</a> <a id="8286" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a><a id="8287" class="Symbol">)</a> <a id="8289" class="Symbol">→</a> <a id="8291" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="8296" href="2016-03-01-insertion-sort-in-agda.html#8274" class="Bound">l</a> <a id="8298" href="2016-03-01-insertion-sort-in-agda.html#8276" class="Bound">n</a> <a id="8300" href="2016-03-01-insertion-sort-in-agda.html#8278" class="Bound">k</a> <a id="8302" class="Symbol">→</a> <a id="8304" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="8309" class="Symbol">(</a><a id="8310" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="8312" href="2016-03-01-insertion-sort-in-agda.html#8282" class="Bound">x</a> <a id="8314" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="8316" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="8318" href="2016-03-01-insertion-sort-in-agda.html#8274" class="Bound">l</a><a id="8319" class="Symbol">)</a> <a id="8321" class="Symbol">(</a><a id="8322" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="8326" href="2016-03-01-insertion-sort-in-agda.html#8276" class="Bound">n</a><a id="8327" class="Symbol">)</a> <a id="8329" href="2016-03-01-insertion-sort-in-agda.html#8278" class="Bound">k</a>
  <a id="8333" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="8340" href="2016-03-01-insertion-sort-in-agda.html#8340" class="Bound">x</a> <a id="8342" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>       <a id="8351" class="Symbol">=</a> <a id="8353" href="2016-03-01-insertion-sort-in-agda.html#8340" class="Bound">x</a> <a id="8355" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="8357" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a> <a id="8360" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="8363" href="2016-03-01-insertion-sort-in-agda.html#3619" class="InductiveConstructor">≲⊤</a>
  <a id="8368" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="8375" href="2016-03-01-insertion-sort-in-agda.html#8375" class="Bound">x</a> <a id="8377" class="Symbol">(</a><a id="8378" href="2016-03-01-insertion-sort-in-agda.html#8378" class="Bound">y</a> <a id="8380" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="8382" href="2016-03-01-insertion-sort-in-agda.html#8382" class="Bound">xs</a><a id="8384" class="Symbol">)</a> <a id="8386" class="Symbol">=</a> <a id="8388" href="2016-03-01-insertion-sort-in-agda.html#8378" class="Bound">y</a> <a id="8390" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="8392" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="8399" href="2016-03-01-insertion-sort-in-agda.html#8375" class="Bound">x</a> <a id="8401" href="2016-03-01-insertion-sort-in-agda.html#8382" class="Bound">xs</a>
  <a id="8406" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="8413" href="2016-03-01-insertion-sort-in-agda.html#8413" class="Bound">x</a> <a id="8415" class="Symbol">(</a><a id="8416" href="2016-03-01-insertion-sort-in-agda.html#8416" class="Bound">y</a> <a id="8418" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="8420" href="2016-03-01-insertion-sort-in-agda.html#8420" class="Bound">xs</a> <a id="8423" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="8426" href="2016-03-01-insertion-sort-in-agda.html#8426" class="Bound">p</a><a id="8427" class="Symbol">)</a> <a id="8429" class="Keyword">with</a> <a id="8434" href="2016-03-01-insertion-sort-in-agda.html#8413" class="Bound">x</a> <a id="8436" href="https://agda.github.io/agda-stdlib/Relation.Binary.Structures.html#5366" class="Function Operator">≤?</a> <a id="8439" href="2016-03-01-insertion-sort-in-agda.html#8416" class="Bound">y</a>
  <a id="8443" class="Symbol">...</a> <a id="8447" class="Symbol">|</a> <a id="8449" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1645" class="InductiveConstructor">yes</a> <a id="8453" href="2016-03-01-insertion-sort-in-agda.html#8453" class="Bound">x≤y</a> <a id="8457" class="Symbol">=</a> <a id="8459" class="Bound">x</a> <a id="8461" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="8463" class="Symbol">(</a><a id="8464" class="Bound">y</a> <a id="8466" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="8468" class="Bound">xs</a> <a id="8471" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="8474" class="Bound">p</a><a id="8475" class="Symbol">)</a>
                  <a id="8495" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="8498" class="Symbol">(</a><a id="8499" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="8506" href="2016-03-01-insertion-sort-in-agda.html#8453" class="Bound">x≤y</a><a id="8509" class="Symbol">)</a>
  <a id="8513" class="Symbol">...</a> <a id="8517" class="Symbol">|</a> <a id="8519" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1682" class="InductiveConstructor">no</a>  <a id="8523" href="2016-03-01-insertion-sort-in-agda.html#8523" class="Bound">x≰y</a> <a id="8527" class="Symbol">=</a> <a id="8529" class="Bound">y</a> <a id="8531" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="8533" class="Symbol">(</a><a id="8534" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="8541" class="Bound">x</a> <a id="8543" class="Bound">xs</a><a id="8545" class="Symbol">)</a>
                  <a id="8565" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="8568" class="Symbol">(</a><a id="8569" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="8583" class="Symbol">(</a><a id="8584" href="2016-03-01-insertion-sort-in-agda.html#3924" class="Function">≰-lift</a> <a id="8591" href="2016-03-01-insertion-sort-in-agda.html#8523" class="Bound">x≰y</a><a id="8594" class="Symbol">)</a> <a id="8596" class="Bound">p</a><a id="8597" class="Symbol">)</a>
</pre>
<p>Note that insert takes a vector with <em>k</em> unsorted elements, and returns a vector which has one more element, but still only <em>k</em> unsorted elements! It does this (obviously) by inserting the element at the right position within the sorted portion of the vector.</p>
<p>It follows fairly easily from the fact that ‘insert’ inserts an element in the sorted portion of the vector, that if we take elements from the unsorted portion, insert it, and repeat this <em>k</em> times, we’ll have sorted <em>k</em> elements… and therefore the list.</p>
<pre class="Agda">  <a id="InsertionSort.insertsort"></a><a id="9127" href="2016-03-01-insertion-sort-in-agda.html#9127" class="Function">insertsort</a> <a id="9138" class="Symbol">:</a> <a id="9140" class="Symbol">∀</a> <a id="9142" class="Symbol">{</a><a id="9143" href="2016-03-01-insertion-sort-in-agda.html#9143" class="Bound">l</a> <a id="9145" href="2016-03-01-insertion-sort-in-agda.html#9145" class="Bound">n</a> <a id="9147" href="2016-03-01-insertion-sort-in-agda.html#9147" class="Bound">k</a><a id="9148" class="Symbol">}</a> <a id="9150" class="Symbol">→</a> <a id="9152" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="9157" href="2016-03-01-insertion-sort-in-agda.html#9143" class="Bound">l</a> <a id="9159" href="2016-03-01-insertion-sort-in-agda.html#9145" class="Bound">n</a> <a id="9161" href="2016-03-01-insertion-sort-in-agda.html#9147" class="Bound">k</a> <a id="9163" class="Symbol">→</a> <a id="9165" href="https://agda.github.io/agda-stdlib/Data.Product.html#1369" class="Function">∃</a> <a id="9167" class="Symbol">(λ</a> <a id="9170" href="2016-03-01-insertion-sort-in-agda.html#9170" class="Bound">l</a> <a id="9172" class="Symbol">→</a> <a id="9174" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="9179" href="2016-03-01-insertion-sort-in-agda.html#9170" class="Bound">l</a> <a id="9181" href="2016-03-01-insertion-sort-in-agda.html#9145" class="Bound">n</a> <a id="9183" class="Number">0</a><a id="9184" class="Symbol">)</a>
  <a id="9188" href="2016-03-01-insertion-sort-in-agda.html#9127" class="Function">insertsort</a> <a id="9199" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>            <a id="9213" class="Symbol">=</a> <a id="9215" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="9217" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="9219" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>
  <a id="9224" href="2016-03-01-insertion-sort-in-agda.html#9127" class="Function">insertsort</a> <a id="9235" class="Symbol">(</a><a id="9236" href="2016-03-01-insertion-sort-in-agda.html#9236" class="Bound">x</a> <a id="9238" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="9240" href="2016-03-01-insertion-sort-in-agda.html#9240" class="Bound">xs</a><a id="9242" class="Symbol">)</a>      <a id="9249" class="Symbol">=</a> <a id="9251" href="2016-03-01-insertion-sort-in-agda.html#9127" class="Function">insertsort</a> <a id="9262" class="Symbol">(</a><a id="9263" href="2016-03-01-insertion-sort-in-agda.html#8262" class="Function">insert</a> <a id="9270" href="2016-03-01-insertion-sort-in-agda.html#9236" class="Bound">x</a> <a id="9272" href="2016-03-01-insertion-sort-in-agda.html#9240" class="Bound">xs</a><a id="9274" class="Symbol">)</a>
  <a id="9278" href="2016-03-01-insertion-sort-in-agda.html#9127" class="Function">insertsort</a> <a id="9289" class="Symbol">(</a><a id="9290" href="2016-03-01-insertion-sort-in-agda.html#9290" class="Bound">x</a> <a id="9292" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="9294" href="2016-03-01-insertion-sort-in-agda.html#9294" class="Bound">xs</a> <a id="9297" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="9300" href="2016-03-01-insertion-sort-in-agda.html#9300" class="Bound">p</a><a id="9301" class="Symbol">)</a> <a id="9303" class="Symbol">=</a> <a id="9305" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="9307" href="2016-03-01-insertion-sort-in-agda.html#9290" class="Bound">x</a> <a id="9309" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="9311" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="9313" href="2016-03-01-insertion-sort-in-agda.html#9290" class="Bound">x</a> <a id="9315" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="9317" href="2016-03-01-insertion-sort-in-agda.html#9294" class="Bound">xs</a> <a id="9320" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="9323" href="2016-03-01-insertion-sort-in-agda.html#9300" class="Bound">p</a>
</pre>
<p>There is one thing we haven’t verified so far—and I’ve hinted at this possibility above. It is fairly simple to implement an insertion sort algorithm with the <em>same</em> type which simply takes the first element and repeats it <em>n</em> times.</p>
<p>So our types aren’t perfect. However, such constraints are a little harder to encode in data types. One approach would be to construct a sorting permutation instead of working with an input and output list. What we could do to make this code work is to give a separate proof—though this would go against my correctness by construction sensibilities—stating that if an element is in the input list it is in the output list. However, as I mostly wrote this blog post as a test case for my Jekyll/Agda integration… I’m not going to put in the effort to do either.</p>
<p>One amusing anecdote about this code is that while I was writing it, I thought I was implementing bubble sort—so much for safety. However, if you have a look at the invariants that both algorithms maintain, they are really quite similar. In fact, we can easily implement bubble sort using our <code>OVec</code> data type. The underlying algorithm is incredibly similar to insert. However, as opposed to inserting the first element in the correct position, “bubble” has trouble making up its mind and drops whatever it’s holding when it sees a bigger element!</p>
<pre class="Agda">  <a id="InsertionSort.bubble"></a><a id="10690" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10697" class="Symbol">:</a> <a id="10699" class="Symbol">∀</a> <a id="10701" class="Symbol">{</a><a id="10702" href="2016-03-01-insertion-sort-in-agda.html#10702" class="Bound">l</a> <a id="10704" href="2016-03-01-insertion-sort-in-agda.html#10704" class="Bound">n</a> <a id="10706" href="2016-03-01-insertion-sort-in-agda.html#10706" class="Bound">k</a><a id="10707" class="Symbol">}</a> <a id="10709" class="Symbol">(</a><a id="10710" href="2016-03-01-insertion-sort-in-agda.html#10710" class="Bound">x</a> <a id="10712" class="Symbol">:</a> <a id="10714" href="2016-03-01-insertion-sort-in-agda.html#2932" class="Function">A</a><a id="10715" class="Symbol">)</a> <a id="10717" class="Symbol">→</a> <a id="10719" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="10724" href="2016-03-01-insertion-sort-in-agda.html#10702" class="Bound">l</a> <a id="10726" href="2016-03-01-insertion-sort-in-agda.html#10704" class="Bound">n</a> <a id="10728" href="2016-03-01-insertion-sort-in-agda.html#10706" class="Bound">k</a> <a id="10730" class="Symbol">→</a> <a id="10732" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="10737" class="Symbol">(</a><a id="10738" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="10740" href="2016-03-01-insertion-sort-in-agda.html#10710" class="Bound">x</a> <a id="10742" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="10744" href="2016-03-01-insertion-sort-in-agda.html#4331" class="Function Operator">⊓</a> <a id="10746" href="2016-03-01-insertion-sort-in-agda.html#10702" class="Bound">l</a><a id="10747" class="Symbol">)</a> <a id="10749" class="Symbol">(</a><a id="10750" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Nat.html#223" class="InductiveConstructor">suc</a> <a id="10754" href="2016-03-01-insertion-sort-in-agda.html#10704" class="Bound">n</a><a id="10755" class="Symbol">)</a> <a id="10757" href="2016-03-01-insertion-sort-in-agda.html#10706" class="Bound">k</a>
  <a id="10761" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10768" href="2016-03-01-insertion-sort-in-agda.html#10768" class="Bound">x</a> <a id="10770" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>            <a id="10784" class="Symbol">=</a> <a id="10786" href="2016-03-01-insertion-sort-in-agda.html#10768" class="Bound">x</a> <a id="10788" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="10790" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a> <a id="10793" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="10796" href="2016-03-01-insertion-sort-in-agda.html#3619" class="InductiveConstructor">≲⊤</a>
  <a id="10801" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10808" href="2016-03-01-insertion-sort-in-agda.html#10808" class="Bound">x</a> <a id="10810" class="Symbol">(</a><a id="10811" href="2016-03-01-insertion-sort-in-agda.html#10811" class="Bound">y</a> <a id="10813" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="10815" href="2016-03-01-insertion-sort-in-agda.html#10815" class="Bound">xs</a><a id="10817" class="Symbol">)</a>      <a id="10824" class="Keyword">with</a> <a id="10829" href="2016-03-01-insertion-sort-in-agda.html#10808" class="Bound">x</a> <a id="10831" href="https://agda.github.io/agda-stdlib/Relation.Binary.Structures.html#5366" class="Function Operator">≤?</a> <a id="10834" href="2016-03-01-insertion-sort-in-agda.html#10811" class="Bound">y</a>
  <a id="10838" class="Symbol">...</a> <a id="10842" class="Symbol">|</a> <a id="10844" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1682" class="InductiveConstructor">no</a>  <a id="10848" href="2016-03-01-insertion-sort-in-agda.html#10848" class="Bound">x≰y</a> <a id="10852" class="Symbol">=</a> <a id="10854" class="Bound">y</a> <a id="10856" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="10858" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10865" class="Bound">x</a> <a id="10867" class="Bound">xs</a>
  <a id="10872" class="Symbol">...</a> <a id="10876" class="Symbol">|</a> <a id="10878" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1645" class="InductiveConstructor">yes</a> <a id="10882" href="2016-03-01-insertion-sort-in-agda.html#10882" class="Bound">x≤y</a> <a id="10886" class="Symbol">=</a> <a id="10888" class="Bound">x</a> <a id="10890" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="10892" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10899" class="Bound">y</a> <a id="10901" class="Bound">xs</a>
  <a id="10906" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10913" href="2016-03-01-insertion-sort-in-agda.html#10913" class="Bound">x</a> <a id="10915" class="Symbol">(</a><a id="10916" href="2016-03-01-insertion-sort-in-agda.html#10916" class="Bound">y</a> <a id="10918" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="10920" href="2016-03-01-insertion-sort-in-agda.html#10920" class="Bound">xs</a> <a id="10923" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="10926" href="2016-03-01-insertion-sort-in-agda.html#10926" class="Bound">p</a><a id="10927" class="Symbol">)</a> <a id="10929" class="Keyword">with</a> <a id="10934" href="2016-03-01-insertion-sort-in-agda.html#10913" class="Bound">x</a> <a id="10936" href="https://agda.github.io/agda-stdlib/Relation.Binary.Structures.html#5366" class="Function Operator">≤?</a> <a id="10939" href="2016-03-01-insertion-sort-in-agda.html#10916" class="Bound">y</a>
  <a id="10943" class="Symbol">...</a> <a id="10947" class="Symbol">|</a> <a id="10949" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1682" class="InductiveConstructor">no</a>  <a id="10953" href="2016-03-01-insertion-sort-in-agda.html#10953" class="Bound">x≰y</a> <a id="10957" class="Symbol">=</a> <a id="10959" class="Bound">y</a> <a id="10961" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="10963" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="10970" class="Bound">x</a> <a id="10972" class="Bound">xs</a>
                  <a id="10993" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="10996" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="11010" class="Symbol">(</a><a id="11011" href="2016-03-01-insertion-sort-in-agda.html#3924" class="Function">≰-lift</a> <a id="11018" href="2016-03-01-insertion-sort-in-agda.html#10953" class="Bound">x≰y</a><a id="11021" class="Symbol">)</a> <a id="11023" class="Bound">p</a>
  <a id="11027" class="Symbol">...</a> <a id="11031" class="Symbol">|</a> <a id="11033" href="https://agda.github.io/agda-stdlib/Relation.Nullary.html#1645" class="InductiveConstructor">yes</a> <a id="11037" href="2016-03-01-insertion-sort-in-agda.html#11037" class="Bound">x≤y</a> <a id="11041" class="Symbol">=</a> <a id="11043" class="Bound">x</a> <a id="11045" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="11047" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="11054" class="Bound">y</a> <a id="11056" class="Bound">xs</a>
                  <a id="11077" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="11080" href="2016-03-01-insertion-sort-in-agda.html#4497" class="Function">⊓-conserves-≲</a> <a id="11094" href="2016-03-01-insertion-sort-in-agda.html#11130" class="Function">x≲y</a> <a id="11098" class="Symbol">(</a><a id="11099" href="2016-03-01-insertion-sort-in-agda.html#11454" class="Function">≲-trans</a> <a id="11107" href="2016-03-01-insertion-sort-in-agda.html#11130" class="Function">x≲y</a> <a id="11111" class="Bound">p</a><a id="11112" class="Symbol">)</a>
    <a id="11118" class="Keyword">where</a>
      <a id="11130" href="2016-03-01-insertion-sort-in-agda.html#11130" class="Function">x≲y</a> <a id="11134" class="Symbol">=</a> <a id="11136" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="11143" href="2016-03-01-insertion-sort-in-agda.html#11037" class="Bound">x≤y</a>
</pre>
<p>All that we need is to show that our home-brewed ≲-relation is transitive. This follows immediately from the underlying order. This kind of stuff—the adding of bounds to total order—should really be provided by the standard library. And perhaps it is, and I’ve simply failed to find it…</p>
<pre class="Agda">      <a id="11454" href="2016-03-01-insertion-sort-in-agda.html#11454" class="Function">≲-trans</a> <a id="11462" class="Symbol">:</a> <a id="11464" class="Symbol">∀</a> <a id="11466" class="Symbol">{</a><a id="11467" href="2016-03-01-insertion-sort-in-agda.html#11467" class="Bound">x</a> <a id="11469" href="2016-03-01-insertion-sort-in-agda.html#11469" class="Bound">y</a> <a id="11471" href="2016-03-01-insertion-sort-in-agda.html#11471" class="Bound">z</a><a id="11472" class="Symbol">}</a> <a id="11474" class="Symbol">→</a> <a id="11476" href="2016-03-01-insertion-sort-in-agda.html#11467" class="Bound">x</a> <a id="11478" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="11480" href="2016-03-01-insertion-sort-in-agda.html#11469" class="Bound">y</a> <a id="11482" class="Symbol">→</a> <a id="11484" href="2016-03-01-insertion-sort-in-agda.html#11469" class="Bound">y</a> <a id="11486" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="11488" href="2016-03-01-insertion-sort-in-agda.html#11471" class="Bound">z</a> <a id="11490" class="Symbol">→</a> <a id="11492" href="2016-03-01-insertion-sort-in-agda.html#11467" class="Bound">x</a> <a id="11494" href="2016-03-01-insertion-sort-in-agda.html#3564" class="Datatype Operator">≲</a> <a id="11496" href="2016-03-01-insertion-sort-in-agda.html#11471" class="Bound">z</a>
      <a id="11504" href="2016-03-01-insertion-sort-in-agda.html#11454" class="Function">≲-trans</a>  <a id="11513" href="2016-03-01-insertion-sort-in-agda.html#3596" class="InductiveConstructor">⊥≲</a>         <a id="11524" class="Symbol">_</a>         <a id="11534" class="Symbol">=</a> <a id="11536" href="2016-03-01-insertion-sort-in-agda.html#3596" class="InductiveConstructor">⊥≲</a>
      <a id="11545" href="2016-03-01-insertion-sort-in-agda.html#11454" class="CatchallClause Function">≲-trans</a><a id="11552" class="CatchallClause">  </a><a id="11554" class="CatchallClause Symbol">_</a><a id="11555" class="CatchallClause">          </a><a id="11565" href="2016-03-01-insertion-sort-in-agda.html#3619" class="CatchallClause InductiveConstructor">≲⊤</a>        <a id="11575" class="Symbol">=</a> <a id="11577" href="2016-03-01-insertion-sort-in-agda.html#3619" class="InductiveConstructor">≲⊤</a>
      <a id="11586" href="2016-03-01-insertion-sort-in-agda.html#11454" class="Function">≲-trans</a> <a id="11594" class="Symbol">(</a><a id="11595" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="11602" href="2016-03-01-insertion-sort-in-agda.html#11602" class="Bound">p</a><a id="11603" class="Symbol">)</a> <a id="11605" class="Symbol">(</a><a id="11606" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="11613" href="2016-03-01-insertion-sort-in-agda.html#11613" class="Bound">q</a><a id="11614" class="Symbol">)</a> <a id="11616" class="Symbol">=</a> <a id="11618" href="2016-03-01-insertion-sort-in-agda.html#3642" class="InductiveConstructor">≤-lift</a> <a id="11625" class="Symbol">(</a><a id="11626" href="2016-03-01-insertion-sort-in-agda.html#2921" class="Function">≤-trans</a> <a id="11634" href="2016-03-01-insertion-sort-in-agda.html#11602" class="Bound">p</a> <a id="11636" href="2016-03-01-insertion-sort-in-agda.html#11613" class="Bound">q</a><a id="11637" class="Symbol">)</a>
</pre>
<p>At any rate, once we have our “bubble” function, the implementation of the sorting algorithm is trivial—and exactly identical to the definition of insertion sort!</p>
<pre class="Agda">  <a id="InsertionSort.bubblesort"></a><a id="11816" href="2016-03-01-insertion-sort-in-agda.html#11816" class="Function">bubblesort</a> <a id="11827" class="Symbol">:</a> <a id="11829" class="Symbol">∀</a> <a id="11831" class="Symbol">{</a><a id="11832" href="2016-03-01-insertion-sort-in-agda.html#11832" class="Bound">l</a> <a id="11834" href="2016-03-01-insertion-sort-in-agda.html#11834" class="Bound">n</a> <a id="11836" href="2016-03-01-insertion-sort-in-agda.html#11836" class="Bound">k</a><a id="11837" class="Symbol">}</a> <a id="11839" class="Symbol">→</a> <a id="11841" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="11846" href="2016-03-01-insertion-sort-in-agda.html#11832" class="Bound">l</a> <a id="11848" href="2016-03-01-insertion-sort-in-agda.html#11834" class="Bound">n</a> <a id="11850" href="2016-03-01-insertion-sort-in-agda.html#11836" class="Bound">k</a> <a id="11852" class="Symbol">→</a> <a id="11854" href="https://agda.github.io/agda-stdlib/Data.Product.html#1369" class="Function">∃</a> <a id="11856" class="Symbol">(λ</a> <a id="11859" href="2016-03-01-insertion-sort-in-agda.html#11859" class="Bound">l</a> <a id="11861" class="Symbol">→</a> <a id="11863" href="2016-03-01-insertion-sort-in-agda.html#6909" class="Datatype">OVec</a> <a id="11868" href="2016-03-01-insertion-sort-in-agda.html#11859" class="Bound">l</a> <a id="11870" href="2016-03-01-insertion-sort-in-agda.html#11834" class="Bound">n</a> <a id="11872" class="Number">0</a><a id="11873" class="Symbol">)</a>
  <a id="11877" href="2016-03-01-insertion-sort-in-agda.html#11816" class="Function">bubblesort</a> <a id="11888" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>            <a id="11902" class="Symbol">=</a> <a id="11904" href="2016-03-01-insertion-sort-in-agda.html#3304" class="InductiveConstructor">⊤</a> <a id="11906" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="11908" href="2016-03-01-insertion-sort-in-agda.html#6961" class="InductiveConstructor">[]</a>
  <a id="11913" href="2016-03-01-insertion-sort-in-agda.html#11816" class="Function">bubblesort</a> <a id="11924" class="Symbol">(</a><a id="11925" href="2016-03-01-insertion-sort-in-agda.html#11925" class="Bound">x</a> <a id="11927" href="2016-03-01-insertion-sort-in-agda.html#7080" class="InductiveConstructor Operator">∷</a> <a id="11929" href="2016-03-01-insertion-sort-in-agda.html#11929" class="Bound">xs</a><a id="11931" class="Symbol">)</a>      <a id="11938" class="Symbol">=</a> <a id="11940" href="2016-03-01-insertion-sort-in-agda.html#11816" class="Function">bubblesort</a> <a id="11951" class="Symbol">(</a><a id="11952" href="2016-03-01-insertion-sort-in-agda.html#10690" class="Function">bubble</a> <a id="11959" href="2016-03-01-insertion-sort-in-agda.html#11925" class="Bound">x</a> <a id="11961" href="2016-03-01-insertion-sort-in-agda.html#11929" class="Bound">xs</a><a id="11963" class="Symbol">)</a>
  <a id="11967" href="2016-03-01-insertion-sort-in-agda.html#11816" class="Function">bubblesort</a> <a id="11978" class="Symbol">(</a><a id="11979" href="2016-03-01-insertion-sort-in-agda.html#11979" class="Bound">x</a> <a id="11981" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="11983" href="2016-03-01-insertion-sort-in-agda.html#11983" class="Bound">xs</a> <a id="11986" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="11989" href="2016-03-01-insertion-sort-in-agda.html#11989" class="Bound">p</a><a id="11990" class="Symbol">)</a> <a id="11992" class="Symbol">=</a> <a id="11994" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟦</a> <a id="11996" href="2016-03-01-insertion-sort-in-agda.html#11979" class="Bound">x</a> <a id="11998" href="2016-03-01-insertion-sort-in-agda.html#3326" class="InductiveConstructor Operator">⟧</a> <a id="12000" href="https://agda.github.io/agda-stdlib/Agda.Builtin.Sigma.html#236" class="InductiveConstructor Operator">,</a> <a id="12002" href="2016-03-01-insertion-sort-in-agda.html#11979" class="Bound">x</a> <a id="12004" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">∷</a> <a id="12006" href="2016-03-01-insertion-sort-in-agda.html#11983" class="Bound">xs</a> <a id="12009" href="2016-03-01-insertion-sort-in-agda.html#6986" class="InductiveConstructor Operator">by</a> <a id="12012" href="2016-03-01-insertion-sort-in-agda.html#11989" class="Bound">p</a>
</pre>
<p>This does lead to an interesting point: how do you know that what you’ve implemented is actually what you <em>wanted</em> to implement? Of course, a similar discussion applies much more strongly to programming languages with weaker or non-existent type systems. However, the point seems to be brought up more often once you stray into the realm of verification.</p>
<p>Obviously, if you write your program in a language such as JavaScript, there is nothing that tells you you’ve implemented the right algorithm. And it would be rather hard to come up with a test which could tell the difference between insertion sort and bubble sort—though a stress-test may reveal the fact. However, in JavaScript, one cannot even tell the difference between two completely different algorithms, e.g. “insertion sort” and “Lehvenstein distance”, without using tests. And even then, tests generally only cover a small, finite number of cases. You may have implemented algorithm <em>A</em> for the first 100 inputs, and algorithm <em>B</em> afterwards, and you’ll never know.</p>
<p>Once you enter the realm of Agda, the argument can be made a little neater: using a language with a <em>strong</em> type system, you limit the set of all possible algorithms with your types, and you can be sure that you’ve implemented <em>one</em> of the algorithms in that set. The trick is to narrow down the set to exactly those algorithms that you need.</p>
<p>In the above exercise, I failed to do so. The set of algorithms that I selected for was the set of algorithms that turn lists into sorted lists of equal length, without inspecting the values (other than by comparison) and maintaining the “<em>k</em>-unsorted elements” invariant. As we’ve seen, some of the algorithms in this set are insertion sort, bubble sort, and “copy the first element <em>n</em> times”. And because I paid little attention—I’m convinced my brain simply implemented what was an obvious optimalisation—I picked the wrong one.</p>
<p>The second question that usually follows is “How do you know that you’ve written down the right <em>property</em>?” For instance, one small mistake in my definition of <code>OVec</code> would have it mean “a list where sometimes an element is smaller than one of the elements after it”. Obviously, sorting algorithms would have this property… Now, the simple answer is that you don’t. And this holds for Agda, Coq, JavaScript, set theory… There is no real way to ensure that what you write down, in general, corresponds to what you wanted to write down.</p>
<p>But there is one redeeming factor. Set theory is believed to not be a hot mess because there are <em>tons</em> of people who’ve checked the proofs, and who’ve used the proved properties to prove other, more complex properties. When you prove a lemma, you intend to <em>use</em> it to prove some different lemma. And in general, if you’ve proven the wrong lemma, your next proof will <em>fail</em>. And obviously, the notion that the <em>usage</em> of properties and and <em>repeated checking</em> of proofs strengthens a theory applies even more strongly to theories which are also <em>machine-checked</em>.</p>]]></description>
    <pubDate>Tue, 01 Mar 2016 12:00:00 UT</pubDate>
    <guid>http://wen.works/posts/2016-03-01-insertion-sort-in-agda.html</guid>
    <dc:creator>Wen Kokke</dc:creator>
</item>

    </channel>
</rss>
